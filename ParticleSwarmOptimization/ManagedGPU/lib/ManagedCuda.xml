<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManagedCuda</name>
    </assembly>
    <members>
        <member name="T:ManagedCuda.CudaContext">
            <summary>
            An abstraction layer for the CUDA driver API
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.#ctor">
            <summary>
            Create a new instace of managed Cuda. Creates a new cuda context.
            Using device with ID 0 and <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.SchedAuto"/>
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.#ctor(System.Boolean)">
            <summary>
            Create a new instace of managed Cuda. <para/>
            If <c>createNew</c> is true, a new cuda context will be created. <para/>
            If <c>createNew</c> is false, the CudaContext is bound to an existing cuda context. Creates a new context if no context exists.<para/>
            Using device with ID 0 and <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.SchedAuto"/>
            </summary>
            <param name="createNew"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.#ctor(System.Int32)">
            <summary>
            Create a new instace of managed Cuda. Creates a new cuda context.
            Using <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.SchedAuto"/>
            </summary>
            <param name="deviceId">DeviceID</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a new instace of managed Cuda. <para/>
            If <c>createNew</c> is true, a new cuda context will be created. <para/>
            If <c>createNew</c> is false, the CudaContext bounds to an existing cuda context. Creates a new context if no context exists.<para/>
            </summary>
            <param name="deviceId">DeviceID</param>
            <param name="createNew"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.#ctor(System.Int32,ManagedCuda.BasicTypes.CUCtxFlags)">
            <summary>
            Create a new instace of managed Cuda. Creates a new cuda context.
            </summary>
            <param name="deviceId">DeviceID.</param>
            <param name="flags">Context creation flags.</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.#ctor(System.Int32,ManagedCuda.BasicTypes.CUCtxFlags,System.Boolean)">
            <summary>
            Create a new instace of managed Cuda
            </summary>
            <param name="deviceId">DeviceID.</param>
            <param name="flags">Context creation flags.</param>
            <param name="createNew">Create a new CUDA context or use an exiting context for the calling thread. Creates a new context if no context exists.</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.#ctor(System.IntPtr,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.CudaContext.DirectXVersion)">
            <summary>
            Create a new instance of managed CUDA for a given Direct3DX-device. <para/>
            Direct3D resources from this device may be registered and mapped through the lifetime of this CUDA context.
            </summary>
            <param name="aD3DDevice">Direct3D device</param>
            <param name="flags">Context creation flags</param>
            <param name="dXVersion">DirectX Version to bind this context to (9, 10, 11)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.#ctor(ManagedCuda.BasicTypes.CUdevice,System.IntPtr,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.CudaContext.DirectXVersion)">
            <summary>
            Create a new instance of managed CUDA for a given Direct3DX-device. <para/>
            Direct3D resources from this device may be registered and mapped through the lifetime of this CUDA context. <para/>
            Use <see cref="M:ManagedCuda.CudaContext.GetDirectXDevices(System.IntPtr,ManagedCuda.BasicTypes.CUd3dXDeviceList,ManagedCuda.CudaContext.DirectXVersion)"/> to obtain a list of possible values for cudaDevice.
            </summary>
            <param name="cudaDevice">CUdevice to map this context to. Use <see cref="M:ManagedCuda.CudaContext.GetDirectXDevices(System.IntPtr,ManagedCuda.BasicTypes.CUd3dXDeviceList,ManagedCuda.CudaContext.DirectXVersion)"/> to obtain a list of possible values</param>
            <param name="aD3DDevice">Direct3D device.</param>
            <param name="flags">Context creation flags</param>
            <param name="dXVersion">DirectX (9, 10, 11) Version to bind this context to</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.#ctor(ManagedCuda.BasicTypes.CUCtxFlags,System.Int32)">
            <summary>
            As the normal context constructor has the same arguments, the OpenGL-constructor is private with inverse arguement order.
            It has to be called from a static method.
            Create a new instance of managed CUDA for a OpenGL-device. <para/>
            OpenGL resources from this device may be registered and mapped through the lifetime of this CUDA context.
            </summary>
            <param name="deviceId">CUdevice to map this context to. </param>
            <param name="flags">Context creation flags</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.Dispose(System.Boolean)">
            <summary>
            For IDisposable. <para/>
            Note: If this instance created the wrapped CUcontext, it will be destroyed and can't be accessed by other threads anymore. <para/>
            If this instance only was bound to an existing CUcontext, the wrapped CUcontext won't be destroyed.
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetAPIVersionOfCurrentContext">
            <summary>
            Gets the context's API version
            </summary>
            <returns>Version</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.Synchronize">
            <summary>
            Blocks until the device has completed all preceding requested tasks. Throws a <see cref="T:ManagedCuda.CudaException"/> if one of the
            preceding tasks failed. If the context was created with the <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.SchedAuto"/> flag, the CPU thread will
            block until the GPU context has finished its work.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.PushContext">
            <summary>
            Push the CUDA context
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.PopContext">
            <summary>
            Pop the CUDA context
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.SetCurrent">
            <summary>
            Binds this CUDA context to the calling CPU thread
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.SetSharedMemConfig(ManagedCuda.BasicTypes.CUsharedconfig)">
            <summary>
            Sets the shared memory configuration for the current context.<para/>
            On devices with configurable shared memory banks, this function will set
            the context's shared memory bank size which is used for subsequent kernel 
            launches. <para/> 
            Changed the shared memory configuration between launches may insert a device
            side synchronization point between those launches.<para/>
            Changing the shared memory bank size will not increase shared memory usage
            or affect occupancy of kernels, but may have major effects on performance. 
            Larger bank sizes will allow for greater potential bandwidth to shared memory,
            but will change what kinds of accesses to shared memory will result in bank 
            conflicts.<para/>
            This function will do nothing on devices with fixed shared memory bank size.
            <para/>
            The supported bank configurations are:
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.DefaultBankSize"/>: set bank width to the default initial
              setting (currently, four bytes).
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.FourByteBankSize"/>: set shared memory bank width to
              be natively four bytes.
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.EightByteBankSize"/>: set shared memory bank width to
              be natively eight bytes.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetSharedMemConfig">
            <summary>
            Returns the current shared memory configuration for the current context.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadModule(System.String)">
            <summary>
            Load a CUBIN-module from file
            </summary>
            <param name="modulePath"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadModulePTX(System.String,ManagedCuda.BasicTypes.CUJITOption[],System.Object[])">
            <summary>
            Load a PTX module from file
            </summary>
            <param name="modulePath"></param>
            <param name="options"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadModulePTX(System.String)">
            <summary>
            Load a PTX module from file
            </summary>
            <param name="modulePath"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadModulePTX(System.Byte[],ManagedCuda.BasicTypes.CUJITOption[],System.Object[])">
            <summary>
            Load a ptx module from image as byte[]
            </summary>
            <param name="moduleImage"></param>
            <param name="options"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadModulePTX(System.IO.Stream,ManagedCuda.BasicTypes.CUJITOption[],System.Object[])">
            <summary>
            Load a ptx module from image as stream
            </summary>
            <param name="moduleImage"></param>
            <param name="options"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadModulePTX(System.Byte[])">
            <summary>
            Load a ptx module from image as byte[]
            </summary>
            <param name="moduleImage"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadModulePTX(System.IO.Stream)">
            <summary>
            Load a ptx module from image as stream
            </summary>
            <param name="moduleImage"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadKernel(System.String,System.String)">
            <summary>
            Load a CUBIN-module from file and return directly a wrapped CudaKernel
            </summary>
            <param name="modulePath">Path and name of the module file</param>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadKernelPTX(System.String,System.String,ManagedCuda.BasicTypes.CUJITOption[],System.Object[])">
            <summary>
            Load a PTX module from file and return directly a wrapped CudaKernel
            </summary>
            <param name="modulePath">Path and name of the ptx-module file</param>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="options">JIT-compile options.</param>
            <param name="values">JIT-compile options values.</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadKernelPTX(System.String,System.String)">
            <summary>
            Load a PTX module from file and return directly a wrapped CudaKernel
            </summary>
            <param name="modulePath">Path and name of the ptx-module file</param>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadKernelPTX(System.Byte[],System.String,ManagedCuda.BasicTypes.CUJITOption[],System.Object[])">
            <summary>
            Load a ptx module from image as byte[] and return directly a wrapped CudaKernel
            </summary>
            <param name="moduleImage">Module image (cubin or PTX) as byte[]</param>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="options">JIT-compile options. Only if module image is a ptx module</param>
            <param name="values">JIT-compilt options values. Only if module image is a ptx module</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadKernelPTX(System.IO.Stream,System.String,ManagedCuda.BasicTypes.CUJITOption[],System.Object[])">
            <summary>
            Load a ptx module from image as stream and return directly a wrapped CudaKernel
            </summary>
            <param name="moduleImage">Module image (cubin or PTX) as stream</param>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="options">JIT-compile options. Only if module image is a ptx module</param>
            <param name="values">JIT-compilt options values. Only if module image is a ptx module</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadKernelPTX(System.Byte[],System.String)">
            <summary>
            Load a ptx module from image as byte[] and return directly a wrapped CudaKernel
            </summary>
            <param name="moduleImage">Module image (cubin or PTX) as byte[]</param>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadKernelPTX(System.IO.Stream,System.String)">
            <summary>
            Load a ptx module from image as stream and return directly a wrapped CudaKernel
            </summary>
            <param name="moduleImage">Module image (cubin or PTX) as stream</param>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadModuleFatBin(System.Byte[])">
            <summary>
            Load a FatBinary module from image as byte[]
            </summary>
            <param name="moduleImage"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadModuleFatBin(System.IO.Stream)">
            <summary>
            Load a FatBinary module from image as stream
            </summary>
            <param name="moduleImage"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadKernelFatBin(System.Byte[],System.String)">
            <summary>
            Load a FatBinary module from image as byte[] and return directly a wrapped CudaKernel
            </summary>
            <param name="moduleImage">Module image (fat binary) as byte[]</param>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.LoadKernelFatBin(System.IO.Stream,System.String)">
            <summary>
            Load a FatBinary module from image as stream and return directly a wrapped CudaKernel
            </summary>
            <param name="moduleImage">Module image (fat binary) as stream</param>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.UnloadModule(ManagedCuda.BasicTypes.CUmodule)">
            <summary>
            unload module
            </summary>
            <param name="aModule"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.UnloadKernel(ManagedCuda.CudaKernel)">
            <summary>
            unload kernel
            </summary>
            <param name="aKernel"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.AllocateMemory(ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Allocate memory on the device
            </summary>
            <param name="aSizeInBytes"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemory(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            SetMemory (cuMemsetD8)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aSizeInBytes"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemory(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            SetMemory (cuMemsetD16)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aSizeInBytes"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemory(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            SetMemory (cuMemsetD32)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aSizeInBytes"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemory(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            SetMemory (cuMemset2DD8)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aPitch"></param>
            <param name="aHeight"></param>
            <param name="aWidth"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemory(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            SetMemory (cuMemset2DD16)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aPitch"></param>
            <param name="aHeight"></param>
            <param name="aWidth"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemory(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            SetMemory (cuMemset2DD32)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aPitch"></param>
            <param name="aHeight"></param>
            <param name="aWidth"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemoryAsync(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            SetMemory (cuMemsetD8)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aSizeInBytes"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemoryAsync(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            SetMemory (cuMemsetD16)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aSizeInBytes"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemoryAsync(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            SetMemory (cuMemsetD32)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aSizeInBytes"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemoryAsync(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            SetMemory (cuMemset2DD8)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aPitch"></param>
            <param name="aHeight"></param>
            <param name="aWidth"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemoryAsync(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            SetMemory (cuMemset2DD16)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aPitch"></param>
            <param name="aHeight"></param>
            <param name="aWidth"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.ClearMemoryAsync(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            SetMemory (cuMemset2DD32)
            </summary>
            <param name="aPtr"></param>
            <param name="aValue"></param>
            <param name="aPitch"></param>
            <param name="aHeight"></param>
            <param name="aWidth"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.FreeMemory(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Free device memory
            </summary>
            <param name="dBuffer"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetTotalDeviceMemorySize">
            <summary>
            Returns the total device memory in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetFreeDeviceMemorySize">
            <summary>
            Returns the free available device memory in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.DeviceCanAccessPeer(ManagedCuda.CudaContext)">
            <summary>
            Queries if a device may directly access a peer device's memory
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetCacheConfig">
            <summary>
            On devices where the L1 cache and shared memory use the same hardware
            resources, this returns the preferred cache configuration
            for the current context. This is only a preference. The driver will use
            the requested configuration if possible, but it is free to choose a different
            configuration if required to execute functions.<para/>
            This will return <see cref="F:ManagedCuda.BasicTypes.CUFuncCache.PreferNone"/> on devices
            where the size of the L1 cache and shared memory are fixed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.SetCacheConfig(ManagedCuda.BasicTypes.CUFuncCache)">
            <summary>
            On devices where the L1 cache and shared memory use the same hardware
            resources, this sets through <c>cacheConfig</c> the preferred cache configuration for
            the current context. This is only a preference. The driver will use
            the requested configuration if possible, but it is free to choose a different
            configuration if required to execute the function. Any function preference
            set via <see cref="M:ManagedCuda.CudaContext.SetCacheConfig(ManagedCuda.BasicTypes.CUFuncCache)"/> will be preferred over this context-wide
            setting. Setting the context-wide cache configuration to
            <see cref="F:ManagedCuda.BasicTypes.CUFuncCache.PreferNone"/> will cause subsequent kernel launches to prefer
            to not change the cache configuration unless required to launch the kernel.<para/>
            This setting does nothing on devices where the size of the L1 cache and
            shared memory are fixed.<para/>
            Launching a kernel with a different preference than the most recent
            preference setting may insert a device-side synchronization point.
            </summary>
            <param name="cacheConfig"></param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
            <param name="aSizeInBytes">Number of bytes to copy</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice``1(ManagedCuda.BasicTypes.CUdeviceptr,``0[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <typeparam name="T">T must be of value type, i.e. a struct</typeparam>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source pointer to host memory</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice``1(ManagedCuda.BasicTypes.CUdeviceptr,``0)">
            <summary>
            Copy data from host to device memory
            </summary>
            <typeparam name="T">T must be of value type, i.e. a struct</typeparam>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source pointer to host memory</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Double[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Single[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Int32[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Int64[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.SByte[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Int16[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt64[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.dim3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char4[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar4[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short4[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort4[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int4[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint4[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long4[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong4[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float3[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float4[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.double1[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.double2[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuDoubleComplex[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuDoubleReal[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuFloatComplex[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuFloatReal[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source array</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Double)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Single)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Int32)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Int64)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.SByte)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.Int16)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt64)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.dim3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char4)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short4)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int4)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint4)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long4)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float3)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float4)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.double1)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.double2)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="aDest">Destination CUdeviceptr (Pointer to device memory)</param>
            <param name="aSource">Source value</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost``1(``0[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <typeparam name="T">T must be of value type, i.e. a struct</typeparam>
            <param name="aDest">Destination data in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost``1(``0,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <typeparam name="T">T must be of value type, i.e. a struct</typeparam>
            <param name="aDest">Destination data in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Byte[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Double[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Single[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Int32[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.IntPtr,ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination pointer to host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
            <param name="aSizeInBytes">Number of bytes to copy</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Int64[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.SByte[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Int16[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.UInt32[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.UInt64[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.UInt16[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.dim3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.char1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.char2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.char3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.char4[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uchar1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uchar2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uchar3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uchar4[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.short1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.short2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.short3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.short4[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ushort1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ushort2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ushort3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ushort4[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.int1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.int2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.int3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.int4[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uint1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uint2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uint3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uint4[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.long1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.long2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.long3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.long4[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ulong1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ulong2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ulong3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ulong4[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.float1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.float2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.float3[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.float4[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.double1[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.double2[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.cuDoubleComplex[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.cuDoubleReal[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.cuFloatComplex[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.cuFloatReal[],ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination array in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Byte,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Double,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Single,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Int32,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Int64,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.SByte,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.Int16,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.UInt32,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.UInt64,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(System.UInt16,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.dim3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.char1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.char2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.char3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.char4,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uchar1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uchar2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uchar3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uchar4,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.short1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.short2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.short3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.short4,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ushort1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ushort2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ushort3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ushort4,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.int1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.int2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.int3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.int4,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uint1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uint2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uint3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.uint4,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.long1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.long2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.long3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.long4,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ulong1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ulong2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ulong3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.ulong4,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.float1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.float2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.float3,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.float4,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.double1,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.double2,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.CopyToHost(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aDest">Destination value in host memory</param>
            <param name="aSource">Source CUdeviceptr (Pointer to device memory)</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDeviceName">
            <summary>
            Returns the device name of the device bound to the actual context
            </summary>
            <returns>Device Name</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDeviceComputeCapability">
            <summary>
            Returns the device's compute capability of the device bound to the actual context
            </summary>
            <returns>Device compute capability</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDeviceInfo">
            <summary>
            Retrieve device properties
            </summary>
            <returns>DeviceProperties</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.CreateOpenGLContext(System.Int32,ManagedCuda.BasicTypes.CUCtxFlags)">
            <summary>
            As the normal context constructor has the same arguments, the OpenGL-constructor is private with inverse arguement order.
            It has to be called from a static method.
            Create a new instance of managed CUDA for a OpenGL-device. <para/>
            OpenGL resources from this device may be registered and mapped through the lifetime of this CUDA context.
            </summary>
            <param name="deviceId">CUdevice to map this context to. </param>
            <param name="flags">Context creation flags</param>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetOpenGLDevices(ManagedCuda.BasicTypes.CUGLDeviceList)">
            <summary>
            Gets the CUDA devices associated with the current OpenGL context
            </summary>
            <param name="deviceList">SLI parameter</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDirectXDevices(System.IntPtr,ManagedCuda.BasicTypes.CUd3dXDeviceList,ManagedCuda.CudaContext.DirectXVersion)">
            <summary>
            Returns a list of possible CUDA devices to use for a given DirectX device
            </summary>
            <param name="pD3DXDevice">DirectX device</param>
            <param name="deviceList">SLI parameter</param>
            <param name="dXVersion">DirectX version of the directX device</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDirect3DDevice(ManagedCuda.CudaContext.DirectXVersion)">
            <summary>
            Returns the Direct3D device against which the CUDA context, bound to the calling thread,
            was created.
            </summary>
            <param name="dXVersion"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDeviceName(System.Int32)">
            <summary>
            Returns the device name of the device with ID <c>deviceID</c>
            </summary>
            <param name="deviceID"></param>
            <returns>Device Name</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetMaxGflopsDevice">
            <summary>
            returns the best GPU (with maximum GFLOPS)
            </summary>
            <returns>best GPU</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetMaxGflopsDeviceId">
            <summary>
            returns the best GPU (with maximum GFLOPS)
            </summary>
            <returns>Id of the best GPU</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDeviceComputeCapability(System.Int32)">
            <summary>
            Returns the device's compute capability of the device with ID <c>deviceID</c>
            </summary>
            <param name="deviceID"></param>
            <returns>Device compute capability</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDriverVersion">
            <summary>
            Returns the version number of the installed cuda driver
            </summary>
            <returns>CUDA driver version</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDeviceInfo(System.Int32)">
            <summary>
            Retrieve device properties
            </summary>
            <param name="deviceId">Device ID</param>
            <returns>DeviceProperties</returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetDeviceCount">
            <summary>
            Get the number of CUDA capable devices
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.EnablePeerAccess(ManagedCuda.CudaContext)">
            <summary>
            If both the current context (current to the calling thread) and <c>peerContext</c> are on devices which support unified 
            addressing (as may be queried using GetDeviceInfo), then
            on success all allocations from <c>peerContext</c> will immediately be accessible
            by the current context.  See \ref CUDA_UNIFIED for additional
            details. <para/>
            Note that access granted by this call is unidirectional and that in order to access
            memory from the current context in <c>peerContext</c>, a separate symmetric call 
            to ::cuCtxEnablePeerAccess() is required. <para/>
            Returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/> if <see cref="M:ManagedCuda.CudaContext.DeviceCanAccessPeer(ManagedCuda.CudaContext)"/> indicates
            that the CUdevice of the current context cannot directly access memory
            from the CUdevice of <c>peerContext</c>. <para/>
            Throws <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorPeerAccessAlreadyEnabled"/> if direct access of
            <c>peerContext</c> from the current context has already been enabled. <para/>
            Throws <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/> if there is no current context, <c>peerContext</c>
            is not a valid context, or if the current context is <c>peerContext</c>. <para/>
            </summary>
            <param name="peerContext">Peer context to enable direct access to from the current context</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.DisablePeerAccess(ManagedCuda.CudaContext)">
            <summary>
            Disables direct access to memory allocations in a peer context and unregisters any registered allocations.
            </summary>
            <param name="peerContext">Peer context to disable direct access to</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaContext.GetCUdevice(System.Int32)">
            <summary>
            Gets the CUdevice for a given device ordinal number
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaContext.Context">
            <summary>
            Gets the Cuda context bound to this managed Cuda object
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaContext.Device">
            <summary>
            Gets the Cuda device allocated to the Cuda Context
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaContext.DeviceId">
            <summary>
            Gets the Id of the Cuda device.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaContext.IsContextOwner">
            <summary>
            Indicates if the CudaContext instance created the wrapped cuda context (return = true) or if the CudaContext instance was bound to an existing cuda context.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaContext.DirectXVersion">
            <summary>
            Specifies the directX version to use with a cuda context, if necessary
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaContext.DirectXVersion.D3D9">
            <summary>
            DirectX9
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaContext.DirectXVersion.D3D10">
            <summary>
            DirectX10
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaContext.DirectXVersion.D3D11">
            <summary>
            DirectX11
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaDirectXInteropResource">
            <summary>
            Wrapper for a CUgraphicsResource (directX)
            </summary>
        </member>
        <member name="T:ManagedCuda.ICudaGraphicsInteropResource">
            <summary>
            Common interface for OpenGL and DirectX graphics interop resources
            </summary>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.Map(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.Map">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.UnMap(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.UnMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.SetMapFlags(ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags)">
            <summary>
            
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.Unregister">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetMappedPointer``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetMappedPointer(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            
            </summary>
            <param name="devicePtr"></param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetMappedPointer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetMappedArray1D(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetMappedArray2D(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetMappedArray3D(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetMappedMipmappedArray(ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaMipmappedArrayNumChannels)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetMappedCUArray(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetMappedCUMipmappedArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.GetCUgraphicsResource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.ICudaGraphicsInteropResource.SetIsMapped">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.#ctor(System.IntPtr,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags,ManagedCuda.CudaContext.DirectXVersion)">
            <summary>
            Registers a new graphics interop resource for interop with DirectX
            </summary>
            <param name="d3dResource">DirectX resource to register</param>
            <param name="flags">register Flags</param>
            <param name="version">DirectX version</param>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.#ctor(System.IntPtr,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags,ManagedCuda.CudaContext.DirectXVersion,ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags)">
            <summary>
            Registers a new graphics interop resource for interop with DirectX
            </summary>
            <param name="d3dResource">DirectX resource to register</param>
            <param name="flags">register Flags</param>
            <param name="version">DirectX version</param>
            <param name="mapFlags">resource mapping flags</param>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.Map(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Maps the graphics resource for access by CUDA.<para/>
            The resource may be accessed by CUDA until it is unmapped. The graphics API from which the resource
            was registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.CudaDirectXInteropResource.Map"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If the resource is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.Map">
            <summary>
            Maps the graphics resource for access by CUDA.<para/>
            The resource may be accessed by CUDA until it is unmapped. The graphics API from which the resource
            was registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.CudaDirectXInteropResource.Map"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If the resource is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.UnMap(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Unmaps the graphics resource.<para/>
            Once unmapped, the resource may not be accessed by CUDA until they are mapped again.<para/>
            This function provides the synchronization guarantee that any CUDA work issued in <c>stream</c> before <see cref="M:ManagedCuda.CudaDirectXInteropResource.UnMap"/>
            will complete before any subsequently issued graphics work begins.<para/>
            If the resource is not presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.UnMap">
            <summary>
            Unmaps the graphics resource.<para/>
            Once unmapped, the resources in <c>resources</c> may not be accessed by CUDA until they are mapped again.<para/>
            This function provides the synchronization guarantee that any CUDA work issued in <c>stream</c> before <see cref="M:ManagedCuda.CudaDirectXInteropResource.UnMap"/>
            will complete before any subsequently issued graphics work begins.<para/>
            If the resource is not presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.SetMapFlags(ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags)">
            <summary>
            Set <c>flags</c> for mapping the graphics resource. <para/>
            Changes to <c>flags</c> will take effect the next time <c>resource</c> is mapped. See <see cref="T:ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags"/>. <para/>
            If <c>resource</c> is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown. 
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.Unregister">
            <summary>
            Unregisters the wrapped resource. Better use Dispose(), as the wrapper of the unregistered resource is of no use after unregistering.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetMappedPointer``1">
            <summary>
            Returns device variable through which the mapped graphics resource may be accessed. <para/>
            The pointer value in the device variable may change every time that the resource is mapped.<para/>
            If the resource is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            exception is thrown. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetMappedPointer(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Returns in <c>devicePtr</c> a pointer through which the mapped graphics resource may be accessed. Returns
            in <c>size</c> the size of the memory in bytes which may be accessed from that pointer. The value set in <c>devicePtr</c> may
            change every time that the resource is mapped.<para/>
            If the resource is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            exception is thrown. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetMappedPointer">
            <summary>
            Returns a <c>CUdeviceptr</c>, a device pointer through which the mapped graphics resource may be accessed. 
            The value set in <c>devicePtr</c> may
            change every time that the resource is mapped.<para/>
            If the resource is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            exception is thrown. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetMappedArray1D(System.UInt32,System.UInt32)">
            <summary>
            Returns a CudaArray1D through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaArray1D</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetMappedArray2D(System.UInt32,System.UInt32)">
            <summary>
            Returns a CudaArray2D through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaArray2D</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetMappedArray3D(System.UInt32,System.UInt32)">
            <summary>
            Returns a CudaArray3D through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaArray3D</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetMappedMipmappedArray(ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaMipmappedArrayNumChannels)">
            <summary>
            Returns a CudaMipmappedArray through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaMipmappedArray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetMappedCUArray(System.UInt32,System.UInt32)">
            <summary>
            Returns a CUarray handle through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CUarray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetMappedCUMipmappedArray">
            <summary>
            Returns a CUmipmappedArray handle through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CUmipmappedArray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.GetCUgraphicsResource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaDirectXInteropResource.SetIsMapped">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDirectXInteropResource.IsMapped">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDirectXInteropResource.IsRegistered">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDirectXInteropResource.CUgraphicsResource">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaTextureArray1D">
            <summary>
            CudaArrayTexture1D
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray1D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray1DNumChannels)">
            <summary>
            Creates a new 1D texture from array memory. Allocates new array.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="size">In elements</param>
            <param name="numChannels"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray1D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray1D)">
            <summary>
            Creates a new 1D texture from array memory
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray1D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray1D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray1D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.TextureReference">
            <summary>
            TextureReference
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.AddressMode">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.Filtermode">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.ChannelSize">
            <summary>
            ChannelSize
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.TotalSizeInBytes">
            <summary>
            TotalSizeInBytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.NumChannels">
            <summary>
            NumChannels
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.CUFuntion">
            <summary>
            CUFuntion
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray1D.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaSurfObject">
            <summary>
            Cuda Surface Object
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaSurfObject.#ctor(ManagedCuda.BasicTypes.CudaResourceDesc)">
            <summary>
            Creates a surface object. <c>ResDesc</c> describes
            the data to perform surface load/stores on. <c>ResDesc.resType</c> must be 
            <see cref="F:ManagedCuda.BasicTypes.CUResourceType.Array"/> and  <c>ResDesc.hArray</c>
            must be set to a valid CUDA array handle. <c>ResDesc.flags</c> must be set to zero.
            </summary>
            <param name="resDesc">CudaResourceDesc</param>
        </member>
        <member name="M:ManagedCuda.CudaSurfObject.#ctor(ManagedCuda.CudaArray1D)">
            <summary>
            Creates a surface object. <c>ResDesc</c> describes
            the data to perform surface load/stores on. <c>ResDesc.resType</c> must be 
            <see cref="F:ManagedCuda.BasicTypes.CUResourceType.Array"/> and  <c>ResDesc.hArray</c>
            must be set to a valid CUDA array handle.
            </summary>
            <param name="array">CudaArray1D</param>
        </member>
        <member name="M:ManagedCuda.CudaSurfObject.#ctor(ManagedCuda.CudaArray2D)">
            <summary>
            Creates a surface object. <c>ResDesc</c> describes
            the data to perform surface load/stores on. <c>ResDesc.resType</c> must be 
            <see cref="F:ManagedCuda.BasicTypes.CUResourceType.Array"/> and  <c>ResDesc.hArray</c>
            must be set to a valid CUDA array handle.
            </summary>
            <param name="array">CudaArray2D</param>
        </member>
        <member name="M:ManagedCuda.CudaSurfObject.#ctor(ManagedCuda.CudaArray3D)">
            <summary>
            Creates a surface object. <c>ResDesc</c> describes
            the data to perform surface load/stores on. <c>ResDesc.resType</c> must be 
            <see cref="F:ManagedCuda.BasicTypes.CUResourceType.Array"/> and  <c>ResDesc.hArray</c>
            must be set to a valid CUDA array handle.
            </summary>
            <param name="array">CudaArray3D</param>
        </member>
        <member name="M:ManagedCuda.CudaSurfObject.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaSurfObject.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaSurfObject.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="P:ManagedCuda.CudaSurfObject.SurfObject">
            <summary>
            Returns the wrapped CUsurfObject
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurfObject.ResDesc">
            <summary>
            Returns the CudaResourceDesc used to create the CudaSurfObject
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaArray1DNumChannels">
            <summary>
            Number of channels in array
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaArray1DNumChannels.One">
            <summary>
            One channel, e.g. float1, int1, float, int
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaArray1DNumChannels.Two">
            <summary>
            Two channels, e.g. float2, int2
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaArray1DNumChannels.Four">
            <summary>
            Four channels, e.g. float4, int4
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaArray1D">
            <summary>
            An one dimensional CUDA array
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.#ctor(ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray1DNumChannels)">
            <summary>
            Creates a new CUDA array. 
            </summary>
            <param name="format"></param>
            <param name="size"></param>
            <param name="numChannels"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.#ctor(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Creates a new CUDA array from an existing CUarray. 
            The CUarray won't be destroyed when disposing.
            Array properties are obtained by cuArrayGetDescriptor
            </summary>
            <param name="cuArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.#ctor(ManagedCuda.BasicTypes.CUarray,System.Boolean)">
            <summary>
            Creates a new CUDA array from an existing CUarray. 
            Array properties are obtained by cuArrayGetDescriptor
            </summary>
            <param name="cuArray"></param>
            <param name="isOwner">The cuArray will be destroyed while disposing, if the CudaArray is the owner</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D``1(``0[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <typeparam name="T">T must be of value type, i.e. a struct</typeparam>
            <param name="source">source pointer to host memory</param>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D``1(``0,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <typeparam name="T">T must be of value type, i.e. a struct</typeparam>
            <param name="source">source pointer to host memory</param>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="source">Pointer to source data</param>
            <param name="sizeInBytes">Number of bytes to copy</param>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.Byte[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.Double[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.Single[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.Int32[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.Int64[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.SByte[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.Int16[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.UInt32[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.UInt64[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(System.UInt16[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.dim3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.char1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.char2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.char3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.char4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.uchar1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.uchar2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.uchar3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.uchar4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.short1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.short2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.short3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.short4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.ushort1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.ushort2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.ushort3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.ushort4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.int1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.int2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.int3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.int4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.uint1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.uint2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.uint3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.uint4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.long1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.long2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.long3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.long4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.ulong1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.ulong2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.ulong3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.ulong4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.float1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.float2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.float3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.float4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.double1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.double2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.cuDoubleComplex[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.cuDoubleReal[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.cuFloatComplex[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromHostToArray1D(ManagedCuda.VectorTypes.cuFloatReal[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to array memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="source">source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost``1(``0[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <typeparam name="T">T must be of value type, i.e. a struct</typeparam>
            <param name="dest">Destination pointer to host memory</param>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost``1(``0@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <typeparam name="T">T must be of value type, i.e. a struct</typeparam>
            <param name="dest">Destination pointer to host memory</param>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.IntPtr,System.UInt32,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="dest">Pointer to Destination data</param>
            <param name="sizeInBytes">Number of bytes to copy</param>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.Byte[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.Double[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.Single[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.Int32[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.Int64[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.SByte[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.Int16[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.UInt32[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.UInt64[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(System.UInt16[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.dim3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.char1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.char2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.char3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.char4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.uchar1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.uchar2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.uchar3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.uchar4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.short1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.short2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.short3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.short4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.ushort1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.ushort2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.ushort3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.ushort4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.int1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.int2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.int3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.int4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.uint1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.uint2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.uint3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.uint4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.long1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.long2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.long3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.long4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.ulong1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.ulong2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.ulong3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.ulong4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.float1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.float2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.float3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.float4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.double1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.double2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.cuDoubleComplex[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.cuDoubleReal[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.cuFloatComplex[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToHost(ManagedCuda.VectorTypes.cuFloatReal[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to host memory
            </summary>
            <param name="offsetInBytes">Offset in bytes of destination array</param>
            <param name="dest">Destination array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToArray1D(ManagedCuda.CudaArray1D,ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to array
            </summary>
            <param name="dest">Destination array</param>
            <param name="source">source array</param>
            <param name="aBytesToCopy">Size of memory copy in bytes</param>
            <param name="destOffset">Offset in bytes of destination array</param>
            <param name="sourceOffset">Offset in bytes of source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromThisToArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to array
            </summary>
            <param name="dest">Destination array</param>
            <param name="aBytesToCopy">Size of memory copy in bytes</param>
            <param name="destOffset">Offset in bytes of destination array</param>
            <param name="sourceOffset">Offset in bytes of source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToThis(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to array
            </summary>
            <param name="source">Destination array</param>
            <param name="aBytesToCopy">Size of memory copy in bytes</param>
            <param name="destOffset">Offset in bytes of destination array</param>
            <param name="sourceOffset">Offset in bytes of source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromArray1DToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from array to device
            </summary>
            <param name="dest">DevicePointer to copy data to</param>
            <param name="aBytesToCopy">number of bytes to copy</param>
            <param name="offsetInBytes">Offset in bytes of source array</param>
        </member>
        <member name="M:ManagedCuda.CudaArray1D.CopyFromDeviceToArray1D(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to array
            </summary>
            <param name="source">DevicePointer to copy data from</param>
            <param name="aBytesToCopy">number of bytes to copy</param>
            <param name="offsetInBytes">Offset in bytes of source array</param>
        </member>
        <member name="P:ManagedCuda.CudaArray1D.Width">
            <summary>
            Returns the array width in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray1D.WidthInBytes">
            <summary>
            Returns the array width in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray1D.CUArray">
            <summary>
            Returns the wrapped CUarray
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray1D.ArrayDescriptor">
            <summary>
            Returns the wrapped CUDAArrayDescriptor
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray1D.IsOwner">
            <summary>
            If the wrapper class instance is the owner of a CUDA handle, it will be destroyed while disposing.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaKernel">
            <summary>
            A CUDA function or CUDA kernel
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._cuda">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._module">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._function">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._sharedMemSize">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._blockDim">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._gridDim">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._kernelName">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel.res">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._maxThreadsPerBlock">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._sharedSizeBytes">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._constSizeBytes">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._localSizeBytes">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._numRegs">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._ptxVersion">
            <summary> 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaKernel._binaryVersion">
            <summary> 
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaKernel.#ctor(System.String,ManagedCuda.BasicTypes.CUmodule,ManagedCuda.CudaContext)">
            <summary>
            Loads the given CUDA kernel from the CUmodule. Block and Grid dimensions must be set 
            before running the kernel. Shared memory size is set to 0.
            </summary>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="module">The CUmodule which contains the kernel</param>
            <param name="cuda">CUDA abstraction layer object (= CUDA context) for this Kernel</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.#ctor(System.String,ManagedCuda.BasicTypes.CUmodule,ManagedCuda.CudaContext,ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            Loads the given CUDA kernel from the CUmodule. Block and Grid dimensions are set directly. 
            Shared memory size is set to 0.
            </summary>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="module">The CUmodule which contains the kernel</param>
            <param name="cuda">CUDA abstraction layer object (= CUDA context) for this Kernel</param>
            <param name="blockDim">Dimension of block of threads (3D)</param>
            <param name="gridDim">Dimension of grid of block of threads (2D - z-component is discarded)</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.#ctor(System.String,ManagedCuda.BasicTypes.CUmodule,ManagedCuda.CudaContext,ManagedCuda.VectorTypes.dim3)">
            <summary>
            Loads the given CUDA kernel from the CUmodule. Block dimensions are set directly, 
            grid dimensions must be set before running the kernel. Shared memory size is set to 0.
            </summary>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="module">The CUmodule which contains the kernel</param>
            <param name="cuda">CUDA abstraction layer object (= CUDA context) for this Kernel</param>
            <param name="blockDim">Dimension of block of threads</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.#ctor(System.String,ManagedCuda.BasicTypes.CUmodule,ManagedCuda.CudaContext,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Loads the given CUDA kernel from the CUmodule. Block and Grid dimensions are set directly. 
            Shared memory size is set to 0.
            </summary>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="module">The CUmodule which contains the kernel</param>
            <param name="cuda">CUDA abstraction layer object (= CUDA context) for this Kernel</param>
            <param name="blockDimX">Dimension of block of threads X</param>
            <param name="blockDimY">Dimension of block of threads Y</param>
            <param name="blockDimZ">Dimension of block of threads Z</param>
            <param name="gridDimX">Dimension of grid of block of threads X</param>
            <param name="gridDimY">Dimension of grid of block of threads Y</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.#ctor(System.String,ManagedCuda.BasicTypes.CUmodule,ManagedCuda.CudaContext,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Loads the given CUDA kernel from the CUmodule. Block dimensions are set directly, 
            grid dimensions must be set before running the kernel. Shared memory size is set to 0.
            </summary>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="module">The CUmodule which contains the kernel</param>
            <param name="cuda">CUDA abstraction layer object (= CUDA context) for this Kernel</param>
            <param name="blockDimX">Dimension of block of threads X</param>
            <param name="blockDimY">Dimension of block of threads Y</param>
            <param name="blockDimZ">Dimension of block of threads Z</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.#ctor(System.String,ManagedCuda.BasicTypes.CUmodule,ManagedCuda.CudaContext,System.UInt32)">
            <summary>
            Loads the given CUDA kernel from the CUmodule. Block and Grid dimensions must be set 
            before running the kernel. Shared memory size is set directly.
            </summary>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="module">The CUmodule which contains the kernel</param>
            <param name="cuda">CUDA abstraction layer object (= CUDA context) for this Kernel</param>
            <param name="sharedMemory">Dynamic shared memory size in Bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.#ctor(System.String,ManagedCuda.BasicTypes.CUmodule,ManagedCuda.CudaContext,ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            Loads the given CUDA kernel from the CUmodule. Block and Grid dimensions and shared memory size are set directly.
            </summary>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="module">The CUmodule which contains the kernel</param>
            <param name="cuda">CUDA abstraction layer object (= CUDA context) for this Kernel</param>
            <param name="blockDim">Dimension of block of threads (2D - z-component is discarded)</param>
            <param name="gridDim">Dimension of grid of block of threads (3D)</param>
            <param name="sharedMemory">Dynamic shared memory size in Bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.#ctor(System.String,ManagedCuda.BasicTypes.CUmodule,ManagedCuda.CudaContext,ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            Loads the given CUDA kernel from the CUmodule. Block dimensions and shared memors size are set directly, 
            grid dimensions must be set before running the kernel.
            </summary>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="module">The CUmodule which contains the kernel</param>
            <param name="cuda">CUDA abstraction layer object (= CUDA context) for this Kernel</param>
            <param name="blockDim">Dimension of block of threads </param>
            <param name="sharedMemory">Dynamic shared memory size in Bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.#ctor(System.String,ManagedCuda.BasicTypes.CUmodule,ManagedCuda.CudaContext,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Loads the given CUDA kernel from the CUmodule. Block dimensions and shared memors size are set directly, 
            grid dimensions must be set before running the kernel.
            </summary>
            <param name="kernelName">The kernel name as defined in the *.cu file</param>
            <param name="module">The CUmodule which contains the kernel</param>
            <param name="cuda">CUDA abstraction layer object (= CUDA context) for this Kernel</param>
            <param name="blockDimX">Dimension of block of threads X</param>
            <param name="blockDimY">Dimension of block of threads Y</param>
            <param name="blockDimZ">Dimension of block of threads Z</param>
            <param name="gridDimX">Dimension of grid of block of threads X</param>
            <param name="gridDimY">Dimension of grid of block of threads Y</param>
            <param name="sharedMemory">Dynamic shared memory size in Bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable``1(System.String,``0)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable``1(System.String,``0[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Byte)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.SByte)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.UInt16)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Int16)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.UInt32)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Int32)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.UInt64)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Int64)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Single)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Double)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.dim3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.char1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.char2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.char3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.char4)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.short1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.short2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.short3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.short4)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.int1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.int2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.int3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.int4)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uint1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uint2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uint3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uint4)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.long1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.long2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.long3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.long4)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.float1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.float2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.float3)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.float4)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.double1)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.double2)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Byte[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.SByte[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.UInt16[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Int16[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.UInt32[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Int32[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.UInt64[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Int64[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Single[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,System.Double[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.dim3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.char1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.char2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.char3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.char4[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uchar1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uchar2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uchar3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uchar4[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.short1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.short2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.short3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.short4[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ushort1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ushort2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ushort3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ushort4[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.int1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.int2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.int3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.int4[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uint1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uint2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uint3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.uint4[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.long1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.long2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.long3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.long4[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ulong1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ulong2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ulong3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.ulong4[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.float1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.float2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.float3[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.float4[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.double1[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.double2[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.cuDoubleComplex[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.cuDoubleReal[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.cuFloatComplex[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetConstantVariable(System.String,ManagedCuda.VectorTypes.cuFloatReal[])">
            <summary>
            Set the constant variable <c>name</c> to value <c>value</c><para>The constant variable must be defined in the CUDA module.</para>
            </summary>
            <param name="name">constant variable name</param>
            <param name="value">value</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.Run(System.Object[])">
            <summary>
            Executes the kernel on the device
            </summary>
            <param name="parameters">Parameters as given by the kernel</param>
            <returns>Time of execution in milliseconds (using GPU counter)</returns>
        </member>
        <member name="M:ManagedCuda.CudaKernel.RunAsync(ManagedCuda.BasicTypes.CUstream,System.Object[])">
            <summary>
            Executes the kernel on the device asynchronously
            </summary>
            <param name="stream">Stream</param>
            <param name="parameters">Parameters as given by the kernel</param>
        </member>
        <member name="M:ManagedCuda.CudaKernel.SetSharedMemConfig(ManagedCuda.BasicTypes.CUsharedconfig)">
            <summary>
            Sets the shared memory configuration for a device function.<para/>
            On devices with configurable shared memory banks, this function will 
            force all subsequent launches of the specified device function to have
            the given shared memory bank size configuration. On any given launch of the
            function, the shared memory configuration of the device will be temporarily
            changed if needed to suit the function's preferred configuration. Changes in
            shared memory configuration between subsequent launches of functions, 
            may introduce a device side synchronization point.<para/>
            Any per-function setting of shared memory bank size set via
            <see cref="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetSharedMemConfig(ManagedCuda.BasicTypes.CUfunction,ManagedCuda.BasicTypes.CUsharedconfig)"/>  will override the context wide setting set with
            <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxSetSharedMemConfig(ManagedCuda.BasicTypes.CUsharedconfig)"/>.<para/>
            Changing the shared memory bank size will not increase shared memory usage
            or affect occupancy of kernels, but may have major effects on performance. 
            Larger bank sizes will allow for greater potential bandwidth to shared memory,
            but will change what kinds of accesses to shared memory will result in bank 
            conflicts.<para/>
            This function will do nothing on devices with fixed shared memory bank size.<para/>
            The supported bank configurations are<para/> 
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.DefaultBankSize"/>: set bank width to the default initial
              setting (currently, four bytes).
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.FourByteBankSize"/>: set shared memory bank width to
              be natively four bytes.
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.EightByteBankSize"/>: set shared memory bank width to
              be natively eight bytes.
            </summary>
            <param name="config">requested shared memory configuration</param>
        </member>
        <member name="P:ManagedCuda.CudaKernel.BlockDimensions">
            <summary>
            Get or set the thread block dimensions. Block dimenions must be set before the first kernel launch.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.GridDimensions">
            <summary>
            Get or set the thread grid dimensions. Grid dimenions must be set before the first kernel launch.
            z component is set to 1
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.DynamicSharedMemory">
            <summary>
            Dynamic shared memory size in Bytes. Must be set before the first kernel launch.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.CUFunction">
            <summary>
            CUFunction
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.CUModule">
            <summary>
            CUModule
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.KernelName">
            <summary>
            Kernel name as defined in the kernel source code.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.MaxThreadsPerBlock">
            <summary>
            <para>The number of threads beyond which a launch of the function would fail.</para>
            <para>This number depends on both the function and the device on which the
            function is currently loaded.</para>
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.SharedMemory">
            <summary>
            <para>The size in bytes of statically-allocated shared memory required by
            this function. </para><para>This does not include dynamically-allocated shared
            memory requested by the user at runtime.</para>
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.ConstMemory">
            <summary>
            <para>The size in bytes of statically-allocated shared memory required by
            this function. </para><para>This does not include dynamically-allocated shared
            memory requested by the user at runtime.</para>
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.LocalMemory">
            <summary>
            The size in bytes of thread local memory used by this function.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.Registers">
            <summary>
            The number of registers used by each thread of this function.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.PtxVersion">
            <summary>
            The PTX virtual architecture version for which the function was
            compiled. This value is the major PTX version * 10 + the minor PTX version, so a PTX version 1.3 function
            would return the value 13. Note that this may return the undefined value of 0 for cubins compiled prior to CUDA
            3.0.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaKernel.BinaryVersion">
            <summary>
            The binary version for which the function was compiled. This
            value is the major binary version * 10 + the minor binary version, so a binary version 1.3 function would return
            the value 13. Note that this will return a value of 10 for legacy cubins that do not have a properly-encoded binary
            architecture version.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaStream">
            <summary>
            Wrapps a CUstream handle.
            In case of a so called NULL stream, use the native CUstream struct instead. 
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStream.#ctor">
            <summary>
            Creates a new Stream using <see cref="F:ManagedCuda.BasicTypes.CUStreamFlags.None"/>
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStream.#ctor(ManagedCuda.BasicTypes.CUStreamFlags)">
            <summary>
            Creates a new Stream
            </summary>
            <param name="flags">Parameters for stream creation (must be <see cref="F:ManagedCuda.BasicTypes.CUStreamFlags.None"/>)</param>
        </member>
        <member name="M:ManagedCuda.CudaStream.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStream.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStream.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaStream.Synchronize">
            <summary>
            Waits until the device has completed all operations in the stream. If the context was created
            with the <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.BlockingSync"/> flag, the CPU thread will block until the stream is finished with all of its
            tasks.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStream.Query">
            <summary>
            Returns true if all operations in the stream have completed, or
            false if not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaStream.WaitEvent(ManagedCuda.BasicTypes.CUevent)">
            <summary>
            Make a compute stream wait on an event<para/>
            Makes all future work submitted to the Stream wait until <c>hEvent</c>
            reports completion before beginning execution. This synchronization
            will be performed efficiently on the device.
            <para/>
            The stream will wait only for the completion of the most recent
            host call to <see cref="M:ManagedCuda.CudaEvent.Record"/> on <c>hEvent</c>. Once this call has returned,
            any functions (including <see cref="M:ManagedCuda.CudaEvent.Record"/> and <see cref="M:ManagedCuda.CudaStream.Dispose"/> may be
            called on <c>hEvent</c> again, and the subsequent calls will not have any
            effect on this stream.
            <para/>
            If <c>hStream</c> is 0 (the NULL stream) any future work submitted in any stream
            will wait for <c>hEvent</c> to complete before beginning execution. This
            effectively creates a barrier for all future work submitted to the context.
            <para/>
            If <see cref="M:ManagedCuda.CudaEvent.Record"/> has not been called on <c>hEvent</c>, this call acts as if
            the record has already completed, and so is a functional no-op.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaStream.AddCallback(ManagedCuda.BasicTypes.CUstreamCallback,System.IntPtr,ManagedCuda.BasicTypes.CUStreamAddCallbackFlags)">
            <summary> 
            Adds a callback to be called on the host after all currently enqueued
            items in the stream have completed.  For each 
            cuStreamAddCallback call, the callback will be executed exactly once.
            The callback will block later work in the stream until it is finished.
            <para/>
            The callback may be passed <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/> or an error code.  In the event
            of a device error, all subsequently executed callbacks will receive an
            appropriate <see cref="T:ManagedCuda.BasicTypes.CUResult"/>.
            <para/>
            Callbacks must not make any CUDA API calls.  Attempting to use a CUDA API
            will result in <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotPermitted"/>.  Callbacks must not perform any
            synchronization that may depend on outstanding device work or other callbacks
            that are not mandated to run earlier.  Callbacks without a mandated order
            (in independent streams) execute in undefined order and may be serialized.
            <para/>
            This API requires compute capability 1.1 or greater.  See
            cuDeviceGetAttribute or ::cuDeviceGetProperties to query compute
            capability.  Attempting to use this API with earlier compute versions will
            return <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotSupported"/>.
            </summary>
            <param name="callback">The function to call once preceding stream operations are complete</param>
            <param name="userData">User specified data to be passed to the callback function. Use GCAlloc to pin a managed object</param>
            <param name="flags">Callback flags (must be CUStreamAddCallbackFlags.None)</param>
        </member>
        <member name="M:ManagedCuda.CudaStream.AddCallbackToNullStream(ManagedCuda.BasicTypes.CUstreamCallback,System.IntPtr,ManagedCuda.BasicTypes.CUStreamAddCallbackFlags)">
            <summary> 
            Here the Stream is the NULL stream<para/>
            Adds a callback to be called on the host after all currently enqueued
            items in the stream have completed.  For each 
            cuStreamAddCallback call, the callback will be executed exactly once.
            The callback will block later work in the stream until it is finished.
            <para/>
            The callback may be passed <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/> or an error code.  In the event
            of a device error, all subsequently executed callbacks will receive an
            appropriate <see cref="T:ManagedCuda.BasicTypes.CUResult"/>.
            <para/>
            Callbacks must not make any CUDA API calls.  Attempting to use a CUDA API
            will result in <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotPermitted"/>.  Callbacks must not perform any
            synchronization that may depend on outstanding device work or other callbacks
            that are not mandated to run earlier.  Callbacks without a mandated order
            (in independent streams) execute in undefined order and may be serialized.
            <para/>
            This API requires compute capability 1.1 or greater.  See
            cuDeviceGetAttribute or ::cuDeviceGetProperties to query compute
            capability.  Attempting to use this API with earlier compute versions will
            return <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotSupported"/>.
            </summary>
            <param name="callback">The function to call once preceding stream operations are complete</param>
            <param name="userData">User specified data to be passed to the callback function. Use GCAlloc to pin a managed object</param>
            <param name="flags">Callback flags (must be CUStreamAddCallbackFlags.None)</param>
        </member>
        <member name="P:ManagedCuda.CudaStream.Stream">
            <summary>
            returns the wrapped CUstream handle
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaTextureArray2D">
            <summary>
            CudaArrayTexture2D
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray2D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray2DNumChannels)">
            <summary>
            Creates a new 2D texture from array memory. Allocates a new 2D array.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="height">In elements</param>
            <param name="width">In elements</param>
            <param name="numChannels">1,2 or 4</param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray2D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray2DNumChannels)">
            <summary>
            Creates a new 2D texture from array memory. Allocates a new 2D array.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="height">In elements</param>
            <param name="width">In elements</param>
            <param name="numChannels">1,2 or 4</param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray2D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray2D)">
            <summary>
            Creates a new 2D texture from array memory
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray2D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray2D)">
            <summary>
            Creates a new 2D texture from array memory
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray2D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray2D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray2D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.TextureReference">
            <summary>
            TextureReference
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.AddressMode0">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.AddressMode1">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.Filtermode">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.ChannelSize">
            <summary>
            ChannelSize
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.TotalSizeInBytes">
            <summary>
            TotalSizeInBytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.NumChannels">
            <summary>
            NumChannels
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.CUFuntion">
            <summary>
            CUFuntion
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray2D.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaArray2DNumChannels">
            <summary>
            Number of channels in array
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaArray2DNumChannels.One">
            <summary>
            One channel, e.g. float1, int1, float, int
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaArray2DNumChannels.Two">
            <summary>
            Two channels, e.g. float2, int2
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaArray2DNumChannels.Four">
            <summary>
            Four channels, e.g. float4, int4
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaArray2D">
            <summary>
            A two dimansional CUDA array
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.#ctor(ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray2DNumChannels)">
            <summary>
            Creates a new CUDA array. 
            </summary>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="numChannels"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.#ctor(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Creates a new CUDA array from an existing CUarray. 
            The CUarray won't be destroyed when disposing.
            Array properties are obtained by cuArrayGetDescriptor
            </summary>
            <param name="cuArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.#ctor(ManagedCuda.BasicTypes.CUarray,System.Boolean)">
            <summary>
            Creates a new CUDA array from an existing CUarray. 
            Array properties are obtained by cuArrayGetDescriptor
            </summary>
            <param name="cuArray"></param>
            <param name="isOwner">The cuArray will be destroyed while disposing if the CudaArray is the owner</param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyData(ManagedCuda.BasicTypes.CUDAMemCpy2D)">
            <summary>
            A raw data copy method
            </summary>
            <param name="aCopyParameters">2D copy paramters</param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyDataUnaligned(ManagedCuda.BasicTypes.CUDAMemCpy2D)">
            <summary>
            A raw unaligned copy method
            </summary>
            <param name="aCopyParameters"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyFromHostToThis(System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from Host to this array
            </summary>
            <param name="aHostSrc">Source</param>
            <param name="aElementSizeInBytes"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyFromThisToHost(System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from this array to host
            </summary>
            <param name="aHostDest">IntPtr to destination in host memory</param>
            <param name="aElementSizeInBytes"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyFromHostToThis``1(``0[])">
            <summary>
            Copy from Host to this array
            </summary>
            <typeparam name="T">Host array base type</typeparam>
            <param name="aHostSrc">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyFromThisToHost``1(``0[])">
            <summary>
            Copy data from this array to host
            </summary>
            <typeparam name="T">Host array base type</typeparam>
            <param name="aHostDest">Destination</param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyFromDeviceToThis``1(ManagedCuda.CudaPitchedDeviceVariable{``0})">
            <summary>
            Copy from a pitched device variable to this array
            </summary>
            <typeparam name="T">device variable base type</typeparam>
            <param name="aDeviceVariable">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyFromThisToDevice``1(ManagedCuda.CudaPitchedDeviceVariable{``0})">
            <summary>
            Copy from this array to a pitched device variable
            </summary>
            <typeparam name="T">device variable base type</typeparam>
            <param name="aDeviceVariable">Destination</param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyFromArrayToThis(ManagedCuda.CudaArray2D)">
            <summary>
            Copy array to array
            </summary>
            <param name="aSourceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray2D.CopyFromThisToArray(ManagedCuda.CudaArray2D)">
            <summary>
            Copy array to array
            </summary>
            <param name="aDestArray"></param>
        </member>
        <member name="P:ManagedCuda.CudaArray2D.CUArray">
            <summary>
            Returns the wrapped CUarray
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray2D.ArrayDescriptor">
            <summary>
            Returns the wrapped CUDAArrayDescriptor
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray2D.Height">
            <summary>
            Returns the Height of the array
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray2D.Width">
            <summary>
            Returns the array width in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray2D.WidthInBytes">
            <summary>
            Returns the array width in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray2D.IsOwner">
            <summary>
            If the wrapper class instance is the owner of a CUDA handle, it will be destroyed while disposing.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaDeviceVariable`1">
            <summary>
            A variable located in CUDA device memory
            </summary>
            <typeparam name="T">variable base type</typeparam>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.#ctor(ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaDeviceVariable and allocates the memory on the device
            </summary>
            <param name="size">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.#ctor(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Creates a new CudaDeviceVariable from an existing CUdeviceptr. The allocated size is gethered via the CUDA API.
            devPtr won't be freed while disposing.
            </summary>
            <param name="devPtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.#ctor(ManagedCuda.BasicTypes.CUdeviceptr,System.Boolean)">
            <summary>
            Creates a new CudaDeviceVariable from an existing CUdeviceptr. The allocated size is gethered via the CUDA API.
            </summary>
            <param name="devPtr"></param>
            <param name="isOwner">The CUdeviceptr will be freed while disposing, if the CudaDeviceVariable is the owner</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.#ctor(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaDeviceVariable from an existing CUdeviceptr.
            devPtr won't be freed while disposing.
            </summary>
            <param name="devPtr"></param>
            <param name="size">Size in Bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.#ctor(ManagedCuda.BasicTypes.CUdeviceptr,System.Boolean,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaDeviceVariable from an existing CUdeviceptr.
            </summary>
            <param name="devPtr"></param>
            <param name="isOwner">The CUdeviceptr will be freed while disposing, if the CudaDeviceVariable is the owner</param>
            <param name="size">Size in Bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy data from device to device memory
            </summary>
            <param name="source">Source pointer to device memory</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to device memory
            </summary>
            <param name="source">Source pointer to device memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Copy data from device to device memory
            </summary>
            <param name="source">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to device memory
            </summary>
            <param name="source">Source</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0})">
            <summary>
            Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="widthInBytes">Width of 2D memory to copy in bytes</param>
            <param name="height">Height in elements</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(`0[])">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="source">Source pointer to host memory</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(`0[],ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="source">Source pointer to host memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(`0)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="source">Source pointer to host memory</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(`0,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="source">Source pointer to host memory</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="source">Source pointer to host memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="source">Source pointer to host memory</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToDevice(System.IntPtr)">
            <summary>
            Copy data from host to device memory
            </summary>
            <param name="source">Source pointer to host memory</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToHost(`0[])">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="dest">Destination pointer to host memory</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToHost(`0[],ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="dest">Destination pointer to host memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToHost(`0@)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="dest">Destination data in host memory</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToHost(`0@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="dest">Destination data in host memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToHost(System.IntPtr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="dest">Destination pointer to host memory</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToHost(System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="dest">Destination data in host memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.CopyToHost(System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="dest">Destination pointer to host memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source pointer to device memory</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaStream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source pointer to device memory</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.CudaStream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.CudaStream)">
            <summary>
            Async Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source pointer to device memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaStream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source pointer to device memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaStream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="sizeInBytes">Size to copy in bytes</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaStream)">
            <summary>
            Async Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="width">Width of 2D memory to copy in bytes</param>
            <param name="height">Height in elements</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="width">Width of 2D memory to copy in bytes</param>
            <param name="height">Height in elements</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.Memset(System.Byte)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.Memset(System.UInt16)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.Memset(System.UInt32)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.MemsetAsync(System.Byte,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.MemsetAsync(System.UInt16,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.MemsetAsync(System.UInt32,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.PeerCopyToDevice(ManagedCuda.CudaContext,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaContext)">
            <summary>
            Copies from device memory in one context to device memory in another context
            </summary>
            <param name="destCtx">Destination context</param>
            <param name="source">Source pointer to device memory</param>
            <param name="sourceCtx">Source context</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.PeerCopyToDevice(ManagedCuda.CudaContext,ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.CudaContext)">
            <summary>
            Copies from device memory in one context to device memory in another context
            </summary>
            <param name="destCtx">Destination context</param>
            <param name="source">Source pointer to device memory</param>
            <param name="sourceCtx">Source context</param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.PeerCopyToDevice(ManagedCuda.CudaContext,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaContext,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async-Copies from device memory in one context to device memory in another context
            </summary>
            <param name="destCtx">Destination context</param>
            <param name="source">Source pointer to device memory</param>
            <param name="sourceCtx">Source context</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.PeerCopyToDevice(ManagedCuda.CudaContext,ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.CudaContext,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async-Copies from device memory in one context to device memory in another context
            </summary>
            <param name="destCtx">Destination context</param>
            <param name="source">Source pointer to device memory</param>
            <param name="sourceCtx">Source context</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.op_Implicit(ManagedCuda.CudaDeviceVariable{`0})~`0[]">
            <summary>
            Converts a device variable to a host array
            </summary>
            <param name="d">device variable</param>
            <returns>newly allocated host array with values from device memory</returns>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.op_Implicit(ManagedCuda.CudaDeviceVariable{`0})~`0">
            <summary>
            Converts a device variable to a host value. In case of multiple device values, only the first value is copied.
            </summary>
            <param name="d">device variable</param>
            <returns>newly allocated host variable with value from device memory</returns>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.op_Implicit(`0[])~ManagedCuda.CudaDeviceVariable{`0}">
            <summary>
            Converts a host array to a newly allocated device variable.
            </summary>
            <param name="d">host array</param>
            <returns>newly allocated device variable with values from host memory</returns>
        </member>
        <member name="M:ManagedCuda.CudaDeviceVariable`1.op_Implicit(`0)~ManagedCuda.CudaDeviceVariable{`0}">
            <summary>
            Converts a host array to a newly allocated device variable.
            </summary>
            <param name="d">host array</param>
            <returns>newly allocated device variable with values from host memory</returns>
        </member>
        <member name="P:ManagedCuda.CudaDeviceVariable`1.Item(ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Access array elements directly from host.<para/>
            Each single access invokes a device to host or host to device copy. Access is therefor rather slow.
            </summary>
            <param name="index">index in elements</param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaDeviceVariable`1.DevicePointer">
            <summary>
            Device pointer
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceVariable`1.SizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceVariable`1.TypeSize">
            <summary>
            Type size in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceVariable`1.Size">
            <summary>
            Size in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceVariable`1.IsOwner">
            <summary>
            If the wrapper class instance is the owner of a CUDA handle, it will be destroyed while disposing.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaTextureArray3D">
            <summary>
            CudaArrayTexture3D
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray3D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray3DNumChannels)">
            <summary>
            Creates a new 3D texture from array memory. Allocates a new 3D array.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressModeForAllDimensions"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
            <param name="numChannels">1,2 or 4</param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray3D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray3DNumChannels)">
            <summary>
            Creates a new 3D texture from array memory. Allocates a new 3D array.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="addressMode2"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
            <param name="numChannels">1,2 or 4</param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray3D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray3D)">
            <summary>
            Creates a new 3D texture from array memory
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressModeForAllDimensions"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray3D.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray3D)">
            <summary>
            Creates a new 3D texture from array memory
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="addressMode2"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray3D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray3D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureArray3D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.TextureReference">
            <summary>
            TextureReference
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.AddressMode0">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.AddressMode1">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.AddressMode2">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.Filtermode">
            <summary>
            Filtermode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.Depth">
            <summary>
            Depth
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.ChannelSize">
            <summary>
            ChannelSize
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.TotalSizeInBytes">
            <summary>
            TotalSizeInBytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.NumChannels">
            <summary>
            NumChannels
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.CUFuntion">
            <summary>
            CUFuntion
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureArray3D.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture``1(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Create a new CudaDeviceVariable and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="size">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture``1(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaDeviceVariable{``0})">
            <summary>
            Bind a CudaDeviceVariable to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="deviceVar"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture``1(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Create a new CudaPitchedDeviceVariable and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture``1(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Create a new CudaPitchedDeviceVariable and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture``1(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaPitchedDeviceVariable{``0})">
            <summary>
            Bind a CudaPitchedDeviceVariable to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="deviceVar"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture``1(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaPitchedDeviceVariable{``0})">
            <summary>
            Bind a CudaPitchedDeviceVariable to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="deviceVar"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray1DNumChannels)">
            <summary>
            Create a new CudaArray1D and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="size">In elements</param>
            <param name="numChannels"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray1D)">
            <summary>
            Bind a CudaArray1D to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray2DNumChannels)">
            <summary>
            Create a new CudaArray2D and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="height">In elements</param>
            <param name="width">In elements</param>
            <param name="numChannels">1,2 or 4</param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray2DNumChannels)">
            <summary>
            Create a new CudaArray2D and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="height">In elements</param>
            <param name="width">In elements</param>
            <param name="numChannels">1,2 or 4</param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray2D)">
            <summary>
            Bind a CudaArray2D to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray2D)">
            <summary>
            Bind a CudaArray2D to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray3DNumChannels)">
            <summary>
            Create a new CudaArray3D and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressModeForAllDimensions"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
            <param name="numChannels">1,2 or 4</param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray3DNumChannels)">
            <summary>
            Create a new CudaArray3D and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="addressMode2"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
            <param name="numChannels">1,2 or 4</param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray3D)">
            <summary>
            Bind a CudaArray3D to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressModeForAllDimensions"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaArray3D)">
            <summary>
            Bind a CudaArray3D to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="addressMode2"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUDAArray3DDescriptor,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Create a new CudaMipmappedArray and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressModeForAllDimensions"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="descriptor"></param>
            <param name="numMipmapLevels"></param>
            <param name="maxAniso"></param>
            <param name="mipmapFilterMode"></param>
            <param name="mipmapLevelBias"></param>
            <param name="minMipmapLevelClamp"></param>
            <param name="maxMipmapLevelClamp"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUDAArray3DDescriptor,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Create a new CudaMipmappedArray and bind it to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="addressMode2"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="descriptor"></param>
            <param name="numMipmapLevels"></param>
            <param name="maxAniso"></param>
            <param name="mipmapFilterMode"></param>
            <param name="mipmapLevelBias"></param>
            <param name="minMipmapLevelClamp"></param>
            <param name="maxMipmapLevelClamp"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaMipmappedArray,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Bind a CudaMipmappedArray to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressModeForAllDimensions"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
            <param name="maxAniso"></param>
            <param name="mipmapFilterMode"></param>
            <param name="mipmapLevelBias"></param>
            <param name="minMipmapLevelClamp"></param>
            <param name="maxMipmapLevelClamp"></param>
        </member>
        <member name="M:ManagedCuda.CudaTexture.BindTexture(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaMipmappedArray,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Bind a CudaMipmappedArray to a texture reference.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="addressMode2"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
            <param name="maxAniso"></param>
            <param name="mipmapFilterMode"></param>
            <param name="mipmapLevelBias"></param>
            <param name="minMipmapLevelClamp"></param>
            <param name="maxMipmapLevelClamp"></param>
        </member>
        <member name="T:ManagedCuda.CudaArray3DNumChannels">
            <summary>
            Number of channels in array
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaArray3DNumChannels.One">
            <summary>
            One channel, e.g. float1, int1, float, int
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaArray3DNumChannels.Two">
            <summary>
            Two channels, e.g. float2, int2
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaArray3DNumChannels.Four">
            <summary>
            Four channels, e.g. float4, int4
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaArray3D">
            <summary>
            A three dimansional CUDA array
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.#ctor(ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray3DNumChannels,ManagedCuda.BasicTypes.CUDAArray3DFlags)">
            <summary>
            Creates a new CUDA array. 
            </summary>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
            <param name="numChannels"></param>
            <param name="flags"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.#ctor(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Creates a new CUDA array from an existing CUarray. 
            The CUarray won't be destroyed when disposing.
            Array properties are obtained by cuArrayGetDescriptor
            </summary>
            <param name="cuArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.#ctor(ManagedCuda.BasicTypes.CUarray,System.Boolean)">
            <summary>
            Creates a new CUDA array from an existing CUarray. 
            Array properties are obtained by cuArrayGetDescriptor
            </summary>
            <param name="cuArray"></param>
            <param name="isOwner">The cuArray will be destroyed while disposing, if the CudaArray is the owner</param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyData(ManagedCuda.BasicTypes.CUDAMemCpy3D)">
            <summary>
            A raw data copy method
            </summary>
            <param name="aCopyParameters">3D copy paramters</param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromHostToThis(System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from Host to this array
            </summary>
            <param name="aHostSrc">Source</param>
            <param name="aElementSizeInBytes"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromThisToHost(System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from this array to host
            </summary>
            <param name="aHostDest">IntPtr to destination in host memory</param>
            <param name="aElementSizeInBytes"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromHostToThis``1(``0[])">
            <summary>
            Copy from Host to this array
            </summary>
            <typeparam name="T">Host array base type</typeparam>
            <param name="aHostSrc">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromThisToHost``1(``0[])">
            <summary>
            Copy data from this array to host
            </summary>
            <typeparam name="T">Host array base type</typeparam>
            <param name="aHostDest">Destination</param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromDeviceToThis(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from a pitched device variable to this array
            </summary>
            <param name="aDeviceVariable">Source</param>
            <param name="aElementSizeInBytes"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromDeviceToThis(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from a pitched device variable to this array
            </summary>
            <param name="aDeviceVariable">Source</param>
            <param name="aElementSizeInBytes"></param>
            <param name="pitch">Pitch in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromThisToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from this array to a pitched device variable
            </summary>
            <param name="aDeviceVariable">Destination</param>
            <param name="aElementSizeInBytes"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromThisToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from this array to a pitched device variable
            </summary>
            <param name="aDeviceVariable">Destination</param>
            <param name="aElementSizeInBytes"></param>
            <param name="pitch">Pitch in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromArrayToThis(ManagedCuda.CudaArray3D)">
            <summary>
            Copy array to array
            </summary>
            <param name="aSourceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaArray3D.CopyFromThisToArray(ManagedCuda.CudaArray3D)">
            <summary>
            Copy array to array
            </summary>
            <param name="aDestArray"></param>
        </member>
        <member name="P:ManagedCuda.CudaArray3D.CUArray">
            <summary>
            Returns the wrapped CUarray
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray3D.Array3DDescriptor">
            <summary>
            Returns the wrapped CUDAArray3DDescriptor
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray3D.Depth">
            <summary>
            Returns the Depth of the array
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray3D.Height">
            <summary>
            Returns the Height of the array
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray3D.Width">
            <summary>
            Returns the array width in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray3D.WidthInBytes">
            <summary>
            Returns the array width in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaArray3D.IsOwner">
            <summary>
            If the wrapper class instance is the owner of a CUDA handle, it will be destroyed while disposing.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaSurface">
            <summary>
            CudaSurface3D
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaSurface.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUSurfRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray3DNumChannels,ManagedCuda.BasicTypes.CUDAArray3DFlags)">
            <summary>
            Creates a new surface from array memory. Allocates new array.
            </summary>
            <param name="kernel"></param>
            <param name="surfName"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
            <param name="numChannels"></param>
            <param name="arrayFlags"></param>
        </member>
        <member name="M:ManagedCuda.CudaSurface.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUSurfRefSetFlags,ManagedCuda.CudaArray3D)">
            <summary>
            Creates a new surface from array memory.
            </summary>
            <param name="kernel"></param>
            <param name="surfName"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaSurface.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaSurface.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaSurface.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaSurface.BindArray(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUSurfRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaArray3DNumChannels,ManagedCuda.BasicTypes.CUDAArray3DFlags)">
            <summary>
            Create a new CudaArray3D and bind it to a surface reference.
            </summary>
            <param name="kernel"></param>
            <param name="surfName"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
            <param name="numChannels"></param>
            <param name="arrayFlags"></param>
        </member>
        <member name="M:ManagedCuda.CudaSurface.BindArray(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUSurfRefSetFlags,ManagedCuda.CudaArray3D)">
            <summary>
            Bind a CudaArray3D to a surface reference.
            </summary>
            <param name="kernel"></param>
            <param name="surfName"></param>
            <param name="flags"></param>
            <param name="array"></param>
        </member>
        <member name="P:ManagedCuda.CudaSurface.SurfaceReference">
            <summary>
            SurfaceReference
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.ChannelSize">
            <summary>
            ChannelSize
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.TotalSizeInBytes">
            <summary>
            TotalSizeInBytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.NumChannels">
            <summary>
            NumChannels
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.CUFuntion">
            <summary>
            CUFuntion
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaSurface.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaException">
            <summary>
            A CUDA exception is thrown if a CUDA Driver API method call does not return <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="serInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="M:ManagedCuda.CudaException.#ctor(ManagedCuda.BasicTypes.CUResult)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:ManagedCuda.CudaException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ManagedCuda.CudaException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ManagedCuda.CudaException.#ctor(ManagedCuda.BasicTypes.CUResult,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="error"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ManagedCuda.CudaException.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:ManagedCuda.CudaException.CudaError">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaEvent">
            <summary>
            Wrapps a CUevent handle.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaEvent.#ctor">
            <summary>
            Creates a new Event using <see cref="F:ManagedCuda.BasicTypes.CUEventFlags.Default"/> 
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaEvent.#ctor(ManagedCuda.BasicTypes.CUEventFlags)">
            <summary>
            Creates a new Event
            </summary>
            <param name="flags">Parameters for event creation</param>
        </member>
        <member name="M:ManagedCuda.CudaEvent.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaEvent.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaEvent.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaEvent.Record">
            <summary>
            Records an event. If <c>stream</c> is non-zero, the event is recorded after all preceding operations in the stream have been
            completed; otherwise, it is recorded after all preceding operations in the CUDA context have been completed. Since
            operation is asynchronous, <see cref="M:ManagedCuda.CudaEvent.Query"/> and/or <see cref="M:ManagedCuda.CudaEvent.Synchronize"/> must be used to determine when the event
            has actually been recorded. <para/>
            If <see cref="M:ManagedCuda.CudaEvent.Record"/> has previously been called and the event has not been recorded yet, this function throws
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaEvent.Record(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Records an event. If <c>stream</c> is non-zero, the event is recorded after all preceding operations in the stream have been
            completed; otherwise, it is recorded after all preceding operations in the CUDA context have been completed. Since
            operation is asynchronous, <see cref="M:ManagedCuda.CudaEvent.Query"/> and/or <see cref="M:ManagedCuda.CudaEvent.Synchronize"/> must be used to determine when the event
            has actually been recorded. <para/>
            If <see cref="M:ManagedCuda.CudaEvent.Record"/> has previously been called and the event has not been recorded yet, this function throws
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <param name="stream"></param>
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaEvent.Synchronize">
            <summary>
            Waits until the event has actually been recorded. If <see cref="M:ManagedCuda.CudaEvent.Record"/> has been called on this event, the function returns
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>. Waiting for an event that was created with the <see cref="F:ManagedCuda.BasicTypes.CUEventFlags.BlockingSync"/>
            flag will cause the calling CPU thread to block until the event has actually been recorded. <para/>
            If <see cref="M:ManagedCuda.CudaEvent.Record"/> has previously been called and the event has not been recorded yet, this function throws <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaEvent.Query">
            <summary>
            Returns true if the event has actually been recorded, or false if not. If
            <see cref="M:ManagedCuda.CudaEvent.Record"/> has not been called on this event, the function throws <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaEvent.ElapsedTime(ManagedCuda.CudaEvent,ManagedCuda.CudaEvent)">
            <summary>
            Computes the elapsed time between two events (in milliseconds with a resolution of around 0.5 microseconds). If
            either event has not been recorded yet, this function throws <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotReady"/>. If either event has been
            recorded with a non-zero stream, the result is undefined.
            </summary>
            <param name="eventStart"></param>
            <param name="eventEnd"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaEvent.Event">
            <summary>
            returns the wrapped CUevent handle
            </summary>
        </member>
        <member name="T:ManagedCuda.DirectX9NativeMethods">
            <summary>
            Direct3D 9 Interoperability
            </summary>
        </member>
        <member name="T:ManagedCuda.DirectX9NativeMethods.CUDA3">
            <summary>
            Direct3D9 Interoperability for CUDA 3.x
            </summary>
        </member>
        <member name="M:ManagedCuda.DirectX9NativeMethods.CUDA3.cuD3D9GetDevice(ManagedCuda.BasicTypes.CUdevice@,System.String)">
            <summary>
            Returns in <c>pCudaDevice</c> the CUDA-compatible device corresponding to the adapter name <c>pszAdapterName</c>
            obtained from <c>EnumDisplayDevices()</c> or <c>IDirect3D9::GetAdapterIdentifier()</c>.
            If no device on the adapter with name <c>pszAdapterName</c> is CUDA-compatible, then the call will fail.
            </summary>
            <param name="pCudaDevice">Returned CUDA device corresponding to pszAdapterName</param>
            <param name="pszAdapterName">Adapter name to query for device</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX9NativeMethods.CUDA3.cuD3D9GetDevices(System.Int32@,ManagedCuda.BasicTypes.CUdevice[],System.UInt32,System.IntPtr,ManagedCuda.BasicTypes.CUd3dXDeviceList)">
            <summary>
            Gets the CUDA devices corresponding to a Direct3D 9 device<para/>
            Returns in <c>pCudaDeviceCount</c> the number of CUDA-compatible device corresponding
            to the Direct3D 9 device <c>pD3D9Device</c>.
            Also returns in <c>pCudaDevices</c> at most <c>cudaDeviceCount</c> of the the CUDA-compatible devices
            corresponding to the Direct3D 9 device <c>pD3D9Device</c>.
            <para/>
            If any of the GPUs being used to render <c>pDevice</c> are not CUDA capable then the
            call will return <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNoDevice"/>.
            </summary>
            <param name="pCudaDeviceCount">Returned number of CUDA devices corresponding to <c>pD3D9Device</c></param>
            <param name="pCudaDevices">Returned CUDA devices corresponding to <c>pD3D9Device</c></param>
            <param name="cudaDeviceCount">The size of the output device array <c>pCudaDevices</c></param>
            <param name="pD3D9Device">Direct3D 9 device to query for CUDA devices</param>
            <param name="deviceList">The set of devices to return.</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNoDevice"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX9NativeMethods.CUDA3.cuD3D9CtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUdevice@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr)">
            <summary>
            Creates a new CUDA context, enables interoperability for that context with the Direct3D device <c>pD3DDevice</c>, and
            associates the created CUDA context with the calling thread. The created <see cref="T:ManagedCuda.BasicTypes.CUcontext"/> will be returned in <c>pCtx</c>.
            Direct3D resources from this device may be registered and mapped through the lifetime of this CUDA context.
            If <c>pCudaDevice</c> is non-NULL then the <see cref="T:ManagedCuda.BasicTypes.CUdevice"/> on which this CUDA context was created will be returned in
            <c>pCudaDevice</c>.
            On success, this call will increase the internal reference count on <c>pD3DDevice</c>. This reference count will be decremented
            upon destruction of this context through <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/>. This context will cease to function if <c>pD3DDevice</c>
            is destroyed or encounters an error.
            </summary>
            <param name="pCtx">Returned newly created CUDA context</param>
            <param name="pCudaDevice">Returned pointer to the device on which the context was created</param>
            <param name="Flags">Context creation flags (see <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> for details)</param>
            <param name="pD3DDevice">Direct3D device to create interoperability context with</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX9NativeMethods.CUDA3.cuD3D9CtxCreateOnDevice(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Creates a new CUDA context, enables interoperability for that context with the Direct3D device <c>pD3DDevice</c>, and
            associates the created CUDA context with the calling thread. The created <see cref="T:ManagedCuda.BasicTypes.CUcontext"/> will be returned in <c>pCtx</c>.
            Direct3D resources from this device may be registered and mapped through the lifetime of this CUDA context.
            On success, this call will increase the internal reference count on <c>pD3DDevice</c>. This reference count will be decremented
            upon destruction of this context through <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/>. This context will cease to function if <c>pD3DDevice</c>
            is destroyed or encounters an error.
            </summary>
            <param name="pCtx">Returned newly created CUDA context</param>
            <param name="flags">Context creation flags (see <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> for details)</param>
            <param name="pD3DDevice">Direct3D device to create interoperability context with</param>
            <param name="cudaDevice">Returned pointer to the device on which the context was created</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX9NativeMethods.CUDA3.cuGraphicsD3D9RegisterResource(ManagedCuda.BasicTypes.CUgraphicsResource@,System.IntPtr,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags)">
            <summary>
            Registers the Direct3D 9 resource <c>pD3DResource</c> for access by CUDA and returns a CUDA handle to
            <c>pD3Dresource</c> in <c>pCudaResource</c>. The handle returned in <c>pCudaResource</c> may be used to map and
            unmap this resource until it is unregistered. On success this call will increase the internal reference count on
            <c>pD3DResource</c>. This reference count will be decremented when this resource is unregistered through <see cref="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsUnregisterResource(ManagedCuda.BasicTypes.CUgraphicsResource)"/>.<para/>
            This call is potentially high-overhead and should not be called every frame in interactive applications.<para/>
            The type of pD3DResource must be one of the following:
            <list type="table">  
            <listheader><term>Type of <c>pD3DResource</c></term><description>Restriction</description></listheader>  
            <item><term>IDirect3DVertexBuffer9</term><description>
            May be accessed through a device pointer.
            </description></item>  
            <item><term>IDirect3DIndexBuffer9</term><description>
            May be accessed through a device pointer.
            </description></item>  
            <item><term>IDirect3DSurface9</term><description>
            May be accessed through an array. Only stand-alone objects of type <c>IDirect3DSurface9</c>
            may be explicitly shared. In particular, individual mipmap levels and faces of cube maps may not be registered
            directly. To access individual surfaces associated with a texture, one must register the base texture object.
            </description></item>  
            <item><term>IDirect3DBaseTexture9</term><description>
            Individual surfaces on this texture may be accessed through an array.
            </description></item> 
            </list> 
            The Flags argument may be used to specify additional parameters at register time. The only valid value for this
            parameter is <see cref="F:ManagedCuda.BasicTypes.CUGraphicsRegisterFlags.None"/>. <para/>
            Not all Direct3D resources of the above types may be used for interoperability with CUDA. The following are some
            limitations.<param/>
            • The primary rendertarget may not be registered with CUDA.<param/>
            • Resources allocated as shared may not be registered with CUDA.<param/>
            • Textures which are not of a format which is 1, 2, or 4 channels of 8, 16, or 32-bit integer or floating-point data
            cannot be shared.<param/>
            • Surfaces of depth or stencil formats cannot be shared.<param/>
            If Direct3D interoperability is not initialized for this context using <see cref="M:ManagedCuda.DirectX9NativeMethods.CUDA3.cuD3D9CtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUdevice@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr)"/> then
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/> is returned. If <c>pD3DResource</c> is of incorrect type or is already registered then
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/> is returned. If <c>pD3DResource</c> cannot be registered then 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/> is returned. If <c>Flags</c> is not one of the above specified value then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            is returned.
            </summary>
            <param name="pCudaResource">Returned graphics resource handle</param>
            <param name="pD3DResource">Direct3D resource to register</param>
            <param name="Flags">Parameters for resource registration</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX9NativeMethods.CUDA3.cuD3D9GetDirect3DDevice(System.IntPtr@)">
            <summary>
            Returns in <c>ppD3DDevice</c> the Direct3D device against which this CUDA context
            was created in <see cref="M:ManagedCuda.DirectX9NativeMethods.CUDA3.cuD3D9CtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUdevice@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr)"/>.
            </summary>
            <param name="ppD3DDevice">Returned Direct3D device corresponding to CUDA context</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DirectX10NativeMethods">
            <summary>
            Direct3D 10 Interoperability
            </summary>
        </member>
        <member name="T:ManagedCuda.DirectX10NativeMethods.CUDA3">
            <summary>
            Direct3D10 Interoperability for CUDA 3.x
            </summary>
        </member>
        <member name="M:ManagedCuda.DirectX10NativeMethods.CUDA3.cuD3D10GetDevice(ManagedCuda.BasicTypes.CUdevice@,System.IntPtr)">
            <summary>
            Returns in <c>device</c> the CUDA-compatible device corresponding to the adapter <c>pAdapter</c> obtained from 
            <c>IDXGIFactory::EnumAdapters</c>. This call will succeed only if a device on adapter <c>pAdapter</c> is Cuda-compatible.
            </summary>
            <param name="device">Returned CUDA device corresponding to pszAdapterName</param>
            <param name="pAdapter">Adapter (type: IDXGIAdapter)</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX10NativeMethods.CUDA3.cuD3D10GetDevices(System.Int32@,ManagedCuda.BasicTypes.CUdevice[],System.UInt32,System.IntPtr,ManagedCuda.BasicTypes.CUd3dXDeviceList)">
            <summary>
            Gets the CUDA devices corresponding to a Direct3D 10 device<para/>
            Returns in <c>pCudaDeviceCount</c> the number of CUDA-compatible device corresponding
            to the Direct3D 10 device <c>pD3D10Device</c>.
            Also returns in <c>pCudaDevices</c> at most <c>cudaDeviceCount</c> of the the CUDA-compatible devices
            corresponding to the Direct3D 10 device <c>pD3D10Device</c>.
            <para/>
            If any of the GPUs being used to render <c>pDevice</c> are not CUDA capable then the
            call will return <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNoDevice"/>.
            </summary>
            <param name="pCudaDeviceCount">Returned number of CUDA devices corresponding to <c>pD3D9Device</c></param>
            <param name="pCudaDevices">Returned CUDA devices corresponding to <c>pD3D9Device</c></param>
            <param name="cudaDeviceCount">The size of the output device array <c>pCudaDevices</c></param>
            <param name="pD3D10Device">Direct3D 10 device to query for CUDA devices</param>
            <param name="deviceList">The set of devices to return.</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNoDevice"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX10NativeMethods.CUDA3.cuD3D10CtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUdevice@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr)">
            <summary>
            Creates a new CUDA context, enables interoperability for that context with the Direct3D device <c>pD3DDevice</c>, and
            associates the created CUDA context with the calling thread. The created <see cref="T:ManagedCuda.BasicTypes.CUcontext"/> will be returned in <c>pCtx</c>.
            Direct3D resources from this device may be registered and mapped through the lifetime of this CUDA context.
            If <c>pCudaDevice</c> is non-NULL then the <see cref="T:ManagedCuda.BasicTypes.CUdevice"/> on which this CUDA context was created will be returned in
            <c>pCudaDevice</c>.
            On success, this call will increase the internal reference count on <c>pD3DDevice</c>. This reference count will be decremented
            upon destruction of this context through <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/>. This context will cease to function if <c>pD3DDevice</c>
            is destroyed or encounters an error.
            </summary>
            <param name="pCtx">Returned newly created CUDA context</param>
            <param name="pCudaDevice">Returned pointer to the device on which the context was created</param>
            <param name="Flags">Context creation flags (see <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> for details)</param>
            <param name="pD3DDevice">Direct3D device to create interoperability context with</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX10NativeMethods.CUDA3.cuD3D10CtxCreateOnDevice(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Creates a new CUDA context, enables interoperability for that context with the Direct3D device <c>pD3DDevice</c>, and
            associates the created CUDA context with the calling thread. The created <see cref="T:ManagedCuda.BasicTypes.CUcontext"/> will be returned in <c>pCtx</c>.
            Direct3D resources from this device may be registered and mapped through the lifetime of this CUDA context.
            On success, this call will increase the internal reference count on <c>pD3DDevice</c>. This reference count will be decremented
            upon destruction of this context through <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/>. This context will cease to function if <c>pD3DDevice</c>
            is destroyed or encounters an error.
            </summary>
            <param name="pCtx">Returned newly created CUDA context</param>
            <param name="flags">Context creation flags (see <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> for details)</param>
            <param name="pD3DDevice">Direct3D device to create interoperability context with</param>
            <param name="cudaDevice">Returned pointer to the device on which the context was created</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX10NativeMethods.CUDA3.cuGraphicsD3D10RegisterResource(ManagedCuda.BasicTypes.CUgraphicsResource@,System.IntPtr,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags)">
            <summary>
            Registers the Direct3D 10 resource <c>pD3DResource</c> for access by CUDA and returns a CUDA handle to
            <c>pD3Dresource</c> in <c>pCudaResource</c>. The handle returned in <c>pCudaResource</c> may be used to map and
            unmap this resource until it is unregistered. On success this call will increase the internal reference count on
            <c>pD3DResource</c>. This reference count will be decremented when this resource is unregistered through <see cref="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsUnregisterResource(ManagedCuda.BasicTypes.CUgraphicsResource)"/>.<para/>
            This call is potentially high-overhead and should not be called every frame in interactive applications.<para/>
            The type of pD3DResource must be one of the following:
            <list type="table">  
            <listheader><term>Type of <c>pD3DResource</c></term><description>Restriction</description></listheader>  
            <item><term>ID3D10Buffer</term><description>
            May be accessed through a device pointer.
            </description></item>  
            <item><term>ID3D10Texture1D</term><description>
            Individual subresources of the texture may be accessed via arrays.
            </description></item>  
            <item><term>ID3D10Texture2D</term><description>
            Individual subresources of the texture may be accessed via arrays.
            </description></item> 
            <item><term>ID3D10Texture3D</term><description>
            Individual subresources of the texture may be accessed via arrays.
            </description></item>  
            </list> 
            The Flags argument may be used to specify additional parameters at register time. The only valid value for this
            parameter is <see cref="F:ManagedCuda.BasicTypes.CUGraphicsRegisterFlags.None"/>. <para/>
            Not all Direct3D resources of the above types may be used for interoperability with CUDA. The following are some
            limitations.<param/>
            • The primary rendertarget may not be registered with CUDA.<param/>
            • Resources allocated as shared may not be registered with CUDA.<param/>
            • Textures which are not of a format which is 1, 2, or 4 channels of 8, 16, or 32-bit integer or floating-point data
            cannot be shared.<param/>
            • Surfaces of depth or stencil formats cannot be shared.<param/>
            If Direct3D interoperability is not initialized for this context using <see cref="M:ManagedCuda.DirectX10NativeMethods.CUDA3.cuD3D10CtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUdevice@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr)"/> then
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/> is returned. If <c>pD3DResource</c> is of incorrect type or is already registered then
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/> is returned. If <c>pD3DResource</c> cannot be registered then 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/> is returned. If <c>Flags</c> is not one of the above specified value then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            is returned.
            </summary>
            <param name="pCudaResource">Returned graphics resource handle</param>
            <param name="pD3DResource">Direct3D resource to register</param>
            <param name="Flags">Parameters for resource registration</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX10NativeMethods.CUDA3.cuD3D10GetDirect3DDevice(System.IntPtr@)">
            <summary>
            Returns in <c>ppD3DDevice</c> the Direct3D device against which this CUDA context
            was created in <see cref="M:ManagedCuda.DirectX10NativeMethods.CUDA3.cuD3D10CtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUdevice@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr)"/>.
            </summary>
            <param name="ppD3DDevice">Returned Direct3D device corresponding to CUDA context</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DirectX11NativeMethods">
            <summary>
            Direct3D 11 Interoperability for CUDA 3.x
            </summary>
        </member>
        <member name="M:ManagedCuda.DirectX11NativeMethods.cuD3D11GetDevice(ManagedCuda.BasicTypes.CUdevice@,System.IntPtr)">
            <summary>
            Returns in <c>device</c> the CUDA-compatible device corresponding to the adapter <c>pAdapter</c> obtained from 
            <c>IDXGIFactory::EnumAdapters</c>. This call will succeed only if a device on adapter <c>pAdapter</c> is Cuda-compatible.
            </summary>
            <param name="device">Returned CUDA device corresponding to pszAdapterName</param>
            <param name="pAdapter">Adapter (type: IDXGIAdapter)</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX11NativeMethods.cuD3D11GetDevices(System.Int32@,ManagedCuda.BasicTypes.CUdevice[],System.UInt32,System.IntPtr,ManagedCuda.BasicTypes.CUd3dXDeviceList)">
            <summary>
            Gets the CUDA devices corresponding to a Direct3D 11 device<para/>
            Returns in <c>pCudaDeviceCount</c> the number of CUDA-compatible device corresponding
            to the Direct3D 11 device <c>pD3D11Device</c>.
            Also returns in <c>pCudaDevices</c> at most <c>cudaDeviceCount</c> of the the CUDA-compatible devices
            corresponding to the Direct3D 11 device <c>pD3D11Device</c>.
            <para/>
            If any of the GPUs being used to render <c>pDevice</c> are not CUDA capable then the
            call will return <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNoDevice"/>.
            </summary>
            <param name="pCudaDeviceCount">Returned number of CUDA devices corresponding to <c>pD3D9Device</c></param>
            <param name="pCudaDevices">Returned CUDA devices corresponding to <c>pD3D11Device</c></param>
            <param name="cudaDeviceCount">The size of the output device array <c>pCudaDevices</c></param>
            <param name="pD3D11Device">Direct3D 11 device to query for CUDA devices</param>
            <param name="deviceList">The set of devices to return.</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNoDevice"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX11NativeMethods.cuD3D11CtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUdevice@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr)">
            <summary>
            Creates a new CUDA context, enables interoperability for that context with the Direct3D device <c>pD3DDevice</c>, and
            associates the created CUDA context with the calling thread. The created <see cref="T:ManagedCuda.BasicTypes.CUcontext"/> will be returned in <c>pCtx</c>.
            Direct3D resources from this device may be registered and mapped through the lifetime of this CUDA context.
            If <c>pCudaDevice</c> is non-NULL then the <see cref="T:ManagedCuda.BasicTypes.CUdevice"/> on which this CUDA context was created will be returned in
            <c>pCudaDevice</c>.
            On success, this call will increase the internal reference count on <c>pD3DDevice</c>. This reference count will be decremented
            upon destruction of this context through <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/>. This context will cease to function if <c>pD3DDevice</c>
            is destroyed or encounters an error.
            </summary>
            <param name="pCtx">Returned newly created CUDA context</param>
            <param name="pCudaDevice">Returned pointer to the device on which the context was created</param>
            <param name="Flags">Context creation flags (see <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> for details)</param>
            <param name="pD3DDevice">Direct3D device to create interoperability context with</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX11NativeMethods.cuD3D11CtxCreateOnDevice(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Creates a new CUDA context, enables interoperability for that context with the Direct3D device <c>pD3DDevice</c>, and
            associates the created CUDA context with the calling thread. The created <see cref="T:ManagedCuda.BasicTypes.CUcontext"/> will be returned in <c>pCtx</c>.
            Direct3D resources from this device may be registered and mapped through the lifetime of this CUDA context.
            On success, this call will increase the internal reference count on <c>pD3DDevice</c>. This reference count will be decremented
            upon destruction of this context through <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/>. This context will cease to function if <c>pD3DDevice</c>
            is destroyed or encounters an error.
            </summary>
            <param name="pCtx">Returned newly created CUDA context</param>
            <param name="flags">Context creation flags (see <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> for details)</param>
            <param name="pD3DDevice">Direct3D device to create interoperability context with</param>
            <param name="cudaDevice">Returned pointer to the device on which the context was created</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX11NativeMethods.cuGraphicsD3D11RegisterResource(ManagedCuda.BasicTypes.CUgraphicsResource@,System.IntPtr,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags)">
            <summary>
            Registers the Direct3D 11 resource <c>pD3DResource</c> for access by CUDA and returns a CUDA handle to
            <c>pD3Dresource</c> in <c>pCudaResource</c>. The handle returned in <c>pCudaResource</c> may be used to map and
            unmap this resource until it is unregistered. On success this call will increase the internal reference count on
            <c>pD3DResource</c>. This reference count will be decremented when this resource is unregistered through <see cref="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsUnregisterResource(ManagedCuda.BasicTypes.CUgraphicsResource)"/>.<para/>
            This call is potentially high-overhead and should not be called every frame in interactive applications.<para/>
            The type of pD3DResource must be one of the following:
            <list type="table">  
            <listheader><term>Type of <c>pD3DResource</c></term><description>Restriction</description></listheader>  
            <item><term>ID3D11Buffer</term><description>
            May be accessed through a device pointer.
            </description></item>  
            <item><term>ID3D11Texture1D</term><description>
            Individual subresources of the texture may be accessed via arrays.
            </description></item>  
            <item><term>ID3D11Texture2D</term><description>
            Individual subresources of the texture may be accessed via arrays.
            </description></item> 
            <item><term>ID3D11Texture3D</term><description>
            Individual subresources of the texture may be accessed via arrays.
            </description></item>  
            </list> 
            The Flags argument may be used to specify additional parameters at register time. The only valid value for this
            parameter is <see cref="F:ManagedCuda.BasicTypes.CUGraphicsRegisterFlags.None"/>. <para/>
            Not all Direct3D resources of the above types may be used for interoperability with CUDA. The following are some
            limitations.<param/>
            • The primary rendertarget may not be registered with CUDA.<param/>
            • Resources allocated as shared may not be registered with CUDA.<param/>
            • Textures which are not of a format which is 1, 2, or 4 channels of 8, 16, or 32-bit integer or floating-point data
            cannot be shared.<param/>
            • Surfaces of depth or stencil formats cannot be shared.<param/>
            If Direct3D interoperability is not initialized for this context using <see cref="M:ManagedCuda.DirectX11NativeMethods.cuD3D11CtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUdevice@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr)"/> then
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/> is returned. If <c>pD3DResource</c> is of incorrect type or is already registered then
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/> is returned. If <c>pD3DResource</c> cannot be registered then 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/> is returned. If <c>Flags</c> is not one of the above specified value then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            is returned.
            </summary>
            <param name="pCudaResource">Returned graphics resource handle</param>
            <param name="pD3DResource">Direct3D resource to register</param>
            <param name="Flags">Parameters for resource registration</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DirectX11NativeMethods.cuD3D11GetDirect3DDevice(System.IntPtr@)">
            <summary>
            Returns in <c>ppD3DDevice</c> the Direct3D device against which this CUDA context
            was created in <see cref="M:ManagedCuda.DirectX11NativeMethods.cuD3D11CtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUdevice@,ManagedCuda.BasicTypes.CUCtxFlags,System.IntPtr)"/>.
            </summary>
            <param name="ppD3DDevice">Returned Direct3D device corresponding to CUDA context</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.CudaTextureLinear1D`1">
            <summary>
            CudaLinearTexture1D
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinear1D`1.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new 1D texture from linear memory. Allocates a new device variable
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="size">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinear1D`1.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Creates a new 1D texture from linear memory.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="deviceVar"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinear1D`1.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinear1D`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinear1D`1.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinear1D`1.Reset(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Binds a linear address range to the texture reference. <para/>
            Any previous address or CUDA array state associated with the texture reference is superseded by this function. <para/>
            Any memory previously bound to the texture reference is unbound.<para/>
            Size my differ to the previous bound variable, but type must be the same.
            </summary>
            <param name="deviceVar">New device variable to bind this texture reference to.</param>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.TextureReference">
            <summary>
            TextureReference
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.AddressMode0">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.Filtermode">
            <summary>
            Filtermode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.ChannelSize">
            <summary>
            ChannelSize
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.TotalSizeInBytes">
            <summary>
            TotalSizeInBytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.NumChannels">
            <summary>
            NumChannels
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.CUFuntion">
            <summary>
            CUFunction
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinear1D`1.DeviceVariable">
            <summary>
            Device variable in linear Memory
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaHelperMethods">
            <summary>
            Helper methods used in the wrapper framework
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaHelperMethods.GetNumChannels(System.Type)">
            <summary>
            Returns the number of channels used in textures depending on the given type.
            </summary>
            <param name="value">Type</param>
            <returns>Number of channels</returns>
        </member>
        <member name="M:ManagedCuda.CudaHelperMethods.GetChannelSize(ManagedCuda.BasicTypes.CUArrayFormat)">
            <summary>
            Returns the channel size of an CUDA array in bytes.
            </summary>
            <param name="format">Channel format</param>
            <returns>Size in bytes</returns>
        </member>
        <member name="T:ManagedCuda.CudaGraphicsInteropResourceCollection">
            <summary>
            Groupes several wrapped CUgraphicsResources together, so that the map() call to the CUDA API can be efficiently on all
            resources together.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.#ctor">
            <summary>
            Creates a new CudaGraphicsInteropResourceCollection
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.Add(ManagedCuda.ICudaGraphicsInteropResource)">
            <summary>
            Adds a new resource to the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.Clear">
            <summary>
            Removes all resources in the collection, an disposes every element.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.Contains(ManagedCuda.ICudaGraphicsInteropResource)">
            <summary>
            Returns true, if the given resource is part of the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.System#Collections#Generic#ICollection{ManagedCuda#ICudaGraphicsInteropResource}#CopyTo(ManagedCuda.ICudaGraphicsInteropResource[],System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.Remove(ManagedCuda.ICudaGraphicsInteropResource)">
            <summary>
            Removes a resource from the collection. The resource is not disposed.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.MapAllResources">
            <summary>
            Maps all graphics resources for access by CUDA.<para/>
            The resources may be accessed by CUDA until they are unmapped. The graphics API from which the resource
            was registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.CudaGraphicsInteropResourceCollection.MapAllResources"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If any of the resources is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.MapAllResources(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Maps all graphics resources for access by CUDA.<para/>
            The resources may be accessed by CUDA until they are unmapped. The graphics API from which the resource
            was registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.CudaGraphicsInteropResourceCollection.MapAllResources"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If any of the resources is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.UnmapAllResources">
            <summary>
            Maps all graphics resources for access by CUDA.<para/>
            The resources may be accessed by CUDA until they are unmapped. The graphics API from which the resource
            was registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.CudaGraphicsInteropResourceCollection.MapAllResources"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If any of the resources is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaGraphicsInteropResourceCollection.UnmapAllResources(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Unmaps all graphics resources.<para/>
            Once unmapped, the resources may not be accessed by CUDA until they are mapped again.<para/>
            This function provides the synchronization guarantee that any CUDA work issued in <c>stream</c> before <see cref="M:ManagedCuda.CudaGraphicsInteropResourceCollection.UnmapAllResources"/>
            will complete before any subsequently issued graphics work begins.<para/>
            If any of the resources are not presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:ManagedCuda.CudaGraphicsInteropResourceCollection.Count">
            <summary>
            Returns the number of resources in the collection
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaGraphicsInteropResourceCollection.Item(System.Int32)">
            <summary>
            Returns the ICudaGraphicsInteropResource at index index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUarray">
            <summary>
            CUDA array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUarray.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUmipmappedArray">
            <summary>
            CUDA mipmapped array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUmipmappedArray.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUcontext">
            <summary>
            Cuda context
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUcontext.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUdevice">
            <summary>
            Cuda device
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUdevice.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUdeviceptr">
            <summary>
            Pointer to CUDA device memory
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUdeviceptr.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CUdeviceptr.op_Implicit(ManagedCuda.BasicTypes.CUdeviceptr)~System.UInt32">
            <summary>
            
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CUdeviceptr.op_Explicit(ManagedCuda.BasicTypes.SizeT)~ManagedCuda.BasicTypes.CUdeviceptr">
            <summary>
            
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CUdeviceptr.op_Addition(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CUdeviceptr.op_Subtraction(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CUdeviceptr.op_Equality(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CUdeviceptr.op_Inequality(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CUdeviceptr.Equals(System.Object)">
            <summary>
            Returns true if both objects are of type CUdeviceptr and if both Pointer member is equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CUdeviceptr.GetHashCode">
            <summary>
            Overrides object.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CUdeviceptr.#ctor(ManagedCuda.BasicTypes.SizeT)">
            <summary>
            
            </summary>
            <param name="pointer"></param>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUevent">
            <summary>
            Cuda event
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUevent.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUfunction">
            <summary>
            Cuda function / kernel
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUfunction.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUmodule">
            <summary>
            Cuda module
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUmodule.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUstream">
            <summary>
            Cuda stream
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUstream.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUtexref">
            <summary>
            CUDA texture reference
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUtexref.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUsurfref">
            <summary>
            CUDA surface reference
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUsurfref.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUgraphicsResource">
            <summary>
            CUDA graphics interop resource (DirectX / OpenGL)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUgraphicsResource.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUtexObject">
            <summary>
            CUDA texture object
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUtexObject.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUsurfObject">
            <summary>
            CUDA surface object
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUsurfObject.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUuuid">
            <summary>
            CUDA definition of UUID
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUuuid.bytes">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUipcEventHandle">
            <summary>
            Interprocess Handle for Events
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUipcEventHandle.reserved">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUipcMemHandle">
            <summary>
            Interprocess Handle for Memory
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUipcMemHandle.reserved">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUDeviceProperties">
            <summary>
            Legacy device properties
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.totalConstantMemory">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.SIMDWidth">
            <summary>
            Warp size in threads. Also called SIMD width.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.memPitch">
            <summary>
            Maximum pitch in bytes allowed by the memory copy functions that involve memory regions allocated through
            <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceProperties.textureAlign">
            <summary>
            Alignment requirement for textures. texture base addresses that are aligned to textureAlign bytes do not
            need an offset applied to texture fetches.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUDAMemCpy2D">
            <summary>
            2D memory copy parameters
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.srcXInBytes">
            <summary>
            Source X in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.srcY">
            <summary>
            Source Y
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.srcMemoryType">
            <summary>
            Source memory type (host, device, array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.srcHost">
            <summary>
            Source host pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.srcDevice">
            <summary>
            Source device pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.srcArray">
            <summary>
            Source array reference
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.srcPitch">
            <summary>
            Source pitch (ignored when src is array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.dstXInBytes">
            <summary>
            Destination X in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.dstY">
            <summary>
            Destination Y
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.dstMemoryType">
            <summary>
            Destination memory type (host, device, array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.dstHost">
            <summary>
            Destination host pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.dstDevice">
            <summary>
            Destination device pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.dstArray">
            <summary>
            Destination array reference
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.dstPitch">
            <summary>
            Destination pitch (ignored when dst is array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.WidthInBytes">
            <summary>
            Width of 2D memory copy in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy2D.Height">
            <summary>
            Height of 2D memory copy
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUDAMemCpy3D">
            <summary>
            3D memory copy parameters
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcXInBytes">
            <summary>
            Source X in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcY">
            <summary>
            Source Y
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcZ">
            <summary>
            Source Z
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcLOD">
            <summary>
            Source LOD
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcMemoryType">
            <summary>
            Source memory type (host, device, array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcHost">
            <summary>
            Source host pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcDevice">
            <summary>
            Source device pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcArray">
            <summary>
            Source array reference
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.reserved0">
            <summary>
            Must be NULL
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcPitch">
            <summary>
            Source pitch (ignored when src is array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.srcHeight">
            <summary>
            Source height (ignored when src is array; may be 0 if Depth==1)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstXInBytes">
            <summary>
            Destination X in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstY">
            <summary>
            Destination Y
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstZ">
            <summary>
            Destination Z
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstLOD">
            <summary>
            Destination LOD
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstMemoryType">
            <summary>
            Destination memory type (host, device, array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstHost">
            <summary>
            Destination host pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstDevice">
            <summary>
            Destination device pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstArray">
            <summary>
            Destination array reference
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.reserved1">
            <summary>
            Must be NULL
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstPitch">
            <summary>
            Destination pitch (ignored when dst is array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.dstHeight">
            <summary>
            Destination height (ignored when dst is array; may be 0 if Depth==1)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.WidthInBytes">
            <summary>
            Width of 3D memory copy in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.Height">
            <summary>
            Height of 3D memory copy
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3D.Depth">
            <summary>
            Depth of 3D memory copy
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer">
            <summary>
            3D memory copy parameters
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcXInBytes">
            <summary>
            Source X in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcY">
            <summary>
            Source Y
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcZ">
            <summary>
            Source Z
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcLOD">
            <summary>
            Source LOD
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcMemoryType">
            <summary>
            Source memory type (host, device, array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcHost">
            <summary>
            Source host pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcDevice">
            <summary>
            Source device pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcArray">
            <summary>
            Source array reference
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcContext">
            <summary>
            Source context (ignored with srcMemoryType is array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcPitch">
            <summary>
            Source pitch (ignored when src is array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.srcHeight">
            <summary>
            Source height (ignored when src is array; may be 0 if Depth==1)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstXInBytes">
            <summary>
            Destination X in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstY">
            <summary>
            Destination Y
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstZ">
            <summary>
            Destination Z
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstLOD">
            <summary>
            Destination LOD
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstMemoryType">
            <summary>
            Destination memory type (host, device, array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstHost">
            <summary>
            Destination host pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstDevice">
            <summary>
            Destination device pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstArray">
            <summary>
            Destination array reference
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstContext">
            <summary>
            Destination context (ignored with dstMemoryType is array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstPitch">
            <summary>
            Destination pitch (ignored when dst is array)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.dstHeight">
            <summary>
            Destination height (ignored when dst is array; may be 0 if Depth==1)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.WidthInBytes">
            <summary>
            Width of 3D memory copy in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.Height">
            <summary>
            Height of 3D memory copy
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer.Depth">
            <summary>
            Depth of 3D memory copy
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUDAArrayDescriptor">
            <summary>
            Array descriptor
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArrayDescriptor.Width">
            <summary>
            Width of array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArrayDescriptor.Height">
            <summary>
            Height of array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArrayDescriptor.Format">
            <summary>
            Array format
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArrayDescriptor.NumChannels">
            <summary>
            Channels per array element
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUDAArray3DDescriptor">
            <summary>
            3D array descriptor
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DDescriptor.Width">
            <summary>
            Width of 3D array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DDescriptor.Height">
            <summary>
            Height of 3D array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DDescriptor.Depth">
            <summary>
            Depth of 3D array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DDescriptor.Format">
            <summary>
            Array format
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DDescriptor.NumChannels">
            <summary>
            Channels per array element
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DDescriptor.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.SizeT">
            <summary>
            Idea of a SizeT type from http://blogs.hoopoe-cloud.com/index.php/tag/cudanet/, entry from Tuesday, September 15th, 2009
            </summary>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.#ctor(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(ManagedCuda.BasicTypes.SizeT)~System.Int32">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(ManagedCuda.BasicTypes.SizeT)~System.UInt32">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(ManagedCuda.BasicTypes.SizeT)~System.Int64">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(ManagedCuda.BasicTypes.SizeT)~System.UInt64">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(ManagedCuda.BasicTypes.SizeT)~System.IntPtr">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(System.Int32)~ManagedCuda.BasicTypes.SizeT">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(System.UInt32)~ManagedCuda.BasicTypes.SizeT">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(System.Int64)~ManagedCuda.BasicTypes.SizeT">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(System.UInt64)~ManagedCuda.BasicTypes.SizeT">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Implicit(System.IntPtr)~ManagedCuda.BasicTypes.SizeT">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Inequality(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Equality(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Addition(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Define operator + on converted to long values to avoid fall back to int
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Subtraction(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Define operator - on converted to long values to avoid fall back to int
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Multiply(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Define operator * on converted to long values to avoid fall back to int
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.op_Division(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Define operator / on converted to long values to avoid fall back to int
            </summary>
            <param name="val1"></param>
            <param name="val2"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.ToString">
            <summary>
            returns this.value.ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.BasicTypes.SizeT.GetHashCode">
            <summary>
            Returns this.value.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CudaResourceDescLinear">
            <summary>
            Inner struct for CudaResourceDesc
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescLinear.devPtr">
            <summary>
            Device pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescLinear.format">
            <summary>
            Array format
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescLinear.numChannels">
            <summary>
            Channels per array element
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescLinear.sizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CudaResourceDescPitch2D">
            <summary>
            Inner struct for CudaResourceDesc
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescPitch2D.devPtr">
            <summary>
            Device pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescPitch2D.format">
            <summary>
            Array format
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescPitch2D.numChannels">
            <summary>
            Channels per array element
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescPitch2D.width">
            <summary>
            Width of the array in elements
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescPitch2D.height">
            <summary>
            Height of the array in elements
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDescPitch2D.pitchInBytes">
            <summary>
            Pitch between two rows in bytes
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CudaResourceDesc">
            <summary>
            CUDA Resource descriptor
            </summary>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaArray1D)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaArray2D)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaArray3D)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaMipmappedArray)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{System.Single})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.float2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.float4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{System.Int32})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.int2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.int4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{System.Int16})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.short2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.short4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{System.SByte})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.char2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.char4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{System.Byte})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.uchar2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.uchar4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{System.UInt16})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.ushort2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.ushort4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.uint2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaDeviceVariable{ManagedCuda.VectorTypes.uint4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.BasicTypes.CudaResourceDescLinear)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.BasicTypes.CudaResourceDescPitch2D)">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{System.Single})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{System.Int32})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{System.Int16})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{System.SByte})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{System.Byte})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{System.UInt16})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.float2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.int2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.short2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.char2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.uchar2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.ushort2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.uint2})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.float4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.int4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.short4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.char4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.uchar4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.ushort4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaResourceDesc.#ctor(ManagedCuda.CudaPitchedDeviceVariable{ManagedCuda.VectorTypes.uint4})">
            <summary>
            
            </summary>
            <param name="var"></param>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDesc.resType">
            <summary>
            Resource type
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDesc.hArray">
            <summary>
            CUDA array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDesc.hMipmappedArray">
            <summary>
            CUDA mipmapped array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDesc.linear">
            <summary>
            Linear memory
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDesc.pitch2D">
            <summary>
            Linear pitched 2D memory
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceDesc.flags">
            <summary>
            Flags (must be zero)
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CudaTextureDescriptor">
            <summary>
            Texture descriptor
            </summary>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaTextureDescriptor.#ctor(ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags)">
            <summary>
            Creates a new CudaTextureDescriptor
            </summary>
            <param name="aAddressMode">Address modes for all dimensions</param>
            <param name="aFilterMode">Filter mode</param>
            <param name="aFlags">Flags</param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaTextureDescriptor.#ctor(ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags)">
            <summary>
            Creates a new CudaTextureDescriptor
            </summary>
            <param name="aAddressMode0">Address modes for dimension 0</param>
            <param name="aAddressMode1">Address modes for dimension 1</param>
            <param name="aAddressMode2">Address modes for dimension 2</param>
            <param name="aFilterMode">Filter mode</param>
            <param name="aFlags">Flags</param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaTextureDescriptor.#ctor(ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new CudaTextureDescriptor
            </summary>
            <param name="aAddressMode">Address modes for all dimensions</param>
            <param name="aFilterMode">Filter mode</param>
            <param name="aFlags">Flags</param>
            <param name="aMaxAnisotropy">Maximum anistropy ratio. Specifies the maximum anistropy ratio to be used when doing anisotropic
            filtering. This value will be clamped to the range [1,16].</param>
            <param name="aMipmapFilterMode">Mipmap filter mode. Specifies the filter mode when the calculated mipmap level lies between
            two defined mipmap levels.</param>
            <param name="aMipmapLevelBias">Mipmap level bias. Specifies the offset to be applied to the calculated mipmap level.</param>
            <param name="aMinMipmapLevelClamp">Mipmap minimum level clamp. Specifies the lower end of the mipmap level range to clamp access to.</param>
            <param name="aMaxMipmapLevelClamp">Mipmap maximum level clamp. Specifies the upper end of the mipmap level range to clamp access to.</param>
        </member>
        <member name="M:ManagedCuda.BasicTypes.CudaTextureDescriptor.#ctor(ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new CudaTextureDescriptor
            </summary>
            <param name="aAddressMode0">Address modes for dimension 0</param>
            <param name="aAddressMode1">Address modes for dimension 1</param>
            <param name="aAddressMode2">Address modes for dimension 2</param>
            <param name="aFilterMode">Filter mode</param>
            <param name="aFlags">Flags</param>
            <param name="aMaxAnisotropy">Maximum anistropy ratio. Specifies the maximum anistropy ratio to be used when doing anisotropic
            filtering. This value will be clamped to the range [1,16].</param>
            <param name="aMipmapFilterMode">Mipmap filter mode. Specifies the filter mode when the calculated mipmap level lies between
            two defined mipmap levels.</param>
            <param name="aMipmapLevelBias">Mipmap level bias. Specifies the offset to be applied to the calculated mipmap level.</param>
            <param name="aMinMipmapLevelClamp">Mipmap minimum level clamp. Specifies the lower end of the mipmap level range to clamp access to.</param>
            <param name="aMaxMipmapLevelClamp">Mipmap maximum level clamp. Specifies the upper end of the mipmap level range to clamp access to.</param>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaTextureDescriptor.addressMode">
            <summary>
            Address modes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaTextureDescriptor.filterMode">
            <summary>
            Filter mode
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaTextureDescriptor.flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaTextureDescriptor.maxAnisotropy">
            <summary>
            Maximum anistropy ratio. Specifies the maximum anistropy ratio to be used when doing anisotropic
            filtering. This value will be clamped to the range [1,16].
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaTextureDescriptor.mipmapFilterMode">
            <summary>
            Mipmap filter mode. Specifies the filter mode when the calculated mipmap level lies between
            two defined mipmap levels.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaTextureDescriptor.mipmapLevelBias">
            <summary>
            Mipmap level bias. Specifies the offset to be applied to the calculated mipmap level.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaTextureDescriptor.minMipmapLevelClamp">
            <summary>
            Mipmap minimum level clamp. Specifies the lower end of the mipmap level range to clamp access to.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaTextureDescriptor.maxMipmapLevelClamp">
            <summary>
            Mipmap maximum level clamp. Specifies the upper end of the mipmap level range to clamp access to.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CudaResourceViewDesc">
            <summary>
            Resource view descriptor
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceViewDesc.format">
            <summary>
            Resource view format
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceViewDesc.width">
            <summary>
            Width of the resource view
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceViewDesc.height">
            <summary>
            Height of the resource view
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceViewDesc.depth">
            <summary>
            Depth of the resource view
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceViewDesc.firstMipmapLevel">
            <summary>
            First defined mipmap level
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceViewDesc.lastMipmapLevel">
            <summary>
            Last defined mipmap level
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceViewDesc.firstLayer">
            <summary>
            First layer index
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaResourceViewDesc.lastLayer">
            <summary>
            Last layer index
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CudaPointerAttributeP2PTokens">
            <summary>
            GPU Direct v3 tokens
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaPointerAttributeP2PTokens.p2pToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CudaPointerAttributeP2PTokens.vaSpaceToken">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUAddressMode">
            <summary>
            Texture reference addressing modes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUAddressMode.Wrap">
            <summary>
            Wrapping address mode
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUAddressMode.Clamp">
            <summary>
            Clamp to edge address mode
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUAddressMode.Mirror">
            <summary>
            Mirror address mode
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUAddressMode.Border">
            <summary>
            Border address mode
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUArrayFormat">
            <summary>
            Array formats
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayFormat.UnsignedInt8">
            <summary>
            Unsigned 8-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayFormat.UnsignedInt16">
            <summary>
            Unsigned 16-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayFormat.UnsignedInt32">
            <summary>
            Unsigned 32-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayFormat.SignedInt8">
            <summary>
            Signed 8-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayFormat.SignedInt16">
            <summary>
            Signed 16-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayFormat.SignedInt32">
            <summary>
            Signed 32-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayFormat.Half">
            <summary>
            16-bit floating point
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayFormat.Float">
            <summary>
            32-bit floating point
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUComputeMode">
            <summary>
            Compute mode that device is currently in.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUComputeMode.Default">
            <summary>
            Default mode - Device is not restricted and can have multiple CUDA
            contexts present at a single time.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUComputeMode.Exclusive">
            <summary>
            Compute-exclusive mode - Device can have only one CUDA context
            present on it at a time.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUComputeMode.Prohibited">
            <summary>
            Compute-prohibited mode - Device is prohibited from creating
            new CUDA contexts.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUComputeMode.ExclusiveProcess">
            <summary>
            Compute-exclusive-process mode (Only one context used by a 
            single process can be present on this device at a time)
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUCtxAttachFlags">
            <summary>
            Context Attach flags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUCtxAttachFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUDeviceAttribute">
            <summary>
            Device properties
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxBlockDimX">
            <summary>
            Maximum block dimension X
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxBlockDimY">
            <summary>
            Maximum block dimension Y
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxBlockDimZ">
            <summary>
            Maximum block dimension Z
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxGridDimX">
            <summary>
            Maximum grid dimension X
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxGridDimY">
            <summary>
            Maximum grid dimension Y
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxGridDimZ">
            <summary>
            Maximum grid dimension Z
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxSharedMemoryPerBlock">
            <summary>
            Maximum amount of shared memory
            available to a thread block in bytes; this amount is shared by all thread blocks simultaneously resident on a
            multiprocessor
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.SharedMemoryPerBlock">
            <summary>
            Deprecated, use MaxSharedMemoryPerBlock
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.TotalConstantMemory">
            <summary>
            Memory available on device for __constant__ variables in a CUDA C kernel in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.WarpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxPitch">
            <summary>
            Maximum pitch in bytes allowed by the memory copy functions
            that involve memory regions allocated through <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.RegistersPerBlock">
            <summary>
            Deprecated, use MaxRegistersPerBlock
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxRegistersPerBlock">
            <summary>
            Maximum number of 32-bit registers available
            to a thread block; this number is shared by all thread blocks simultaneously resident on a multiprocessor
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.ClockRate">
            <summary>
            Peak clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.TextureAlignment">
            <summary>
            Alignment requirement; texture base addresses
            aligned to textureAlign bytes do not need an offset applied to texture fetches
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.GPUOverlap">
            <summary>
            1 if the device can concurrently copy memory between host
            and device while executing a kernel, or 0 if not
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MultiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.KernelExecTimeout">
            <summary>
            Specifies whether there is a run time limit on kernels. <para/>
            1 if there is a run time limit for kernels executed on the device, or 0 if not
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.Integrated">
            <summary>
            Device is integrated with host memory. 1 if the device is integrated with the memory subsystem, or 0 if not
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.CanMapHostMemory">
            <summary>
            Device can map host memory into CUDA address space. 1 if the device can map host memory into the
            CUDA address space, or 0 if not
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.ComputeMode">
            <summary>
            Compute mode (See <see cref="T:ManagedCuda.BasicTypes.CUComputeMode"/> for details)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture1DWidth">
            <summary>
            Maximum 1D texture width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DWidth">
            <summary>
            Maximum 2D texture width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DHeight">
            <summary>
            Maximum 2D texture height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture3DWidth">
            <summary>
            Maximum 3D texture width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture3DHeight">
            <summary>
            Maximum 3D texture height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture3DDepth">
            <summary>
            Maximum 3D texture depth
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DArray_Width">
            <summary>
            Maximum texture array width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DArray_Height">
            <summary>
            Maximum texture array height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DArray_NumSlices">
            <summary>
            Maximum slices in a texture array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.SurfaceAllignment">
            <summary>
            Alignment requirement for surfaces
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.ConcurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently. <para/>
            1 if the device supports executing multiple kernels
            within the same context simultaneously, or 0 if not. It is not guaranteed that multiple kernels will be resident on
            the device concurrently so this feature should not be relied upon for correctness.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.ECCEnabled">
            <summary>
            Device has ECC support enabled. 1 if error correction is enabled on the device, 0 if error correction
            is disabled or not supported by the device.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.PCIBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.PCIDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.TCCDriver">
            <summary>
            Device is using TCC driver model
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MemoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.GlobalMemoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.L2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.AsyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.UnifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture1DLayeredWidth">
            <summary>
            Maximum 1D layered texture width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture1DLayeredLayers">
            <summary>
            Maximum layers in a 1D layered texture
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.PCIDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.TexturePitchAlignment">
            <summary>
            Pitch alignment requirement for textures
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTextureCubeMapWidth">
            <summary>
            Maximum cubemap texture width/height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTextureCubeMapLayeredWidth">
            <summary>
            Maximum cubemap layered texture width/height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTextureCubeMapLayeredLayers">
            <summary>
            Maximum layers in a cubemap layered texture
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface1DWidth">
            <summary>
            Maximum 1D surface width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface2DWidth">
            <summary>
            Maximum 2D surface width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface2DHeight">
            <summary>
            Maximum 2D surface height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface3DWidth">
            <summary>
            Maximum 3D surface width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface3DHeight">
            <summary>
            Maximum 3D surface height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface3DDepth">
            <summary>
            Maximum 3D surface depth
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface1DLayeredWidth">
            <summary>
            Maximum 1D layered surface width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface1DLayeredLayers">
            <summary>
            Maximum layers in a 1D layered surface
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface2DLayeredWidth">
            <summary>
            Maximum 2D layered surface width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface2DLayeredHeight">
            <summary>
            Maximum 2D layered surface height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurface2DLayeredLayers">
            <summary>
            Maximum layers in a 2D layered surface
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurfaceCubemapWidth">
            <summary>
            Maximum cubemap surface width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurfaceCubemapLayeredWidth">
            <summary>
            Maximum cubemap layered surface width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumSurfaceCubemapLayeredLayers">
            <summary>
            Maximum layers in a cubemap layered surface
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture1DLinearWidth">
            <summary>
            Maximum 1D linear texture width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DLinearWidth">
            <summary>
            Maximum 2D linear texture width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DLinearHeight">
            <summary>
            Maximum 2D linear texture height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DLinearPitch">
            <summary>
            Maximum 2D linear texture pitch in bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DMipmappedWidth">
            <summary>
            Maximum mipmapped 2D texture width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture2DMipmappedHeight">
            <summary>
            Maximum mipmapped 2D texture height
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.ComputeCapabilityMajor">
            <summary>
            Major compute capability version number
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.ComputeCapabilityMinor">
            <summary>
            Minor compute capability version number
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MaximumTexture1DMipmappedWidth">
            <summary>
            Maximum mipmapped 1D texture width
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDeviceAttribute.MAX">
            <summary>
            ???
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUFilterMode">
            <summary>
            Texture reference filtering modes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFilterMode.Point">
            <summary>
            Point filter mode
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFilterMode.Linear">
            <summary>
            Linear filter mode
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUFunctionAttribute">
            <summary>
            Function properties
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFunctionAttribute.MaxThreadsPerBlock">
            <summary>
            <para>The number of threads beyond which a launch of the function would fail.</para>
            <para>This number depends on both the function and the device on which the
            function is currently loaded.</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFunctionAttribute.SharedSizeBytes">
            <summary>
            <para>The size in bytes of statically-allocated shared memory required by
            this function. </para><para>This does not include dynamically-allocated shared
            memory requested by the user at runtime.</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFunctionAttribute.ConstSizeBytes">
            <summary>
            <para>The size in bytes of statically-allocated shared memory required by
            this function. </para><para>This does not include dynamically-allocated shared
            memory requested by the user at runtime.</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFunctionAttribute.LocalSizeBytes">
            <summary>
            The size in bytes of thread local memory used by this function.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFunctionAttribute.NumRegs">
            <summary>
            The number of registers used by each thread of this function.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFunctionAttribute.PTXVersion">
            <summary>
            The PTX virtual architecture version for which the function was
            compiled. This value is the major PTX version * 10 + the minor PTX version, so a PTX version 1.3 function
            would return the value 13. Note that this may return the undefined value of 0 for cubins compiled prior to CUDA
            3.0.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFunctionAttribute.BinaryVersion">
            <summary>
            The binary version for which the function was compiled. This
            value is the major binary version * 10 + the minor binary version, so a binary version 1.3 function would return
            the value 13. Note that this will return a value of 10 for legacy cubins that do not have a properly-encoded binary
            architecture version.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFunctionAttribute.Max">
            <summary>
            No descritption found...
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUFuncCache">
            <summary>
            Function cache configurations
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFuncCache.PreferNone">
            <summary>
            No preference for shared memory or L1 (default)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFuncCache.PreferShared">
            <summary>
            Function prefers larger shared memory and smaller L1 cache.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFuncCache.PreferL1">
            <summary>
            Function prefers larger L1 cache and smaller shared memory.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUFuncCache.PreferEqual">
            <summary>
            Function prefers equal sized L1 cache and shared memory.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUJITFallback">
            <summary>
            Cubin matching fallback strategies
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITFallback.PTX">
            <summary>
            Prefer to compile ptx
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITFallback.Binary">
            <summary>
            Prefer to fall back to compatible binary code
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUJITOption">
            <summary>
            Online compiler options
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.MaxRegisters">
            <summary>
            <para>Max number of registers that a thread may use.</para>
            <para>Option type: unsigned int</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.ThreadsPerBlock">
            <summary>
            <para>IN: Specifies minimum number of threads per block to target compilation
            for</para>
            <para>OUT: Returns the number of threads the compiler actually targeted.
            This restricts the resource utilization fo the compiler (e.g. max
            registers) such that a block with the given number of threads should be
            able to launch based on register limitations. Note, this option does not
            currently take into account any other resource limitations, such as
            shared memory utilization.</para>
            <para>Option type: unsigned int</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.WallTime">
            <summary>
            Returns a float value in the option of the wall clock time, in
            milliseconds, spent creating the cubin<para/>
            Option type: float
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.InfoLogBuffer">
            <summary>
            <para>Pointer to a buffer in which to print any log messsages from PTXAS
            that are informational in nature (the buffer size is specified via
            option ::CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES)</para>
            Since Cuda 4, the JIT compiler is no more as chatty as before. I never had any info 
            returned to the buffer since I use CUDA 4.
            <para>Option type: char*</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.InfoLogBufferSizeBytes">
            <summary>
            <para>IN: Log buffer size in bytes.  Log messages will be capped at this size
            (including null terminator)</para>
            <para>OUT: Amount of log buffer filled with messages</para>
            <para>Option type: unsigned int</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.ErrorLogBuffer">
            <summary>
            <para>Pointer to a buffer in which to print any log messages from PTXAS that
            reflect errors (the buffer size is specified via option
            ::CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES)</para>
            <para>Option type: char*</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.ErrorLogBufferSizeBytes">
            <summary>
            <para>IN: Log buffer size in bytes.  Log messages will be capped at this size
            (including null terminator)</para>
            <para>OUT: Amount of log buffer filled with messages</para>
            <para>Option type: unsigned int</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.OptimizationLevel">
            <summary>
            <para>Level of optimizations to apply to generated code (0 - 4), with 4
            being the default and highest level of optimizations.</para>
            <para>Option type: unsigned int</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.TargetFromContext">
            <summary>
            <para>No option value required. Determines the target based on the current
            attached context (default)</para>
            <para>Option type: No option value needed</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.Target">
            <summary>
            <para>Target is chosen based on supplied ::CUjit_target_enum.</para>
            <para>Option type: unsigned int for enumerated type ::CUjit_target_enum</para>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOption.FallbackStrategy">
            <summary>
            <para>Specifies choice of fallback strategy if matching cubin is not found.
            Choice is based on supplied ::CUjit_fallback_enum.</para>
            <para>Option type: unsigned int for enumerated type ::CUjit_fallback_enum</para>
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUJITTarget">
            <summary>
            Online compilation targets
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITTarget.Compute_10">
            <summary>
            Compute device class 1.0
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITTarget.Compute_11">
            <summary>
            Compute device class 1.1
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITTarget.Compute_12">
            <summary>
            Compute device class 1.2
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITTarget.Compute_13">
            <summary>
            Compute device class 1.3
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITTarget.Compute_20">
            <summary>
            Compute device class 2.0
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITTarget.Compute_21">
            <summary>
            Compute device class 2.1
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITTarget.Compute_30">
            <summary>
            Compute device class 3.0
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITTarget.Compute_35">
            <summary>
            Compute device class 3.5
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUJITOptimizationLevel">
            <summary>
            Online compilation optimization levels
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOptimizationLevel.ZERO">
            <summary>
            No optimization
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOptimizationLevel.ONE">
            <summary>
            Optimization level 1
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOptimizationLevel.TWO">
            <summary>
            Optimization level 2
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOptimizationLevel.THREE">
            <summary>
            Optimization level 3
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUJITOptimizationLevel.FOUR">
            <summary>
            Best, Default
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUArrayCubemapFace">
            <summary>
            Array indices for cube faces
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayCubemapFace.PositiveX">
            <summary>
            Positive X face of cubemap
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayCubemapFace.NegativeX">
            <summary>
            Negative X face of cubemap
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayCubemapFace.PositiveY">
            <summary>
            Positive Y face of cubemap 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayCubemapFace.NegativeY">
            <summary>
            Negative Y face of cubemap
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayCubemapFace.PositiveZ">
            <summary>
            Positive Z face of cubemap
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUArrayCubemapFace.NegativeZ">
            <summary>
            Negative Z face of cubemap
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CULimit">
            <summary>
            Limits
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CULimit.StackSize">
            <summary>
            GPU thread stack size
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CULimit.PrintfFIFOSize">
            <summary>
            GPU printf FIFO size
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CULimit.MallocHeapSize">
            <summary>
            GPU malloc heap size
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CULimit.DevRuntimeSyncDepth">
            <summary>
            GPU device runtime launch synchronize depth
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CULimit.DevRuntimePendingLaunchCount">
            <summary>
            GPU device runtime pending launch count
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUMemoryType">
            <summary>
            Function cache configurations
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUMemoryType.Host">
            <summary>
            Host memory
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUMemoryType.Device">
            <summary>
            Device memory
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUMemoryType.Array">
            <summary>
            Array memory
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUMemoryType.Unified">
            <summary>
            Unified device or host memory
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUResourceType">
            <summary>
            Resource types
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResourceType.Array">
            <summary>
            Array resoure
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResourceType.MipmappedArray">
            <summary>
            Mipmapped array resource
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResourceType.Linear">
            <summary>
            Linear resource
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResourceType.Pitch2D">
            <summary>
            Pitch 2D resource
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUResult">
            <summary>
            Error codes returned by CUDA driver API calls
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.Success">
            <summary>
            No errors
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue">
            <summary>
            Invalid value
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory">
            <summary>
            Out of memory
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized">
            <summary>
            Driver not initialized
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized">
            <summary>
            Driver deinitialized
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorProfilerDisabled">
            <summary>
            This indicates profiler is not initialized for this run. This can happen when the application is running with external profiling tools
            like visual profiler.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorProfilerNotInitialized">
            <summary>
            This error return is deprecated as of CUDA 5.0. It is no longer an error
            to attempt to enable/disable the profiling via ::cuProfilerStart or
            ::cuProfilerStop without initialization.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorProfilerAlreadyStarted">
            <summary>
            This error return is deprecated as of CUDA 5.0. It is no longer an error
            to call cuProfilerStart() when profiling is already enabled.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorProfilerAlreadyStopped">
            <summary>
            This error return is deprecated as of CUDA 5.0. It is no longer an error
            to call cuProfilerStop() when profiling is already disabled.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNoDevice">
            <summary>
            No CUDA-capable device available
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice">
            <summary>
            Invalid device
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidImage">
            <summary>
            Invalid kernel image
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext">
            <summary>
            Invalid context
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorContextAlreadyCurrent">
            <summary>
            Context already current
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorMapFailed">
            <summary>
            Map failed
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorUnmapFailed">
            <summary>
            Unmap failed
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorArrayIsMapped">
            <summary>
            Array is mapped
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped">
            <summary>
            Already mapped
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNoBinaryForGPU">
            <summary>
            No binary for GPU
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyAcquired">
            <summary>
            Already acquired
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped">
            <summary>
            Not mapped
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray">
            <summary>
            Mapped resource not available for access as an array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer">
            <summary>
            Mapped resource not available for access as a pointer
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorECCUncorrectable">
            <summary>
            Uncorrectable ECC error detected
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorUnsupportedLimit">
            <summary>
            CULimit not supported by device
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorContextAlreadyInUse">
            <summary>
            This indicates that the <see cref="T:ManagedCuda.BasicTypes.CUcontext"/> passed to the API call can
            only be bound to a single CPU thread at a time but is already 
            bound to a CPU thread.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorPeerAccessUnsupported">
            <summary>
            This indicates that peer access is not supported across the given devices.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidSource">
            <summary>
            Invalid source
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorFileNotFound">
            <summary>
            File not found
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectSymbolNotFound">
            <summary>
            Link to a shared object failed to resolve
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectInitFailed">
            <summary>
            Shared object initialization failed
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorOperatingSystem">
            <summary>
            OS call failed
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle">
            <summary>
            Invalid handle
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound">
            <summary>
            Not found
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNotReady">
            <summary>
            CUDA not ready
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchFailed">
            <summary>
            Launch failed
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchOutOfResources">
            <summary>
            Launch exceeded resources
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchTimeout">
            <summary>
            Launch exceeded timeout
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchIncompatibleTexturing">
            <summary>
            Launch with incompatible texturing
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorPeerAccessAlreadyEnabled">
            <summary>
            This error indicates that a call to <see cref="M:ManagedCuda.DriverAPINativeMethods.CudaPeerAccess.cuCtxEnablePeerAccess(ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.CtxEnablePeerAccessFlags)"/> is
            trying to re-enable peer access to a context which has already
            had peer access to it enabled.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorPeerAccessNotEnabled">
            <summary>
            This error indicates that <see cref="M:ManagedCuda.DriverAPINativeMethods.CudaPeerAccess.cuCtxDisablePeerAccess(ManagedCuda.BasicTypes.CUcontext)"/> is 
            trying to disable peer access which has not been enabled yet 
            via <see cref="M:ManagedCuda.DriverAPINativeMethods.CudaPeerAccess.cuCtxEnablePeerAccess(ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.CtxEnablePeerAccessFlags)"/>. 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorPrimaryContextActice">
            <summary>
            This error indicates that the primary context for the specified device
            has already been initialized.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorContextIsDestroyed">
            <summary>
            This error indicates that the context current to the calling thread
            has been destroyed using <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/>, or is a primary context which
            has not yet been initialized. 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorAssert">
            <summary>
            A device-side assert triggered during kernel execution. The context
            cannot be used anymore, and must be destroyed. All existing device 
            memory allocations from this context are invalid and must be 
            reconstructed if the program is to continue using CUDA.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorTooManyPeers">
            <summary>
            This error indicates that the hardware resources required to enable
            peer access have been exhausted for one or more of the devices 
            passed to ::cuCtxEnablePeerAccess().
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorHostMemoryAlreadyRegistered">
            <summary>
            This error indicates that the memory range passed to ::cuMemHostRegister()
            has already been registered.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorHostMemoryNotRegistered">
            <summary>
            This error indicates that the pointer passed to ::cuMemHostUnregister()
            does not correspond to any currently registered memory region.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNotPermitted">
            <summary>
            This error indicates that the attempted operation is not permitted.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorNotSupported">
            <summary>
            This error indicates that the attempted operation is not supported
            on the current system or device.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown">
            <summary>
            Unknown error
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUTexRefSetArrayFlags">
            <summary>
            CUTexRefSetArrayFlags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUTexRefSetArrayFlags.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUTexRefSetArrayFlags.OverrideFormat">
            <summary>
            Override the texref format with a format inferred from the array.
            <para/>Flag for <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetArray(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUTexRefSetArrayFlags)"/>.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUParameterTexRef">
            <summary>
            CUParameterTexRef
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUParameterTexRef.Default">
            <summary>
            For texture references loaded into the module, use default texunit from texture reference.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUSurfRefSetFlags">
            <summary>
            CUSurfRefSetFlags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUSurfRefSetFlags.None">
            <summary>
            Currently no CUSurfRefSetFlags flags are defined.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUPointerAttribute">
            <summary>
            Pointer information
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUPointerAttribute.Context">
            <summary>
            The <see cref="T:ManagedCuda.BasicTypes.CUcontext"/> on which a pointer was allocated or registered
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUPointerAttribute.MemoryType">
            <summary>
            The <see cref="T:ManagedCuda.BasicTypes.CUMemoryType"/> describing the physical location of a pointer 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUPointerAttribute.DevicePointer">
            <summary>
            The address at which a pointer's memory may be accessed on the device 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUPointerAttribute.HostPointer">
            <summary>
            The address at which a pointer's memory may be accessed on the host 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUPointerAttribute.P2PTokens">
            <summary>
            A pair of tokens for use with the nv-p2p.h Linux kernel interface
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUd3dXDeviceList">
            <summary>
            CUDA devices corresponding to a D3D11, D3D10 or D3D9 device
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUd3dXDeviceList.All">
            <summary>
            The CUDA devices for all GPUs used by a D3D11 device.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUd3dXDeviceList.CurrentFrame">
            <summary>
            The CUDA devices for the GPUs used by a D3D11 device in its currently rendering frame (in SLI).
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUd3dXDeviceList.NextFrame">
            <summary>
            The CUDA devices for the GPUs to be used by a D3D11 device in the next frame (in SLI).
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUGLDeviceList">
            <summary>
            CUDA devices corresponding to an OpenGL device.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGLDeviceList.All">
            <summary>
            The CUDA devices for all GPUs used by the current OpenGL context
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGLDeviceList.CurrentFrame">
            <summary>
            The CUDA devices for the GPUs used by the current OpenGL context in its currently rendering frame
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGLDeviceList.NextFrame">
            <summary>
            The CUDA devices for the GPUs to be used by the current OpenGL context in the next frame
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUsharedconfig">
            <summary>
            Shared memory configurations
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUsharedconfig.DefaultBankSize">
            <summary>
            set default shared memory bank size 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUsharedconfig.FourByteBankSize">
            <summary>
            set shared memory bank width to four bytes
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUsharedconfig.EightByteBankSize">
            <summary>
            set shared memory bank width to eight bytes
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUipcMem_flags">
            <summary>
            CUipcMem_flags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUipcMem_flags.LazyEnablePeerAccess">
            <summary>
            Automatically enable peer access between remote devices as needed
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUresourceViewFormat">
            <summary>
            Resource view format
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.None">
            <summary>
            No resource view format (use underlying resource format)
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Uint1X8">
            <summary>
            1 channel unsigned 8-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Uint2X8">
            <summary>
            2 channel unsigned 8-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Uint4X8">
            <summary>
            4 channel unsigned 8-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Sint1X8">
            <summary>
            1 channel signed 8-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Sint2X8">
            <summary>
            2 channel signed 8-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Sint4X8">
            <summary>
            4 channel signed 8-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Uint1X16">
            <summary>
            1 channel unsigned 16-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Uint2X16">
            <summary>
            2 channel unsigned 16-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Uint4X16">
            <summary>
            4 channel unsigned 16-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Sint1X16">
            <summary>
            1 channel signed 16-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Sint2X16">
            <summary>
            2 channel signed 16-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Sint4X16">
            <summary>
            4 channel signed 16-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Uint1X32">
            <summary>
            1 channel unsigned 32-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Uint2X32">
            <summary>
            2 channel unsigned 32-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Uint4X32">
            <summary>
            4 channel unsigned 32-bit integers 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Sint1X32">
            <summary>
            1 channel signed 32-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Sint2X32">
            <summary>
            2 channel signed 32-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Sint4X32">
            <summary>
            4 channel signed 32-bit integers
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Float1X16">
            <summary>
            1 channel 16-bit floating point
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Float2X16">
            <summary>
            2 channel 16-bit floating point
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Float4X16">
            <summary>
            4 channel 16-bit floating point
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Float1X32">
            <summary>
            1 channel 32-bit floating point
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Float2X32">
            <summary>
            2 channel 32-bit floating point
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.Float4X32">
            <summary>
            4 channel 32-bit floating point
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.UnsignedBC1">
            <summary>
            Block compressed 1 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.UnsignedBC2">
            <summary>
            Block compressed 2
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.UnsignedBC3">
            <summary>
            Block compressed 3 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.UnsignedBC4">
            <summary>
            Block compressed 4 unsigned
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.SignedBC4">
            <summary>
            Block compressed 4 signed 
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.UnsignedBC5">
            <summary>
            Block compressed 5 unsigned
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.SignedBC5">
            <summary>
            Block compressed 5 signed
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.UnsignedBC6H">
            <summary>
            Block compressed 6 unsigned half-float
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.SignedBC6H">
            <summary>
            Block compressed 6 signed half-float
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUresourceViewFormat.UnsignedBC7">
            <summary>
            Block compressed 7 
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUGraphicsRegisterFlags">
            <summary>
            Flags to register a graphics resource
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGraphicsRegisterFlags.None">
            <summary>
            Specifies no hints about how this resource will be used. 
            It is therefore assumed that this resource will be read 
            from and written to by CUDA. This is the default value.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGraphicsRegisterFlags.ReadOnly">
            <summary>
            Specifies that CUDA will not write to this resource.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGraphicsRegisterFlags.WriteDiscard">
            <summary>
            Specifies that CUDA will not read from this resource and 
            will write over the entire contents of the resource, so 
            none of the data previously stored in the resource will 
            be preserved.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGraphicsRegisterFlags.SurfaceLDST">
            <summary>
            Specifies that CUDA will bind this resource to a surface reference.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGraphicsRegisterFlags.TextureGather">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags">
            <summary>
            Flags for mapping and unmapping graphics interop resources
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags.None">
            <summary>
            Specifies no hints about how this resource will be used.
            It is therefore assumed that this resource will be read from and written to by CUDA. This is the default value.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags.ReadOnly">
            <summary>
            Specifies that CUDA will not write to this resource.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags.WriteDiscard">
            <summary>
            Specifies that CUDA will not read from
            this resource and will write over the entire contents of the resource, so none of the data previously stored in the
            resource will be preserved.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUTexRefSetFlags">
            <summary>
            CUTexRefSetFlags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUTexRefSetFlags.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUTexRefSetFlags.ReadAsInteger">
            <summary>
            Read the texture as integers rather than promoting the values to floats in the range [0,1].
            <para/>Flag for <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetFlags(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUTexRefSetFlags)"/>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUTexRefSetFlags.NormalizedCoordinates">
            <summary>
            Use normalized texture coordinates in the range [0,1) instead of [0,dim).
            <para/>Flag for <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetFlags(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUTexRefSetFlags)"/>
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUTexRefSetFlags.sRGB">
            <summary>
            Perform sRGB -> linear conversion during texture read.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUInitializationFlags">
            <summary>
            CUDA driver API initialization flags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUInitializationFlags.None">
            <summary>
            Currently no initialization flags are defined.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CtxEnablePeerAccessFlags">
            <summary>
            CUDA driver API Context Enable Peer Access flags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CtxEnablePeerAccessFlags.None">
            <summary>
            Currently no flags are defined.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUStreamFlags">
            <summary>
            CUDA stream flags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUStreamFlags.None">
            <summary>
            For compatibilty with pre Cuda 5.0, equal to Default
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUStreamFlags.Default">
            <summary>
            Default stream flag
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUStreamFlags.NonBlocking">
            <summary>
            Stream does not synchronize with stream 0 (the NULL stream)
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUDAArray3DFlags">
            <summary>
            CUDAArray3DFlags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Array2D">
            <summary>
            if set, the CUDA array contains an array of 2D slices and
            the Depth member of CUDA_ARRAY3D_DESCRIPTOR specifies the
            number of slices, not the depth of a 3D array.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Layered">
            <summary>
            if set, the CUDA array contains an array of layers where each layer is either a 1D
            or a 2D array and the Depth member of CUDA_ARRAY3D_DESCRIPTOR specifies the number
            of layers, not the depth of a 3D array.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.SurfaceLDST">
            <summary>
            this flag must be set in order to bind a surface reference
            to the CUDA array
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Cubemap">
            <summary>
            If set, the CUDA array is a collection of six 2D arrays, representing faces of a cube. The
            width of such a CUDA array must be equal to its height, and Depth must be six.
            If ::CUDA_ARRAY3D_LAYERED flag is also set, then the CUDA array is a collection of cubemaps
            and Depth must be a multiple of six.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.TextureGather">
            <summary>
            This flag must be set in order to perform texture gather operations on a CUDA array.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUMemHostAllocFlags">
            <summary>
            CUMemHostAllocFlags. All of these flags are orthogonal to one another: a developer may allocate memory that is portable, mapped and/or
            write-combined with no restrictions.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUMemHostAllocFlags.Portable">
            <summary>
            The memory returned by this call will be considered as pinned memory
            by all CUDA contexts, not just the one that performed the allocation.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUMemHostAllocFlags.DeviceMap">
            <summary>
            Maps the allocation into the CUDA address space. The device pointer
            to the memory may be obtained by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostGetDevicePointer_v2(ManagedCuda.BasicTypes.CUdeviceptr@,System.IntPtr,System.Int32)"/>. This feature is available only on
            GPUs with compute capability greater than or equal to 1.1.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUMemHostAllocFlags.WriteCombined">
            <summary>
            Allocates the memory as write-combined (WC). WC memory
            can be transferred across the PCI Express bus more quickly on some system configurations, but cannot be read
            efficiently by most CPUs. WC memory is a good option for buffers that will be written by the CPU and read by
            the GPU via mapped pinned memory or host->device transfers.<para/>
            If set, host memory is allocated as write-combined - fast to write,
            faster to DMA, slow to read except via SSE4 streaming load instruction
            (MOVNTDQA).
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUCtxFlags">
            <summary>
            Context creation flags. <para></para>
            The two LSBs of the flags parameter can be used to control how the OS thread, which owns the CUDA context at
            the time of an API call, interacts with the OS scheduler when waiting for results from the GPU.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUCtxFlags.SchedAuto">
            <summary>
            The default value if the flags parameter is zero, uses a heuristic based on the
            number of active CUDA contexts in the process C and the number of logical processors in the system P. If C >
            P, then CUDA will yield to other OS threads when waiting for the GPU, otherwise CUDA will not yield while
            waiting for results and actively spin on the processor.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUCtxFlags.SchedSpin">
            <summary>
            Instruct CUDA to actively spin when waiting for results from the GPU. This can decrease
            latency when waiting for the GPU, but may lower the performance of CPU threads if they are performing
            work in parallel with the CUDA thread.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUCtxFlags.SchedYield">
            <summary>
            Instruct CUDA to yield its thread when waiting for results from the GPU. This can
            increase latency when waiting for the GPU, but can increase the performance of CPU threads performing work
            in parallel with the GPU.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUCtxFlags.BlockingSync">
            <summary>
            Instruct CUDA to block the CPU thread on a synchronization primitive when waiting for the GPU to finish work.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUCtxFlags.SchedMask">
            <summary>
            No description found...
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUCtxFlags.MapHost">
            <summary>
            Instruct CUDA to support mapped pinned allocations. This flag must be set in order to allocate pinned host memory that is accessible to the GPU.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUCtxFlags.LMemResizeToMax">
            <summary>
            Instruct CUDA to not reduce local memory after resizing local memory
            for a kernel. This can prevent thrashing by local memory allocations when launching many kernels with high
            local memory usage at the cost of potentially increased memory usage.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUCtxFlags.FlagsMask">
            <summary>
            No description found...
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUMemHostRegisterFlags">
            <summary>
            CUMemHostRegisterFlags. All of these flags are orthogonal to one another: a developer may allocate memory that is portable or mapped
            with no restrictions.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUMemHostRegisterFlags.Portable">
            <summary>
            The memory returned by this call will be considered as pinned memory
            by all CUDA contexts, not just the one that performed the allocation.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUMemHostRegisterFlags.DeviceMap">
            <summary>
            Maps the allocation into the CUDA address space. The device pointer
            to the memory may be obtained by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostGetDevicePointer_v2(ManagedCuda.BasicTypes.CUdeviceptr@,System.IntPtr,System.Int32)"/>. This feature is available only on
            GPUs with compute capability greater than or equal to 1.1.
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUStreamAddCallbackFlags">
            <summary>
            Flag for cuStreamAddCallback()
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUStreamAddCallbackFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUEventFlags">
            <summary>
            Event creation flags
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUEventFlags.Default">
            <summary>
            Default event creation flag.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUEventFlags.BlockingSync">
            <summary>
            Specifies that event should use blocking synchronization. A CPU thread
            that uses <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventSynchronize(ManagedCuda.BasicTypes.CUevent)"/> to wait on an event created with this flag will block until the event has actually
            been recorded.
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUEventFlags.DisableTiming">
            <summary>
            Event will not record timing data
            </summary>
        </member>
        <member name="F:ManagedCuda.BasicTypes.CUEventFlags.InterProcess">
            <summary>
            Event is suitable for interprocess use. CUEventFlags.DisableTiming must be set
            </summary>
        </member>
        <member name="T:ManagedCuda.BasicTypes.CUstreamCallback">
            <summary>
            CUDA stream callback
            </summary>
            <param name="hStream">The stream the callback was added to, as passed to ::cuStreamAddCallback.  May be NULL.</param>
            <param name="status">CUDA_SUCCESS or any persistent error on the stream.</param>
            <param name="userData">User parameter provided at registration.</param>
        </member>
        <member name="T:ManagedCuda.CudaOpenGLImageInteropResource">
            <summary>
            Wrapper for a CUgraphicsResource (OpenGL Image)
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.#ctor(System.UInt32,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags,ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget)">
            <summary>
            Registers a new graphics interop resource for interop with OpenGL image
            </summary>
            <param name="resource">OpenGL resource to register</param>
            <param name="flags">register Flags</param>
            <param name="target">OpenGLImageTarget</param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.#ctor(System.UInt32,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags,ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget,ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags)">
            <summary>
            Registers a new graphics interop resource for interop with OpenGL image
            </summary>
            <param name="resource">OpenGL resource to register</param>
            <param name="flags">register Flags</param>
            <param name="target">OpenGLImageTarget</param>
            <param name="mapFlags">resource mapping flags</param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.Map(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Maps the graphics resource for access by CUDA.<para/>
            The resource may be accessed by CUDA until it is unmapped. The graphics API from which the resource
            was registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.CudaOpenGLImageInteropResource.Map"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If the resource is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.Map">
            <summary>
            Maps the graphics resource for access by CUDA.<para/>
            The resource may be accessed by CUDA until it is unmapped. The graphics API from which the resource
            was registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.CudaOpenGLImageInteropResource.Map"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If the resource is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.UnMap(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Unmaps the graphics resource.<para/>
            Once unmapped, the resource may not be accessed by CUDA until they are mapped again.<para/>
            This function provides the synchronization guarantee that any CUDA work issued in <c>stream</c> before <see cref="M:ManagedCuda.CudaOpenGLImageInteropResource.UnMap"/>
            will complete before any subsequently issued graphics work begins.<para/>
            If the resource is not presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.UnMap">
            <summary>
            Unmaps the graphics resource.<para/>
            Once unmapped, the resources in <c>resources</c> may not be accessed by CUDA until they are mapped again.<para/>
            This function provides the synchronization guarantee that any CUDA work issued in <c>stream</c> before <see cref="M:ManagedCuda.CudaOpenGLImageInteropResource.UnMap"/>
            will complete before any subsequently issued graphics work begins.<para/>
            If the resource is not presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.SetMapFlags(ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags)">
            <summary>
            Set <c>flags</c> for mapping the graphics resource. <para/>
            Changes to <c>flags</c> will take effect the next time <c>resource</c> is mapped. See <see cref="T:ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags"/>. <para/>
            If <c>resource</c> is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown. 
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.Unregister">
            <summary>
            Unregisters the wrapped resource. Better use Dispose(), as the wrapper of the unregistered resource is of no use after unregistering.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetMappedPointer``1">
            <summary>
            Returns device variable through which the mapped graphics resource may be accessed. <para/>
            The pointer value in the device variable may change every time that the resource is mapped.<para/>
            If the resource is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            exception is thrown. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetMappedPointer(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Returns in <c>devicePtr</c> a pointer through which the mapped graphics resource may be accessed. Returns
            in <c>size</c> the size of the memory in bytes which may be accessed from that pointer. The value set in <c>devicePtr</c> may
            change every time that the resource is mapped.<para/>
            If the resource is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            exception is thrown. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetMappedPointer">
            <summary>
            Returns a <c>CUdeviceptr</c>, a device pointer through which the mapped graphics resource may be accessed. 
            The value set in <c>devicePtr</c> may
            change every time that the resource is mapped.<para/>
            If the resource is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            exception is thrown. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetMappedArray1D(System.UInt32,System.UInt32)">
            <summary>
            Returns a CudaArray1D through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaArray1D</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetMappedArray2D(System.UInt32,System.UInt32)">
            <summary>
            Returns a CudaArray2D through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaArray2D</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetMappedArray3D(System.UInt32,System.UInt32)">
            <summary>
            Returns a CudaArray3D through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaArray3D</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetMappedMipmappedArray(ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaMipmappedArrayNumChannels)">
            <summary>
            Returns a CudaMipmappedArray through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaMipmappedArray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetMappedCUArray(System.UInt32,System.UInt32)">
            <summary>
            Returns a CUarray handle through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CUarray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetMappedCUMipmappedArray">
            <summary>
            Returns a CUmipmappedArray handle through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CUmipmappedArray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.GetCUgraphicsResource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLImageInteropResource.SetIsMapped">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaOpenGLImageInteropResource.IsMapped">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaOpenGLImageInteropResource.IsRegistered">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaOpenGLImageInteropResource.CUgraphicsResource">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget">
            <summary>
            Type of the openGL image
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget.GL_TEXTURE_2D">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget.GL_TEXTURE_RECTANGLE">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget.GL_TEXTURE_CUBE_MAP">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget.GL_TEXTURE_3D">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget.GL_TEXTURE_2D_ARRAY">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget.GL_RENDERBUFFER">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaPageLockedHostMemory2D`1">
            <summary>
            A variable located in page locked (pinned) host memory. Use this type of variabe for asynchronous memcpy.
            </summary>
            <typeparam name="T">variable base type</typeparam>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)">
            <summary>
            Creates a new CudaPageLockedHostMemory2D and allocates the memory on host. Using cuMemHostAlloc
            </summary>
            <param name="width">In elements</param>
            <param name="pitchInBytes">Width including alignment in bytes</param>
            <param name="height">In elements</param>
            <param name="allocFlags"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaPageLockedHostMemory2D and allocates the memory on host. Using cuMemHostAlloc without flags.
            </summary>
            <param name="width">In elements</param>
            <param name="pitchInBytes">Width including alignment in bytes</param>
            <param name="height">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaPageLockedHostMemory2D and allocates the memory on host. Using cuMemHostAlloc without flags.<para/>
            Pitch is assumed to be width * sizeof(T). Using cuMemHostAlloc without flags.
            </summary>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)">
            <summary>
            Creates a new CudaPageLockedHostMemory3D and allocates the memory on host. Using cuMemHostAlloc without flags.<para/>
            Pitch is assumed to be width * sizeof(T). Using cuMemHostAlloc.
            </summary>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="allocFlags"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyToArray2D(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Synchron copy host to 2D Array
            </summary>
            <param name="deviceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyToArray2D(ManagedCuda.CudaArray2D)">
            <summary>
            Synchron copy host to 2D Array
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyFromArray2D(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Synchron copy 2D Array to host
            </summary>
            <param name="deviceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyFromArray2D(ManagedCuda.CudaArray2D)">
            <summary>
            Synchron copy 2D Array to host
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyToDevice(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyToHost(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyToHost(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron Copy host to pitched device
            </summary>
            <param name="devicePtr"></param>
            <param name="pitchDevice"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0})">
            <summary>
            Synchron Copy host to pitched device
            </summary>
            <param name="deviceVar"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyFromDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr"></param>
            <param name="pitchDevice"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.SynchronCopyFromDevice(ManagedCuda.CudaPitchedDeviceVariable{`0})">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="deviceVar"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyToArray2D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy host to 2D Array
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyToArray2D(ManagedCuda.CudaArray2D,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy host to 2D Array
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyFromArray2D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy 2D Array to host
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyFromArray2D(ManagedCuda.CudaArray2D,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy 2D Array to host
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyFromDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyFromDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to pitched device
            </summary>
            <param name="devicePtr"></param>
            <param name="pitchDevice"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to pitched device
            </summary>
            <param name="deviceVar"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyFromDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="devicePtr"></param>
            <param name="pitchDevice"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.AsyncCopyFromDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="deviceVar"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.GetDevicePointer">
            <summary>
            Returns the CUdeviceptr for pinned host memory mapped to device memory space. Only valid if context is created with flag <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.MapHost"/>
            </summary>
            <returns>Device Pointer</returns>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2D`1.GetAllocFlags">
            <summary>
            Passes back the flags that were specified when allocating the pinned host buffer
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory2D`1.PinnedHostPointer">
            <summary>
            Pointer to pinned host memory.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory2D`1.Width">
            <summary>
            Width in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory2D`1.Height">
            <summary>
            Height in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory2D`1.Pitch">
            <summary>
            Pitch in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory2D`1.SizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory2D`1.TypeSize">
            <summary>
            Type size in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory2D`1.Item(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Access array per element.<para/>
            Each single access hast to trespass the managed/unmanged memory barrier. Access is therefor rather slow.
            </summary>
            <param name="x">X-index in elements</param>
            <param name="y">Y-index in elements</param>
            <returns></returns>
        </member>
        <member name="T:ManagedCuda.CudaPageLockedHostMemory2DEnumerator`1">
            <summary>
            Enumerator class for CudaPageLockedHostMemory2D
            </summary>
            <typeparam name="T_"></typeparam>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2DEnumerator`1.#ctor(ManagedCuda.CudaPageLockedHostMemory2D{`0})">
            <summary>
            
            </summary>
            <param name="memory"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2DEnumerator`1.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory2DEnumerator`1.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory2DEnumerator`1.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory2DEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRegisteredHostMemory`1">
            <summary>
            A variable located in page locked (pinned) host memory. Use this type of variabe for asynchronous memcpy.<para/>
            cuMemHostRegister doesn't work with managed memory (e.g. normal C# arrays). But you can use cuMemHostRegister for
            natively allocated memory (Marshal.AllocHGlobal, or a native dll).
            </summary>
            <typeparam name="T">variable base type</typeparam>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.#ctor(System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaRegisteredHostMemory from an existing IntPtr. IntPtr must be page size aligned (4KBytes)!
            </summary>
            <param name="hostPointer">must be page size aligned (4KBytes)</param>
            <param name="size">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyToArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy host to 1D Array
            </summary>
            <param name="deviceArray"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyToArray1D(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Synchron copy host to 1D Array
            </summary>
            <param name="deviceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyToArray1D(ManagedCuda.CudaArray1D)">
            <summary>
            Synchron copy host to 1D Array
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyToArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy host to 1D Array
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyFromArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy 1D Array to host
            </summary>
            <param name="deviceArray"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyFromArray1D(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Synchron copy 1D Array to host
            </summary>
            <param name="deviceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyFromArray1D(ManagedCuda.CudaArray1D)">
            <summary>
            Synchron copy 1D Array to host
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyFromArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy 1D Array to host
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyToDevice(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyToHost(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.SynchronCopyToHost(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyToArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Asynchron copy host to 1D Array
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyToArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy host to 1D Array
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyToArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy host to 1D Array
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyToArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Asynchron copy host to 1D Array
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyFromArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Asynchron copy 1D Array to host
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyFromArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy 1D Array to host
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyFromArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy 1D Array to host
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyFromArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Asynchron copy 1D Array to host
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="deviceVar"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyFromDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.AsyncCopyFromDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="deviceVar"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.GetDevicePointer">
            <summary>
            Returns the CUdeviceptr for pinned host memory mapped to device memory space. Only valid if context is created with flag <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.MapHost"/>
            </summary>
            <returns>Device Pointer</returns>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.Register(ManagedCuda.BasicTypes.CUMemHostRegisterFlags)">
            <summary>
            Page-locks the memory range specified by <c>p</c> and <c>bytesize</c> and maps it
            for the device(s) as specified by <c>Flags</c>. This memory range also is added
            to the same tracking mechanism as ::cuMemHostAlloc to automatically accelerate
            calls to functions such as <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.dim3[],ManagedCuda.BasicTypes.SizeT)"/>. Since the memory can be accessed 
            directly by the device, it can be read or written with much higher bandwidth 
            than pageable memory that has not been registered.  Page-locking excessive
            amounts of memory may degrade system performance, since it reduces the amount
            of memory available to the system for paging. As a result, this function is
            best used sparingly to register staging areas for data exchange between
            host and device.<para/>
            The pointer <c>p</c> and size <c>bytesize</c> must be aligned to the host page size (4 KB).<para/>
            The memory page-locked by this function must be unregistered with <see cref="M:ManagedCuda.CudaRegisteredHostMemory`1.Unregister"/>
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:ManagedCuda.CudaRegisteredHostMemory`1.Unregister">
            <summary> 
            Unmaps the memory range whose base address is specified by <c>p</c>, and makes it pageable again.<para/>
            The base address must be the same one specified to <see cref="M:ManagedCuda.CudaRegisteredHostMemory`1.Register(ManagedCuda.BasicTypes.CUMemHostRegisterFlags)"/>.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaRegisteredHostMemory`1.PinnedHostPointer">
            <summary>
            Pointer to pinned host memory.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaRegisteredHostMemory`1.SizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaRegisteredHostMemory`1.Size">
            <summary>
            Size in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaRegisteredHostMemory`1.IsRegisterd">
            <summary>
            Returns register status
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaRegisteredHostMemory`1.Item(ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Access array per element.<para/>
            Each single access hast to trespass the managed/unmanged memory barrier. Access is therefor rather slow.
            </summary>
            <param name="index">index in elements</param>
            <returns></returns>
        </member>
        <member name="T:ManagedCuda.CudaPageLockedHostMemory3D`1">
            <summary>
            A variable located in page locked (pinned) host memory. Use this type of variabe for asynchronous memcpy.
            </summary>
            <typeparam name="T">variable base type</typeparam>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)">
            <summary>
            Creates a new CudaPageLockedHostMemory3D and allocates the memory on host. Using cuMemHostAlloc
            </summary>
            <param name="width">In elements</param>
            <param name="pitchInBytes">Width including alignment in bytes</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
            <param name="allocFlags"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaPageLockedHostMemory3D and allocates the memory on host. Using cuMemHostAlloc without flags.
            </summary>
            <param name="width">In elements</param>
            <param name="pitchInBytes">Width including alignment in bytes</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaPageLockedHostMemory3D and allocates the memory on host. Using cuMemHostAlloc without flags.<para/>
            Pitch is assumed to be width * sizeof(T). Using cuMemHostAlloc without flags.
            </summary>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)">
            <summary>
            Creates a new CudaPageLockedHostMemory3D and allocates the memory on host. Using cuMemHostAlloc without flags.<para/>
            Pitch is assumed to be width * sizeof(T). Using cuMemHostAlloc.
            </summary>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="depth">In elements</param>
            <param name="allocFlags"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.SynchronCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.SynchronCopyToDevice(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.SynchronCopyToHost(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.SynchronCopyToHost(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.SynchronCopyToArray3D(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Synchron copy host to 3D array
            </summary>
            <param name="deviceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.SynchronCopyToArray3D(ManagedCuda.CudaArray3D)">
            <summary>
            Synchron copy host to 3D Array
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.SynchronCopyFromArray3D(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Synchron copy 3D Array to host
            </summary>
            <param name="deviceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.SynchronCopyFromArray3D(ManagedCuda.CudaArray3D)">
            <summary>
            Synchron copy 3D Array to host
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="deviceVar"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.AsyncCopyFromDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.AsyncCopyFromDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="deviceVar"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.AsyncCopyToArray3D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy host to 3D array
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.AsyncCopyToArray3D(ManagedCuda.CudaArray3D,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy host to 3D Array
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.AsyncCopyFromArray3D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy 3D Array to host
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.AsyncCopyFromArray3D(ManagedCuda.CudaArray3D,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy 3D Array to host
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.GetDevicePointer">
            <summary>
            Returns the CUdeviceptr for pinned host memory mapped to device memory space. Only valid if context is created with flag <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.MapHost"/>
            </summary>
            <returns>Device Pointer</returns>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3D`1.GetAllocFlags">
            <summary>
            Passes back the flags that were specified when allocating the pinned host buffer
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3D`1.PinnedHostPointer">
            <summary>
            Pointer to pinned host memory.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3D`1.Width">
            <summary>
            Width in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3D`1.Height">
            <summary>
            Height in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3D`1.Depth">
            <summary>
            Depth in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3D`1.Pitch">
            <summary>
            Pitch in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3D`1.SizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3D`1.TypeSize">
            <summary>
            Type size in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3D`1.Item(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Access array per element.<para/>
            Each single access hast to trespass the managed/unmanged memory barrier. Access is therefor rather slow.
            </summary>
            <param name="x">X-index in elements</param>
            <param name="y">Y-index in elements</param>
            <param name="z">Z-index in elements</param>
            <returns></returns>
        </member>
        <member name="T:ManagedCuda.CudaPageLockedHostMemory3DEnumerator`1">
            <summary>
            Enumerator class for CudaPageLockedHostMemory3D
            </summary>
            <typeparam name="T_"></typeparam>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3DEnumerator`1.#ctor(ManagedCuda.CudaPageLockedHostMemory3D{`0})">
            <summary>
            
            </summary>
            <param name="memory"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3DEnumerator`1.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory3DEnumerator`1.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3DEnumerator`1.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory3DEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods">
            <summary>
            C# wrapper for the NVIDIA CUDA Driver API (--> cuda.h)
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.cuInit(ManagedCuda.BasicTypes.CUInitializationFlags)">
            <summary>
            Initializes the driver API and must be called before any other function from the driver API. Currently, 
            the Flags parameter must be <see cref="F:ManagedCuda.BasicTypes.CUInitializationFlags.None"/>. If <see cref="M:ManagedCuda.DriverAPINativeMethods.cuInit(ManagedCuda.BasicTypes.CUInitializationFlags)"/> has not been called, any function from the driver API will return 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>.
            </summary>
            <remarks>Before any call to the CUDA Driver API can be done, the API must be initialized with cuInit(0).</remarks>
            <param name="Flags">Currently, Flags must always be <see cref="F:ManagedCuda.BasicTypes.CUInitializationFlags.None"/>.</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.<remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.cuDriverGetVersion(System.Int32@)">
            <summary>
            Returns in <c>driverVersion</c> the version number of the installed CUDA driver. This function automatically returns
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/> if the driverVersion argument is NULL.
            </summary>
            <param name="driverVersion">Returns the CUDA driver version</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.<remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="P:ManagedCuda.DriverAPINativeMethods.Version">
            <summary>
            Gives the version of the wrapped api
            </summary>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.DeviceManagement">
            <summary>
            Combines all API calls for device management
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceGet(ManagedCuda.BasicTypes.CUdevice@,System.Int32)">
            <summary>
            Returns in <c>device</c> a device handle given an ordinal in the range [0, <see cref="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceGetCount(System.Int32@)"/>-1].
            </summary>
            <param name="device">Returned device handle</param>
            <param name="ordinal">Device number to get handle for</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceGetCount(System.Int32@)">
            <summary>
            Returns in <c>count</c> the number of devices with compute capability greater than or equal to 1.0 that are available for
            execution. If there is no such device, <see cref="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceGetCount(System.Int32@)"/> returns 0.
            </summary>
            <param name="count">Returned number of compute-capable devices</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceGetName(System.Byte[],System.Int32,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Returns an ASCII string identifying the device <c>dev</c> in the NULL-terminated string pointed to by name. <c>len</c> specifies
            the maximum length of the string that may be returned.
            </summary>
            <param name="name">Returned identifier string for the device</param>
            <param name="len">Maximum length of string to store in <c>name</c></param>
            <param name="dev">Device to get identifier string for</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceComputeCapability(System.Int32@,System.Int32@,ManagedCuda.BasicTypes.CUdevice)">
             <summary>
             Returns in <c>major</c> and <c>minor</c> the major and minor revision numbers that define the compute capability of the
            device <c>dev</c>.
             </summary>
             <param name="major">Major revision number</param>
             <param name="minor">Minor revision number</param>
             <param name="dev">Device handle</param>
             <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
             <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.
             <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceTotalMem_v2(ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Returns in <c>bytes</c> the total amount of memory available on the device <c>dev</c> in bytes.
            </summary>
            <param name="bytes">Returned memory available on device in bytes</param>
            <param name="dev">Device handle</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceGetProperties(ManagedCuda.BasicTypes.CUDeviceProperties@,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Returns in <c>prop</c> the (basic) properties of device <c>dev</c>. See <see cref="T:ManagedCuda.BasicTypes.CUDeviceProperties"/>.
            </summary>
            <param name="prop">Returned properties of device</param>
            <param name="dev">Device to get properties for</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceGetAttribute(System.Int32@,ManagedCuda.BasicTypes.CUDeviceAttribute,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Returns in <c>pi</c> the integer value of the attribute <c>attrib</c> on device <c>dev</c>. See <see cref="T:ManagedCuda.BasicTypes.CUDeviceAttribute"/>.
            </summary>
            <param name="pi">Returned device attribute value</param>
            <param name="attrib">Device attribute to query</param>
            <param name="dev">Device handle</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceGetByPCIBusId(ManagedCuda.BasicTypes.CUdevice@,System.Byte[])">
            <summary>
            Returns in <c>device</c> a device handle given a PCI bus ID string.
            </summary>
            <param name="dev">Returned device handle</param>
            <param name="pciBusId">String in one of the following forms: <para/>
            [domain]:[bus]:[device].[function]<para/>
            [domain]:[bus]:[device]<para/>
            [bus]:[device].[function]<para/>
            where domain, bus, device, and function are all hexadecimal values</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuDeviceGetPCIBusId(System.Byte[],System.Int32,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Returns an ASCII string identifying the device <c>dev</c> in the NULL-terminated
            string pointed to by <c>pciBusId</c>. <c>len</c> specifies the maximum length of the
            string that may be returned.
            </summary>
            <param name="pciBusId">Returned identifier string for the device in the following format
            [domain]:[bus]:[device].[function]<para/>
            where domain, bus, device, and function are all hexadecimal values.<para/>
            pciBusId should be large enough to store 13 characters including the NULL-terminator.</param>
            <param name="len">Maximum length of string to store in <c>name</c></param>
            <param name="dev">Device to get identifier string for</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuIpcGetEventHandle(ManagedCuda.BasicTypes.CUipcEventHandle@,ManagedCuda.BasicTypes.CUevent)">
            <summary>
            Takes as input a previously allocated event. This event must have been 
            created with the ::CU_EVENT_INTERPROCESS and ::CU_EVENT_DISABLE_TIMING 
            flags set. This opaque handle may be copied into other processes and
            opened with ::cuIpcOpenEventHandle to allow efficient hardware
            synchronization between GPU work in different processes.
            <para/>
            After the event has been been opened in the importing process, 
            ::cuEventRecord, ::cuEventSynchronize, ::cuStreamWaitEvent and 
            ::cuEventQuery may be used in either process. Performing operations 
            on the imported event after the exported event has been freed 
            with ::cuEventDestroy will result in undefined behavior.
            <para/>
            IPC functionality is restricted to devices with support for unified 
            addressing on Linux operating systems.
            </summary>
            <param name="pHandle">Pointer to a user allocated CUipcEventHandle in which to return the opaque event handle</param>
            <param name="cuevent">Event allocated with ::CU_EVENT_INTERPROCESS and  ::CU_EVENT_DISABLE_TIMING flags.</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorMapFailed"/></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuIpcOpenEventHandle(ManagedCuda.BasicTypes.CUevent@,ManagedCuda.BasicTypes.CUipcEventHandle)">
            <summary>
            Opens an interprocess event handle exported from another process with 
            ::cuIpcGetEventHandle. This function returns a ::CUevent that behaves like 
            a locally created event with the ::CU_EVENT_DISABLE_TIMING flag specified. 
            This event must be freed with ::cuEventDestroy.
            <para/>
            Performing operations on the imported event after the exported event has 
            been freed with ::cuEventDestroy will result in undefined behavior.
            <para/>
            IPC functionality is restricted to devices with support for unified 
            addressing on Linux operating systems.
            </summary>
            <param name="phEvent">Returns the imported event</param>
            <param name="handle">Interprocess handle to open</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorMapFailed"/></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuIpcGetMemHandle(ManagedCuda.BasicTypes.CUipcMemHandle@,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Takes a pointer to the base of an existing device memory allocation created 
            with ::cuMemAlloc and exports it for use in another process. This is a 
            lightweight operation and may be called multiple times on an allocation
            without adverse effects. 
            <para/>
            If a region of memory is freed with ::cuMemFree and a subsequent call
            to ::cuMemAlloc returns memory with the same device address,
            ::cuIpcGetMemHandle will return a unique handle for the
             new memory. 
            <para/>
            IPC functionality is restricted to devices with support for unified 
            addressing on Linux operating systems.
            </summary>
            <param name="pHandle">Pointer to user allocated ::CUipcMemHandle to return the handle in.</param>
            <param name="dptr">Base pointer to previously allocated device memory </param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorMapFailed"/></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuIpcOpenMemHandle(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.CUipcMemHandle,System.UInt32)">
            <summary>
            Maps memory exported from another process with ::cuIpcGetMemHandle into
            the current device address space. For contexts on different devices 
            ::cuIpcOpenMemHandle can attempt to enable peer access between the
            devices as if the user called ::cuCtxEnablePeerAccess. This behavior is 
            controlled by the ::CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS flag. 
            ::cuDeviceCanAccessPeer can determine if a mapping is possible.
            <para/>
            Contexts that may open ::CUipcMemHandles are restricted in the following way.
            ::CUipcMemHandles from each ::CUdevice in a given process may only be opened 
            by one ::CUcontext per ::CUdevice per other process.
            <para/>
            Memory returned from ::cuIpcOpenMemHandle must be freed with
            ::cuIpcCloseMemHandle.
            <para/>
            Calling ::cuMemFree on an exported memory region before calling
            ::cuIpcCloseMemHandle in the importing context will result in undefined
            behavior.
            <para/>
            IPC functionality is restricted to devices with support for unified 
            addressing on Linux operating systems.
            </summary>
            <param name="pdptr">Returned device pointer</param>
            <param name="handle">::CUipcMemHandle to open</param>
            <param name="Flags">Flags for this operation. Must be specified as ::CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorMapFailed"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorTooManyPeers"/></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.DeviceManagement.cuIpcCloseMemHandle(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Unmaps memory returnd by ::cuIpcOpenMemHandle. The original allocation
            in the exporting process as well as imported mappings in other processes
            will be unaffected.
            <para/>
            Any resources used to enable peer access will be freed if this is the
            last mapping using them.
            <para/>
            IPC functionality is restricted to devices with support for unified 
             addressing on Linux operating systems.
            </summary>
            <param name="dptr">Device pointer returned by ::cuIpcOpenMemHandle</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorMapFailed"/></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.ContextManagement">
            <summary>
            Combines all API calls for context management
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Creates a new CUDA context and associates it with the calling thread. The <c>flags</c> parameter is described in <see cref="T:ManagedCuda.BasicTypes.CUCtxFlags"/>. The
            context is created with a usage count of 1 and the caller of <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> must call <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/> or <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDetach(ManagedCuda.BasicTypes.CUcontext)"/>
            when done using the context. If a context is already current to the thread, it is supplanted by the newly created context
            and may be restored by a subsequent call to <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent(ManagedCuda.BasicTypes.CUcontext@)"/>.
            </summary>
            <param name="pctx">Returned context handle of the new context</param>
            <param name="flags">Context creation flags. See <see cref="T:ManagedCuda.BasicTypes.CUCtxFlags"/></param>
            <param name="dev">Device to create context on</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)">
            <summary>
            Destroys the CUDA context specified by <c>ctx</c>. If the context usage count is not equal to 1, or the context is current
            to any CPU thread other than the current one, this function fails. Floating contexts (detached from a CPU thread via
            <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent(ManagedCuda.BasicTypes.CUcontext@)"/>) may be destroyed by this function.
            </summary>
            <param name="ctx">Context to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy_v2(ManagedCuda.BasicTypes.CUcontext)">
            <summary>
            Destroys the CUDA context specified by <c>ctx</c>. The context <c>ctx</c> will be destroyed regardless of how many threads it is current to.
            It is the responsibility of the calling function to ensure that no API call is issued to <c>ctx</c> while cuCtxDestroy_v2() is executing.
            If <c>ctx</c> is current to the calling thread then <c>ctx</c> will also be 
            popped from the current thread's context stack (as though cuCtxPopCurrent()
            were called).  If <c>ctx</c> is current to other threads, then <c>ctx</c> will
            remain current to those threads, and attempting to access <c>ctx</c> from
            those threads will result in the error <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorContextIsDestroyed"/>.
            </summary>
            <param name="ctx">Context to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>,  <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorContextIsDestroyed"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxAttach(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxAttachFlags)">
            <summary>
            Increments the usage count of the context and passes back a context handle in <c>pctx</c> that must be passed to <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDetach(ManagedCuda.BasicTypes.CUcontext)"/>
            when the application is done with the context. <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxAttach(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxAttachFlags)"/> fails if there is no context current to the
            thread. Currently, the <c>flags</c> parameter must be <see cref="F:ManagedCuda.BasicTypes.CUCtxAttachFlags.None"/>.
            </summary>
            <param name="pctx">Returned context handle of the current context</param>
            <param name="flags">Context attach flags (must be <see cref="F:ManagedCuda.BasicTypes.CUCtxAttachFlags.None"/>)</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDetach(ManagedCuda.BasicTypes.CUcontext)">
            <summary>
            Decrements the usage count of the context <c>ctx</c>, and destroys the context if the usage count goes to 0. The context
            must be a handle that was passed back by <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> or <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxAttach(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxAttachFlags)"/>, and must be current to the calling thread.
            </summary>
            <param name="ctx">Context to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPushCurrent(ManagedCuda.BasicTypes.CUcontext)">
            <summary>
            Pushes the given context <c>ctx</c> onto the CPU thread’s stack of current contexts. The specified context becomes the
            CPU thread’s current context, so all CUDA functions that operate on the current context are affected.<para/>
            The previous current context may be made current again by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/> or <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent(ManagedCuda.BasicTypes.CUcontext@)"/>.<para/>
            The context must be "floating," i.e. not attached to any thread. Contexts are made to float by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent(ManagedCuda.BasicTypes.CUcontext@)"/>.
            </summary>
            <param name="ctx">Floating context to attach</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPushCurrent_v2(ManagedCuda.BasicTypes.CUcontext)">
            <summary>
            Pushes the given context <c>ctx</c> onto the CPU thread’s stack of current contexts. The specified context becomes the
            CPU thread’s current context, so all CUDA functions that operate on the current context are affected.<para/>
            The previous current context may be made current again by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/> or <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent(ManagedCuda.BasicTypes.CUcontext@)"/>.<para/>
            The context must be "floating," i.e. not attached to any thread. Contexts are made to float by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent(ManagedCuda.BasicTypes.CUcontext@)"/>.
            </summary>
            <param name="ctx">Floating context to attach</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent(ManagedCuda.BasicTypes.CUcontext@)">
            <summary>
            Pops the current CUDA context from the CPU thread. The CUDA context must have a usage count of 1. CUDA contexts
            have a usage count of 1 upon creation; the usage count may be incremented with <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxAttach(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxAttachFlags)"/> and decremented
            with <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDetach(ManagedCuda.BasicTypes.CUcontext)"/>.<para/>
            If successful, <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent(ManagedCuda.BasicTypes.CUcontext@)"/> passes back the old context handle in <c>pctx</c>. That context may then be made current
            to a different CPU thread by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPushCurrent(ManagedCuda.BasicTypes.CUcontext)"/>.<para/>
            Floating contexts may be destroyed by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/>.<para/>
            If a context was current to the CPU thread before <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> or <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPushCurrent(ManagedCuda.BasicTypes.CUcontext)"/> was called, this function makes
            that context current to the CPU thread again.
            </summary>
            <param name="pctx">Returned new context handle</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent_v2(ManagedCuda.BasicTypes.CUcontext@)">
            <summary>
            Pops the current CUDA context from the CPU thread. The CUDA context must have a usage count of 1. CUDA contexts
            have a usage count of 1 upon creation; the usage count may be incremented with <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxAttach(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxAttachFlags)"/> and decremented
            with <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDetach(ManagedCuda.BasicTypes.CUcontext)"/>.<para/>
            If successful, <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPopCurrent(ManagedCuda.BasicTypes.CUcontext@)"/> passes back the old context handle in <c>pctx</c>. That context may then be made current
            to a different CPU thread by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPushCurrent(ManagedCuda.BasicTypes.CUcontext)"/>.<para/>
            Floating contexts may be destroyed by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxDestroy(ManagedCuda.BasicTypes.CUcontext)"/>.<para/>
            If a context was current to the CPU thread before <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/> or <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxPushCurrent(ManagedCuda.BasicTypes.CUcontext)"/> was called, this function makes
            that context current to the CPU thread again.
            </summary>
            <param name="pctx">Returned new context handle</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxSetCurrent(ManagedCuda.BasicTypes.CUcontext)">
            <summary>
            Binds the specified CUDA context to the calling CPU thread.
            If <c>ctx</c> is NULL then the CUDA context previously bound to the
            calling CPU thread is unbound and <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/> is returned.
            <para/>
            If there exists a CUDA context stack on the calling CPU thread, this
            will replace the top of that stack with <c>ctx</c>.  
            If <c>ctx</c> is NULL then this will be equivalent to popping the top
            of the calling CPU thread's CUDA context stack (or a no-op if the
            calling CPU thread's CUDA context stack is empty).
            </summary>
            <param name="ctx">Context to bind to the calling CPU thread</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxGetCurrent(ManagedCuda.BasicTypes.CUcontext@)">
            <summary>
            Returns in <c>ctx</c> the CUDA context bound to the calling CPU thread.
            If no context is bound to the calling CPU thread then <c>ctx</c> is
            set to NULL and <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/> is returned.
            </summary>
            <param name="pctx">Returned context handle</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxGetDevice(ManagedCuda.BasicTypes.CUdevice@)">
            <summary>
            Returns in <c>device</c> the ordinal of the current context’s device.
            </summary>
            <param name="device">Returned device ID for the current context</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxSynchronize">
            <summary>
            Blocks until the device has completed all preceding requested tasks. <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxSynchronize"/> returns an error if one of the
            preceding tasks failed. If the context was created with the <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.BlockingSync"/> flag, the CPU thread will
            block until the GPU context has finished its work.
            </summary>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxGetApiVersion(ManagedCuda.BasicTypes.CUcontext,System.UInt32@)">
            <summary>
            Returns the API version used to create <c>ctx</c> in <c>version</c>. If <c>ctx</c>
            is NULL, returns the API version used to create the currently bound
            context.<para/>
            This wil return the API version used to create a context (for example,
            3010 or 3020), which library developers can use to direct callers to a
            specific API version. Note that this API version may not be the same as
            returned by <see cref="M:ManagedCuda.DriverAPINativeMethods.cuDriverGetVersion(System.Int32@)"/>.
            </summary>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxGetCacheConfig(ManagedCuda.BasicTypes.CUFuncCache@)">
            <summary>
            On devices where the L1 cache and shared memory use the same hardware
            resources, this function returns through <c>pconfig</c> the preferred cache configuration
            for the current context. This is only a preference. The driver will use
            the requested configuration if possible, but it is free to choose a different
            configuration if required to execute functions.<para/>
            This will return a <c>pconfig</c> of <see cref="F:ManagedCuda.BasicTypes.CUFuncCache.PreferNone"/> on devices
            where the size of the L1 cache and shared memory are fixed.
            </summary>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxSetCacheConfig(ManagedCuda.BasicTypes.CUFuncCache)">
            <summary>
            On devices where the L1 cache and shared memory use the same hardware
            resources, this sets through <c>config</c> the preferred cache configuration for
            the current context. This is only a preference. The driver will use
            the requested configuration if possible, but it is free to choose a different
            configuration if required to execute the function. Any function preference
            set via <see cref="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetCacheConfig(ManagedCuda.BasicTypes.CUfunction,ManagedCuda.BasicTypes.CUFuncCache)"/> will be preferred over this context-wide
            setting. Setting the context-wide cache configuration to
            <see cref="F:ManagedCuda.BasicTypes.CUFuncCache.PreferNone"/> will cause subsequent kernel launches to prefer
            to not change the cache configuration unless required to launch the kernel.<para/>
            This setting does nothing on devices where the size of the L1 cache and
            shared memory are fixed.<para/>
            Launching a kernel with a different preference than the most recent
            preference setting may insert a device-side synchronization point.
            </summary>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxGetSharedMemConfig(ManagedCuda.BasicTypes.CUsharedconfig@)">
             <summary>
             Returns the current shared memory configuration for the current context.
             <para/>
             This function will return in \p pConfig the current size of shared memory banks
             in the current context. On devices with configurable shared memory banks, 
             <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxSetSharedMemConfig(ManagedCuda.BasicTypes.CUsharedconfig)"/> can be used to change this setting, so that all 
             subsequent kernel launches will by default use the new bank size. When 
             <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxGetSharedMemConfig(ManagedCuda.BasicTypes.CUsharedconfig@)"/> is called on devices without configurable shared 
             memory, it will return the fixed bank size of the hardware.
            <para/>
             The returned bank configurations can be either:
             - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.FourByteBankSize"/>: set shared memory bank width to
               be natively four bytes.
             - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.EightByteBankSize"/>: set shared memory bank width to
               be natively eight bytes.
             </summary>
             <param name="pConfig">returned shared memory configuration</param>
             <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
             <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxSetSharedMemConfig(ManagedCuda.BasicTypes.CUsharedconfig)">
            <summary>
            Sets the shared memory configuration for the current context.<para/>
            On devices with configurable shared memory banks, this function will set
            the context's shared memory bank size which is used for subsequent kernel 
            launches. <para/> 
            Changed the shared memory configuration between launches may insert a device
            side synchronization point between those launches.<para/>
            Changing the shared memory bank size will not increase shared memory usage
            or affect occupancy of kernels, but may have major effects on performance. 
            Larger bank sizes will allow for greater potential bandwidth to shared memory,
            but will change what kinds of accesses to shared memory will result in bank 
            conflicts.<para/>
            This function will do nothing on devices with fixed shared memory bank size.
            <para/>
            The supported bank configurations are:
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.DefaultBankSize"/>: set bank width to the default initial
              setting (currently, four bytes).
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.FourByteBankSize"/>: set shared memory bank width to
              be natively four bytes.
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.EightByteBankSize"/>: set shared memory bank width to
              be natively eight bytes.
            </summary>
            <param name="config">requested shared memory configuration</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.ModuleManagement">
            <summary>
            Combines all API calls for module management
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleLoad(ManagedCuda.BasicTypes.CUmodule@,System.String)">
            <summary>
            Takes a filename <c>fname</c> and loads the corresponding module <c>module</c> into the current context. The CUDA driver API
            does not attempt to lazily allocate the resources needed by a module; if the memory for functions and data (constant
            and global) needed by the module cannot be allocated, <see cref="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleLoad(ManagedCuda.BasicTypes.CUmodule@,System.String)"/> fails. The file should be a <c>cubin</c> file as output
            by <c>nvcc</c> or a <c>PTX</c> file, either as output by <c>nvcc</c> or handwrtten.
            </summary>
            <param name="module">Returned module</param>
            <param name="fname">Filename of module to load</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorFileNotFound"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectSymbolNotFound"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectInitFailed"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleLoadData(ManagedCuda.BasicTypes.CUmodule@,System.Byte[])">
            <summary>
            Takes a byte[] as <c>image</c> and loads the corresponding module <c>module</c> into the current context. The byte array may be obtained
            by mapping a <c>cubin</c> or <c>PTX</c> file, passing a <c>cubin</c> or <c>PTX</c> file as a <c>null</c>-terminated text string.<para/>
            The byte[] is a replacement for the original pointer.
            </summary>
            <param name="module">Returned module</param>
            <param name="image">Module data to load</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectSymbolNotFound"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectInitFailed"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleLoadDataEx(ManagedCuda.BasicTypes.CUmodule@,System.Byte[],System.UInt32,ManagedCuda.BasicTypes.CUJITOption[],System.IntPtr[])">
            <summary>
            Takes a byte[] as <c>image</c> and loads the corresponding module <c>module</c> into the current context. The byte array may be obtained
            by mapping a <c>cubin</c> or <c>PTX</c> file, passing a <c>cubin</c> or <c>PTX</c> file as a <c>null</c>-terminated text string. <para/>
            Options are passed as an array via <c>options</c> and any corresponding parameters are passed
            in <c>optionValues</c>. The number of total options is supplied via <c>numOptions</c>. Any outputs will be returned via
            <c>optionValues</c>. Supported options are definen in <see cref="T:ManagedCuda.BasicTypes.CUJITOption"/>.<para/>
            The options values are currently passed in <c>IntPtr</c>-type and should then be cast into their real type. This might change in future.
            </summary>
            <param name="module">Returned module</param>
            <param name="image">Module data to load</param>
            <param name="numOptions">Number of options</param>
            <param name="options">Options for JIT</param>
            <param name="optionValues">Option values for JIT</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNoBinaryForGPU"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectSymbolNotFound"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectInitFailed"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleLoadFatBinary(ManagedCuda.BasicTypes.CUmodule@,System.Byte[])">
            <summary>
            Takes a byte[] as <c>fatCubin</c> and loads the corresponding module <c>module</c> into the current context. The byte[]
            represents a <c>fat binary</c> object, which is a collection of different <c>cubin</c> files, all representing the same device code, but
            compiled and optimized for different architectures. Prior to CUDA 4.0, there was no documented API for constructing and using
            fat binary objects by programmers. Starting with CUDA 4.0, fat binary objects can be constructed by providing the -fatbin option to nvcc.
            More information can be found in the <c>nvcc</c> document.
            </summary>
            <param name="module">Returned module</param>
            <param name="fatCubin">Fat binary to load</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNoBinaryForGPU"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectSymbolNotFound"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectInitFailed"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleUnload(ManagedCuda.BasicTypes.CUmodule)">
            <summary>
            Unloads a module <c>hmod</c> from the current context.
            </summary>
            <param name="hmod">Module to unload</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleGetFunction(ManagedCuda.BasicTypes.CUfunction@,ManagedCuda.BasicTypes.CUmodule,System.String)">
            <summary>
            Returns in <c>hfunc</c> the handle of the function of name <c>name</c> located in module <c>hmod</c>. If no function of that name
            exists, <see cref="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleGetFunction(ManagedCuda.BasicTypes.CUfunction@,ManagedCuda.BasicTypes.CUmodule,System.String)"/> returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>.
            </summary>
            <param name="hfunc">Returned function handle</param>
            <param name="hmod">Module to retrieve function from</param>
            <param name="name">Name of function to retrieve</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleGetGlobal_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CUmodule,System.String)">
            <summary>
            Returns in <c>dptr</c> and <c>bytes</c> the base pointer and size of the global of name <c>name</c> located in module <c>hmod</c>. If no
            variable of that name exists, <see cref="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleGetGlobal_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CUmodule,System.String)"/> returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>. Both parameters <c>dptr</c>
            and <c>bytes</c> are optional. If one of them is <c>null</c>, it is ignored.
            </summary>
            <param name="dptr">Returned global device pointer</param>
            <param name="bytes">Returned global size in bytes</param>
            <param name="hmod">Module to retrieve global from</param>
            <param name="name">Name of global to retrieve</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleGetTexRef(ManagedCuda.BasicTypes.CUtexref@,ManagedCuda.BasicTypes.CUmodule,System.String)">
            <summary>
            Returns in <c>pTexRef</c> the handle of the texture reference of name <c>name</c> in the module <c>hmod</c>. If no texture reference
            of that name exists, <see cref="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleGetSurfRef(ManagedCuda.BasicTypes.CUsurfref@,ManagedCuda.BasicTypes.CUmodule,System.String)"/> returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>. This texture reference handle
            should not be destroyed, since it will be destroyed when the module is unloaded.
            </summary>
            <param name="pTexRef">Returned texture reference</param>
            <param name="hmod">Module to retrieve texture reference from</param>
            <param name="name">Name of texture reference to retrieve</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleGetSurfRef(ManagedCuda.BasicTypes.CUsurfref@,ManagedCuda.BasicTypes.CUmodule,System.String)">
            <summary>
            Returns in <c>pSurfRef</c> the handle of the surface reference of name <c>name</c> in the module <c>hmod</c>. If no surface reference
            of that name exists, <see cref="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleGetSurfRef(ManagedCuda.BasicTypes.CUsurfref@,ManagedCuda.BasicTypes.CUmodule,System.String)"/> returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>.
            </summary>
            <param name="pSurfRef">Returned surface reference</param>
            <param name="hmod">Module to retrieve surface reference from</param>
            <param name="name">Name of surface reference to retrieve</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotFound"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.MemoryManagement">
            <summary>
            Combines all API calls for memory management
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemGetInfo_v2(ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Returns in <c>free</c> and <c>total</c> respectively, the free and total amount of memory available for allocation by the 
            CUDA context, in bytes.
            </summary>
            <param name="free">Returned free memory in bytes</param>
            <param name="total">Returned total memory in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAlloc_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Allocates <c>bytesize</c> bytes of linear memory on the device and returns in <c>dptr</c> a pointer to the allocated memory.
            The allocated memory is suitably aligned for any kind of variable. The memory is not cleared. If <c>bytesize</c> is 0,
            <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAlloc_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT)"/> returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            </summary>
            <param name="dptr">Returned device pointer</param>
            <param name="bytesize">Requested allocation size in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)">
            <summary>
            Allocates at least <c>WidthInBytes * Height</c> bytes of linear memory on the device and returns in <c>dptr</c> a pointer
            to the allocated memory. The function may pad the allocation to ensure that corresponding pointers in any given
            row will continue to meet the alignment requirements for coalescing as the address is updated from row to row. <para/>
            <c>ElementSizeBytes</c> specifies the size of the largest reads and writes that will be performed on the memory range.<para/>
            <c>ElementSizeBytes</c> may be 4, 8 or 16 (since coalesced memory transactions are not possible on other data sizes). If
            <c>ElementSizeBytes</c> is smaller than the actual read/write size of a kernel, the kernel will run correctly, but possibly
            at reduced speed. The pitch returned in <c>pPitch</c> by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/> is the width in bytes of the allocation. The
            intended usage of pitch is as a separate parameter of the allocation, used to compute addresses within the 2D array.<para/>
            Given the row and column of an array element of type T, the address is computed as:<para/>
            <code>T * pElement = (T*)((char*)BaseAddress + Row * Pitch) + Column;</code><para/>
            The pitch returned by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/> is guaranteed to work with <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy2D_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@)"/> under all circumstances. For
            allocations of 2D arrays, it is recommended that programmers consider performing pitch allocations using <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>.
            Due to alignment restrictions in the hardware, this is especially true if the application will be performing
            2D memory copies between different regions of device memory (whether linear memory or CUDA arrays). <para/>
            The byte alignment of the pitch returned by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/> is guaranteed to match or exceed the alignment
            requirement for texture binding with <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetAddress2D_v2(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUDAArrayDescriptor@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)"/>.
            </summary>
            <param name="dptr">Returned device pointer</param>
            <param name="pPitch">Returned pitch of allocation in bytes</param>
            <param name="WidthInBytes">Requested allocation width in bytes</param>
            <param name="Height">Requested allocation height in rows</param>
            <param name="ElementSizeBytes">Size of largest reads/writes for range</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemFree_v2(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Frees the memory space pointed to by <c>dptr</c>, which must have been returned by a previous call to <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAlloc_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT)"/> or
            <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>.
            </summary>
            <param name="dptr">Pointer to memory to free</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemGetAddressRange_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Returns the base address in <c>pbase</c> and size in <c>psize</c> of the allocation by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAlloc_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT)"/> or <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>
            that contains the input pointer <c>dptr</c>. Both parameters <c>pbase</c> and <c>psize</c> are optional. If one of them is <c>null</c>, it is
            ignored.
            </summary>
            <param name="pbase">Returned base address</param>
            <param name="psize">Returned size of device memory allocation</param>
            <param name="dptr">Device pointer to query</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocHost_v2(System.IntPtr@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Allocates <c>bytesize</c> bytes of host memory that is page-locked and accessible to the device. The driver tracks the virtual
            memory ranges allocated with this function and automatically accelerates calls to functions such as <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.IntPtr,ManagedCuda.BasicTypes.SizeT)"/>.
            Since the memory can be accessed directly by the device, it can be read or written with much higher bandwidth than
            pageable memory obtained with functions such as <c>malloc()</c>. Allocating excessive amounts of memory with <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocHost_v2(System.IntPtr@,ManagedCuda.BasicTypes.SizeT)"/>
            may degrade system performance, since it reduces the amount of memory available to the system for paging.
            As a result, this function is best used sparingly to allocate staging areas for data exchange between host and device.
            </summary>
            <param name="pp">Returned host pointer to page-locked memory</param>
            <param name="bytesize">Requested allocation size in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemFreeHost(System.IntPtr)">
            <summary>
            Frees the memory space pointed to by <c>p</c>, which must have been returned by a previous call to <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocHost_v2(System.IntPtr@,ManagedCuda.BasicTypes.SizeT)"/>.
            </summary>
            <param name="p">Pointer to memory to free</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostAlloc(System.IntPtr@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)">
            <summary>
            Allocates <c>bytesize</c> bytes of host memory that is page-locked and accessible to the device. The driver tracks the virtual
            memory ranges allocated with this function and automatically accelerates calls to functions such as <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.IntPtr,ManagedCuda.BasicTypes.SizeT)"/>.
            Since the memory can be accessed directly by the device, it can be read or written with much higher bandwidth than
            pageable memory obtained with functions such as <c>malloc()</c>. Allocating excessive amounts of pinned
            memory may degrade system performance, since it reduces the amount of memory available to the system for paging.
            As a result, this function is best used sparingly to allocate staging areas for data exchange between host and device.<para/>
            For the <c>Flags</c> parameter see <see cref="T:ManagedCuda.BasicTypes.CUMemHostAllocFlags"/>.<para/>
            The CUDA context must have been created with the <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.MapHost"/> flag in order for the <see cref="F:ManagedCuda.BasicTypes.CUMemHostAllocFlags.DeviceMap"/>
            flag to have any effect.<para/>
            The <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.MapHost"/> flag may be specified on CUDA contexts for devices that do not support
            mapped pinned memory. The failure is deferred to <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostGetDevicePointer_v2(ManagedCuda.BasicTypes.CUdeviceptr@,System.IntPtr,System.Int32)"/> because the memory may be
            mapped into other CUDA contexts via the <see cref="F:ManagedCuda.BasicTypes.CUMemHostAllocFlags.Portable"/> flag. <para/>
            The memory allocated by this function must be freed with <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemFreeHost(System.IntPtr)"/>.<para/>
            Note all host memory allocated using <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostAlloc(System.IntPtr@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)"/> will automatically
            be immediately accessible to all contexts on all devices which support unified
            addressing (as may be queried using ::CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING).
            Unless the flag ::CU_MEMHOSTALLOC_WRITECOMBINED is specified, the device pointer 
            that may be used to access this host memory from those contexts is always equal 
            to the returned host pointer <c>pp</c>.  If the flag ::CU_MEMHOSTALLOC_WRITECOMBINED
            is specified, then the function <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostGetDevicePointer_v2(ManagedCuda.BasicTypes.CUdeviceptr@,System.IntPtr,System.Int32)"/> must be used
            to query the device pointer, even if the context supports unified addressing.
            See \ref CUDA_UNIFIED for additional details.
            </summary>
            <param name="pp">Returned host pointer to page-locked memory</param>
            <param name="bytesize">Requested allocation size in bytes</param>
            <param name="Flags">Flags for allocation request</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostGetDevicePointer_v2(ManagedCuda.BasicTypes.CUdeviceptr@,System.IntPtr,System.Int32)">
            <summary>
            Passes back the device pointer <c>pdptr</c> corresponding to the mapped, pinned host buffer <c>p</c> allocated by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostAlloc(System.IntPtr@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)"/>.
            <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostGetDevicePointer_v2(ManagedCuda.BasicTypes.CUdeviceptr@,System.IntPtr,System.Int32)"/> will fail if the <see cref="F:ManagedCuda.BasicTypes.CUMemHostAllocFlags.DeviceMap"/> flag was not specified at the
            time the memory was allocated, or if the function is called on a GPU that does not support mapped pinned memory.
            Flags provides for future releases. For now, it must be set to 0.
            </summary>
            <param name="pdptr">Returned device pointer</param>
            <param name="p">Host pointer</param>
            <param name="Flags">Options (must be 0)</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostGetFlags(ManagedCuda.BasicTypes.CUMemHostAllocFlags@,System.IntPtr)">
            <summary>
            Passes back the flags <c>pFlags</c> that were specified when allocating the pinned host buffer <c>p</c> allocated by
            <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostAlloc(System.IntPtr@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)"/>.<para/>
            <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostGetFlags(ManagedCuda.BasicTypes.CUMemHostAllocFlags@,System.IntPtr)"/> will fail if the pointer does not reside in an allocation performed by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocHost_v2(System.IntPtr@,ManagedCuda.BasicTypes.SizeT)"/> or
            <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostAlloc(System.IntPtr@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)"/>.
            </summary>
            <param name="pFlags">Returned flags</param>
            <param name="p">Host pointer</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostRegister(System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostRegisterFlags)">
            <summary>
            Page-locks the memory range specified by <c>p</c> and <c>bytesize</c> and maps it
            for the device(s) as specified by <c>Flags</c>. This memory range also is added
            to the same tracking mechanism as ::cuMemHostAlloc to automatically accelerate
            calls to functions such as <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.dim3[],ManagedCuda.BasicTypes.SizeT)"/>. Since the memory can be accessed 
            directly by the device, it can be read or written with much higher bandwidth 
            than pageable memory that has not been registered.  Page-locking excessive
            amounts of memory may degrade system performance, since it reduces the amount
            of memory available to the system for paging. As a result, this function is
            best used sparingly to register staging areas for data exchange between
            host and device.<para/>
            The pointer <c>p</c> and size <c>bytesize</c> must be aligned to the host page size (4 KB).<para/>
            The memory page-locked by this function must be unregistered with <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostUnregister(System.IntPtr)"/>
            </summary>
            <param name="p">Host pointer to memory to page-lock</param>
            <param name="byteSize">Size in bytes of the address range to page-lock</param>
            <param name="Flags">Flags for allocation request</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostUnregister(System.IntPtr)">
            <summary>
            Unmaps the memory range whose base address is specified by <c>p</c>, and makes it pageable again.<para/>
            The base address must be the same one specified to <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemHostRegister(System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostRegisterFlags)"/>.
            </summary>
            <param name="p">Host pointer to memory to page-lock</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuPointerGetAttribute(System.IntPtr,ManagedCuda.BasicTypes.CUPointerAttribute,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Returns information about a pointer
            </summary>
            <param name="data">Returned pointer attribute value</param>
            <param name="attribute">Pointer attribute to query</param>
            <param name="ptr">Pointer</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2">
            <summary>
            Intra-device memcpy's done with these functions may execute in parallel with the CPU,
            but if host memory is involved, they wait until the copy is done before returning.
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies data between two pointers. <para/>
            <c>dst</c> and <c>src</c> are base pointers of the destination and source, respectively.  
            <c>ByteCount</c> specifies the number of bytes to copy.
            Note that this function infers the type of the transfer (host to host, host to 
            device, device to device, or device to host) from the pointer values.  This
            function is only allowed in contexts which support unified addressing.
            Note that this function is synchronous.
            </summary>
            <param name="dst">Destination unified virtual address space pointer</param>
            <param name="src">Source unified virtual address space pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyPeer(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device memory in one context to device memory in another
            context. <c>dstDevice</c> is the base device pointer of the destination memory 
            and <c>dstContext</c> is the destination context.  <c>srcDevice</c> is the base 
            device pointer of the source memory and <c>srcContext</c> is the source pointer.  
            <c>ByteCount</c> specifies the number of bytes to copy.
            <para/>
            Note that this function is asynchronous with respect to the host, but 
            serialized with respect all pending and future asynchronous work in to the 
            current context, <c>srcContext</c>, and <c>dstContext</c> (use <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyPeerAsync(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)"/> 
            to avoid this synchronization).
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="dstContext">Destination context</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="srcContext">Source context</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy3DPeer(ManagedCuda.BasicTypes.CUDAMemCpy3DPeer@)">
            <summary>
            Perform a 3D memory copy according to the parameters specified in
            <c>pCopy</c>.  See the definition of the <see cref="T:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer"/> structure
            for documentation of its parameters.<para/>
            Note that this function is synchronous with respect to the host only if
            the source or destination memory is of type ::CU_MEMORYTYPE_HOST.
            Note also that this copy is serialized with respect all pending and future 
            asynchronous work in to the current context, the copy's source context,
            and the copy's destination context (use <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy3DPeerAsync(ManagedCuda.BasicTypes.CUDAMemCpy3DPeer@,ManagedCuda.BasicTypes.CUstream)"/> to avoid 
            this synchronization).
            </summary>
            <param name="pCopy">Parameters for the memory copy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.dim3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.double1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.double2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuDoubleComplex[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuDoubleReal[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuFloatComplex[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuFloatReal[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.SByte[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Int16[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Int32[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt64[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Int64[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Single[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Double[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.dim3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.char4@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uchar4@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.short4@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ushort4@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.int4@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.uint4@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.long4@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.ulong4@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float3@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.float4@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.double1@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.double2@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuDoubleComplex@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuDoubleReal@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuFloatComplex@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.VectorTypes.cuFloatReal@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.SByte@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Int16@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Int32@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt64@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Int64@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Single@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Double@,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.dim3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.char1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.char2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.char3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.char4[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uchar1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uchar2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uchar3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uchar4[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.short1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.short2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.short3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.short4[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ushort1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ushort2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ushort3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ushort4[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.int1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.int2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.int3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.int4[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uint1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uint2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uint3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uint4[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.long1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.long2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.long3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.long4[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ulong1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ulong2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ulong3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ulong4[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.float1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.float2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.float3[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.float4[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.double1[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.double2[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.cuDoubleComplex[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.cuDoubleReal[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.cuFloatComplex[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns> 
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.cuFloatReal[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Byte[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.SByte[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.UInt16[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Int16[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.UInt32[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Int32[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.UInt64[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Int64[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Single[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Double[],ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.dim3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.char1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.char2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.char3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.char4@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uchar1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uchar2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uchar3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uchar4@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.short1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.short2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.short3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.short4@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ushort1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ushort2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ushort3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ushort4@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.int1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.int2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.int3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.int4@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uint1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uint2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uint3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.uint4@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.long1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.long2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.long3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.long4@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ulong1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ulong2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ulong3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.ulong4@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.float1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.float2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.float3@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.float4@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.double1@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.double2@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.cuDoubleComplex@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.cuDoubleReal@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.cuFloatComplex@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(ManagedCuda.VectorTypes.cuFloatReal@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Byte@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.SByte@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.UInt16@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Int16@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.UInt32@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Int32@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.UInt64@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Int64@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Single@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.Double@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoH_v2(System.IntPtr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is synchronous.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device memory to device memory. <c>dstDevice</c> and <c>srcDevice</c> are the base pointers of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is asynchronous.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyDtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from device memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting index of the destination data. <c>srcDevice</c> specifies the base pointer of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoD_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to device memory. <c>dstDevice</c> specifies the base pointer of the destination and
            must be naturally aligned with the CUDA array elements. <c>srcArray</c> and <c>srcOffset</c> specify the CUDA array
            handle and the offset in bytes into the array where the copy is to begin. <c>ByteCount</c> specifies the number of bytes to
            copy and must be evenly divisible by the array element size.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes. Must be evenly divisible by the array element size.</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.dim3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.char1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.char2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.char3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.char4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.uchar1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.uchar2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.uchar3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.uchar4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.short1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.short2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.short3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.short4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.ushort1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.ushort2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.ushort3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.ushort4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.int1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.int2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.int3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.int4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.uint1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.uint2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.uint3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.uint4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.long1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.long2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.long3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.long4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.ulong1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.ulong2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.ulong3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.ulong4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.float1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.float2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.float3[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.float4[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.double1[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.double2[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.cuDoubleComplex[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.cuDoubleReal[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.cuFloatComplex[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.VectorTypes.cuFloatReal[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.Byte[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.SByte[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.UInt16[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.Int16[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.UInt32[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.Int32[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.UInt64[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.Int64[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.Single[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.Double[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyHtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>pSrc</c> specifies the base address of the source. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.dim3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.char1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.char2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.char3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.char4[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.uchar1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.uchar2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.uchar3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.uchar4[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.short1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.short2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.short3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.short4[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.ushort1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.ushort2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.ushort3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.ushort4[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.int1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.int2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.int3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.int4[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.uint1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.uint2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.uint3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.uint4[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.long1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.long2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.long3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.long4[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.ulong1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.ulong2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.ulong3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.ulong4[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.float1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.float2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.float3[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.float4[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.double1[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.double2[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.cuDoubleComplex[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.cuDoubleReal[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.cuFloatComplex[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(ManagedCuda.VectorTypes.cuFloatReal[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.Byte[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.SByte[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.UInt16[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.Int16[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.UInt32[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.Int32[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.UInt64[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.Int64[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.Single[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.Double[],ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoH_v2(System.IntPtr,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.
            </summary>
            <param name="dstHost">Destination device pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpyAtoA_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copies from one 1D CUDA array to another. <c>dstArray</c> and <c>srcArray</c> specify the handles of the destination and
            source CUDA arrays for the copy, respectively. <c>dstOffset</c> and <c>srcOffset</c> specify the destination and source
            offsets in bytes into the CUDA arrays. <c>ByteCount</c> is the number of bytes to be copied. The size of the elements
            in the CUDA arrays need not be the same format, but the elements must be the same size; and count must be evenly
            divisible by that size.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy2D_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@)">
            <summary>
            Perform a 2D memory copy according to the parameters specified in <c>pCopy</c>. See <see cref="T:ManagedCuda.BasicTypes.CUDAMemCpy2D"/>.
            <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy2D_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@)"/> returns an error if any pitch is greater than the maximum allowed (<see cref="F:ManagedCuda.BasicTypes.CUDeviceProperties.memPitch"/>).
            <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/> passes back pitches that always work with <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy2D_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@)"/>. On intra-device
            memory copies (device <![CDATA[<->]]> device, CUDA array <![CDATA[<->]]> device, CUDA array <![CDATA[<->]]> CUDA array), <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy2D_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@)"/> may fail
            for pitches not computed by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>. <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy2DUnaligned_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@)"/> does not have this restriction, but
            may run significantly slower in the cases where <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy2D_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@)"/> would have returned an error code.
            </summary>
            <param name="pCopy">Parameters for the memory copy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy2DUnaligned_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@)">
            <summary>
            Perform a 2D memory copy according to the parameters specified in <c>pCopy</c>. See <see cref="T:ManagedCuda.BasicTypes.CUDAMemCpy2D"/>.
            </summary>
            <param name="pCopy">Parameters for the memory copy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy3D_v2(ManagedCuda.BasicTypes.CUDAMemCpy3D@)">
            <summary>
            Perform a 3D memory copy according to the parameters specified in <c>pCopy</c>. See <see cref="T:ManagedCuda.BasicTypes.CUDAMemCpy3D"/>.<para/>
            The srcLOD and dstLOD members of the CUDAMemCpy3D structure must be set to 0.
            </summary>
            <param name="pCopy">Parameters for the memory copy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>            
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2">
            <summary>
            Any host memory involved must be DMA'able (e.g., allocated with cuMemAllocHost).
            memcpy's done with these functions execute in parallel with the CPU and, if
            the hardware is available, may execute in parallel with the GPU.
            Asynchronous memcpy must be accompanied by appropriate stream synchronization.
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Copies data between two pointers. 
            <c>dst</c> and <c>src</c> are base pointers of the destination and source, respectively.  
            <c>ByteCount</c> specifies the number of bytes to copy.
            Note that this function infers the type of the transfer (host to host, host to 
            device, device to device, or device to host) from the pointer values.  This
            function is only allowed in contexts which support unified addressing.
            Note that this function is asynchronous and can optionally be associated to 
            a stream by passing a non-zero <c>hStream</c> argument
            </summary>
            <param name="dst">Destination unified virtual address space pointer</param>
            <param name="src">Source unified virtual address space pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>   
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyPeerAsync(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Copies from device memory in one context to device memory in another
            context. <c>dstDevice</c> is the base device pointer of the destination memory 
            and <c>dstContext</c> is the destination context. <c>srcDevice</c> is the base 
            device pointer of the source memory and <c>srcContext</c> is the source pointer.  
            <c>ByteCount</c> specifies the number of bytes to copy.  Note that this function
            is asynchronous with respect to the host and all work in other streams in
            other devices.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="dstContext">Destination context</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="srcContext">Source context</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>   
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy3DPeerAsync(ManagedCuda.BasicTypes.CUDAMemCpy3DPeer@,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Perform a 3D memory copy according to the parameters specified in
            <c>pCopy</c>.  See the definition of the <see cref="T:ManagedCuda.BasicTypes.CUDAMemCpy3DPeer"/> structure
            for documentation of its parameters.
            </summary>
            <param name="pCopy">Parameters for the memory copy</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>   
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyHtoDAsync_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Copies from host memory to device memory. <c>dstDevice</c> and <c>srcHost</c> are the base addresses of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. <para/>
            <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyHtoDAsync_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)"/> is asynchronous and can optionally be associated to a stream by passing a non-zero <c>hStream</c>
            argument. It only works on page-locked memory and returns an error if a pointer to pageable memory is passed as
            input.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>   
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyDtoHAsync_v2(System.IntPtr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Copies from device to host memory. <c>dstHost</c> and <c>srcDevice</c> specify the base pointers of the destination and
            source, respectively. <c>ByteCount</c> specifies the number of bytes to copy.<para/>
            <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyDtoHAsync_v2(System.IntPtr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)"/> is asynchronous and can optionally be associated to a stream by passing a non-zero
            <c>hStream</c> argument. It only works on page-locked memory and returns an error if a pointer to pageable memory
            is passed as input.
            </summary>
            <param name="dstHost">Destination host pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>    
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyDtoDAsync_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Copies from device memory to device memory. <c>dstDevice</c> and <c>srcDevice</c> are the base pointers of the destination
            and source, respectively. <c>ByteCount</c> specifies the number of bytes to copy. Note that this function is asynchronous
            and can optionally be associated to a stream by passing a non-zero <c>hStream</c> argument.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="srcDevice">Source device pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>    
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyHtoAAsync_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Copies from host memory to a 1D CUDA array. <c>dstArray</c> and <c>dstOffset</c> specify the CUDA array handle and
            starting offset in bytes of the destination data. <c>srcHost</c> specifies the base address of the source. <c>ByteCount</c>
            specifies the number of bytes to copy.<para/>
            <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyHtoAAsync_v2(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)"/> is asynchronous and can optionally be associated to a stream by passing a non-zero
            <c>hStream</c> argument. It only works on page-locked memory and returns an error if a pointer to pageable memory
            is passed as input.
            </summary>
            <param name="dstArray">Destination array</param>
            <param name="dstOffset">Offset in bytes of destination array</param>
            <param name="srcHost">Source host pointer</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>    
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAtoHAsync_v2(System.IntPtr,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Copies from one 1D CUDA array to host memory. <c>dstHost</c> specifies the base pointer of the destination. <c>srcArray</c>
            and <c>srcOffset</c> specify the CUDA array handle and starting offset in bytes of the source data. <c>ByteCount</c> specifies
            the number of bytes to copy.<para/>
            <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAtoHAsync_v2(System.IntPtr,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)"/> is asynchronous and can optionally be associated to a stream by passing a non-zero stream <c>hStream</c>
            argument. It only works on page-locked host memory and returns an error if a pointer to pageable memory is passed
            as input.
            </summary>
            <param name="dstHost">Destination pointer</param>
            <param name="srcArray">Source array</param>
            <param name="srcOffset">Offset in bytes of source array</param>
            <param name="ByteCount">Size of memory copy in bytes</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>    
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy2DAsync_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Perform a 2D memory copy according to the parameters specified in <c>pCopy</c>. See <see cref="T:ManagedCuda.BasicTypes.CUDAMemCpy2D"/>.
            <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy2DAsync_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@,ManagedCuda.BasicTypes.CUstream)"/> returns an error if any pitch is greater than the maximum allowed (<see cref="F:ManagedCuda.BasicTypes.CUDeviceProperties.memPitch"/>).
            <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/> passes back pitches that always work with <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy2DAsync_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@,ManagedCuda.BasicTypes.CUstream)"/>. On intra-device
            memory copies (device <![CDATA[<->]]> device, CUDA array <![CDATA[<->]]> device, CUDA array <![CDATA[<->]]> CUDA array), <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy2DAsync_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@,ManagedCuda.BasicTypes.CUstream)"/> may fail
            for pitches not computed by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>. <see cref="M:ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy2DUnaligned_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@)"/> (not async!) does not have this restriction, but
            may run significantly slower in the cases where <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy2DAsync_v2(ManagedCuda.BasicTypes.CUDAMemCpy2D@,ManagedCuda.BasicTypes.CUstream)"/> would have returned an error code.
            </summary>
            <param name="pCopy">Parameters for the memory copy</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy3DAsync_v2(ManagedCuda.BasicTypes.CUDAMemCpy3D@,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Perform a 3D memory copy according to the parameters specified in <c>pCopy</c>. See <see cref="T:ManagedCuda.BasicTypes.CUDAMemCpy3D"/>.
            <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy3DAsync_v2(ManagedCuda.BasicTypes.CUDAMemCpy3D@,ManagedCuda.BasicTypes.CUstream)"/> returns an error if any pitch is greater than the maximum allowed (<see cref="F:ManagedCuda.BasicTypes.CUDeviceProperties.memPitch"/>).<para/>
            <see cref="M:ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpy3DAsync_v2(ManagedCuda.BasicTypes.CUDAMemCpy3D@,ManagedCuda.BasicTypes.CUstream)"/> is asynchronous and can optionally be associated to a stream by passing a non-zero <c>hStream</c>
            argument. It only works on page-locked host memory and returns an error if a pointer to pageable memory is passed
            as input. <para/>
            The srcLOD and dstLOD members of the CUDAMemCpy3D structure must be set to 0.
            </summary>
            <param name="pCopy">Parameters for the memory copy</param>
            <param name="hStream">Stream indetifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>   
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.Memset">
            <summary>
            Combines all memset API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Memset.cuMemsetD8_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Sets the memory range of <c>N</c> 8-bit values to the specified value <c>b</c>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="b">Value to set</param>
            <param name="N">Number of elements</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Memset.cuMemsetD16_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Sets the memory range of <c>N</c> 16-bit values to the specified value <c>us</c>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="us">Value to set</param>
            <param name="N">Number of elements</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Memset.cuMemsetD32_v2(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Sets the memory range of <c>N</c> 32-bit values to the specified value <c>ui</c>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="ui">Value to set</param>
            <param name="N">Number of elements</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Memset.cuMemsetD2D8_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Byte,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Sets the 2D memory range of <c>Width</c> 8-bit values to the specified value <c>b</c>. <c>Height</c> specifies the number of rows to
            set, and <c>dstPitch</c> specifies the number of bytes between each row. This function performs fastest when the pitch is
            one that has been passed back by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="dstPitch">Pitch of destination device pointer</param>
            <param name="b">Value to set</param>
            <param name="Width">Width of row</param>
            <param name="Height">Number of rows</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Memset.cuMemsetD2D16_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.UInt16,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Sets the 2D memory range of <c>Width</c> 16-bit values to the specified value <c>us</c>. <c>Height</c> specifies the number of rows to
            set, and <c>dstPitch</c> specifies the number of bytes between each row. This function performs fastest when the pitch is
            one that has been passed back by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="dstPitch">Pitch of destination device pointer</param>
            <param name="us">Value to set</param>
            <param name="Width">Width of row</param>
            <param name="Height">Number of rows</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Memset.cuMemsetD2D32_v2(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.UInt32,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Sets the 2D memory range of <c>Width</c> 32-bit values to the specified value <c>us</c>. <c>Height</c> specifies the number of rows to
            set, and <c>dstPitch</c> specifies the number of bytes between each row. This function performs fastest when the pitch is
            one that has been passed back by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="dstPitch">Pitch of destination device pointer</param>
            <param name="ui">Value to set</param>
            <param name="Width">Width of row</param>
            <param name="Height">Number of rows</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.MemsetAsync">
            <summary>
            Combines all async memset API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemsetAsync.cuMemsetD8Async(ManagedCuda.BasicTypes.CUdeviceptr,System.Byte,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Sets the memory range of <c>N</c> 8-bit values to the specified value <c>b</c>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="b">Value to set</param>
            <param name="N">Number of elements</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemsetAsync.cuMemsetD16Async(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt16,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Sets the memory range of <c>N</c> 16-bit values to the specified value <c>us</c>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="us">Value to set</param>
            <param name="N">Number of elements</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemsetAsync.cuMemsetD32Async(ManagedCuda.BasicTypes.CUdeviceptr,System.UInt32,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Sets the memory range of <c>N</c> 32-bit values to the specified value <c>ui</c>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="ui">Value to set</param>
            <param name="N">Number of elements</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemsetAsync.cuMemsetD2D8Async(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Byte,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Sets the 2D memory range of <c>Width</c> 8-bit values to the specified value <c>b</c>. <c>Height</c> specifies the number of rows to
            set, and <c>dstPitch</c> specifies the number of bytes between each row. This function performs fastest when the pitch is
            one that has been passed back by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="dstPitch">Pitch of destination device pointer</param>
            <param name="b">Value to set</param>
            <param name="Width">Width of row</param>
            <param name="Height">Number of rows</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemsetAsync.cuMemsetD2D16Async(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.UInt16,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Sets the 2D memory range of <c>Width</c> 16-bit values to the specified value <c>us</c>. <c>Height</c> specifies the number of rows to
            set, and <c>dstPitch</c> specifies the number of bytes between each row. This function performs fastest when the pitch is
            one that has been passed back by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="dstPitch">Pitch of destination device pointer</param>
            <param name="us">Value to set</param>
            <param name="Width">Width of row</param>
            <param name="Height">Number of rows</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.MemsetAsync.cuMemsetD2D32Async(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.UInt32,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Sets the 2D memory range of <c>Width</c> 32-bit values to the specified value <c>us</c>. <c>Height</c> specifies the number of rows to
            set, and <c>dstPitch</c> specifies the number of bytes between each row. This function performs fastest when the pitch is
            one that has been passed back by <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAllocPitch_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.UInt32)"/>.
            </summary>
            <param name="dstDevice">Destination device pointer</param>
            <param name="dstPitch">Pitch of destination device pointer</param>
            <param name="ui">Value to set</param>
            <param name="Width">Width of row</param>
            <param name="Height">Number of rows</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.FunctionManagement">
            <summary>
            Combines all function / kernel API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetBlockShape(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specifies the <c>x</c>, <c>y</c>, and <c>z</c> dimensions of the thread blocks that are created when the kernel given by <c>hfunc</c> is launched.
            </summary>
            <param name="hfunc">Kernel to specify dimensions of</param>
            <param name="x">X dimension</param>
            <param name="y">Y dimension</param>
            <param name="z">Z dimension</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetSharedSize(ManagedCuda.BasicTypes.CUfunction,System.UInt32)">
            <summary>
            Sets through <c>bytes</c> the amount of dynamic shared memory that will be available to each thread block when the kernel
            given by <c>hfunc</c> is launched.
            </summary>
            <param name="hfunc">Kernel to specify dynamic shared-memory size for</param>
            <param name="bytes">Dynamic shared-memory size per thread in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncGetAttribute(System.Int32@,ManagedCuda.BasicTypes.CUFunctionAttribute,ManagedCuda.BasicTypes.CUfunction)">
            <summary>
            Returns in <c>pi</c> the integer value of the attribute <c>attrib</c> on the kernel given by <c>hfunc</c>. See <see cref="T:ManagedCuda.BasicTypes.CUFunctionAttribute"/>.
            </summary>
            <param name="pi">Returned attribute value</param>
            <param name="attrib">Attribute requested</param>
            <param name="hfunc">Function to query attribute of</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetCacheConfig(ManagedCuda.BasicTypes.CUfunction,ManagedCuda.BasicTypes.CUFuncCache)">
            <summary>
            On devices where the L1 cache and shared memory use the same hardware resources, this sets through <c>config</c>
            the preferred cache configuration for the device function <c>hfunc</c>. This is only a preference. The driver will use the
            requested configuration if possible, but it is free to choose a different configuration if required to execute <c>hfunc</c>. <para/>
            This setting does nothing on devices where the size of the L1 cache and shared memory are fixed.<para/>
            Switching between configuration modes may insert a device-side synchronization point for streamed kernel launches.<para/>
            The supported cache modes are defined in <see cref="T:ManagedCuda.BasicTypes.CUFuncCache"/>
            </summary>
            <param name="hfunc">Kernel to configure cache for</param>
            <param name="config">Requested cache configuration</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetSharedMemConfig(ManagedCuda.BasicTypes.CUfunction,ManagedCuda.BasicTypes.CUsharedconfig)">
            <summary>
            Sets the shared memory configuration for a device function.<para/>
            On devices with configurable shared memory banks, this function will 
            force all subsequent launches of the specified device function to have
            the given shared memory bank size configuration. On any given launch of the
            function, the shared memory configuration of the device will be temporarily
            changed if needed to suit the function's preferred configuration. Changes in
            shared memory configuration between subsequent launches of functions, 
            may introduce a device side synchronization point.<para/>
            Any per-function setting of shared memory bank size set via
            <see cref="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetSharedMemConfig(ManagedCuda.BasicTypes.CUfunction,ManagedCuda.BasicTypes.CUsharedconfig)"/>  will override the context wide setting set with
            <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxSetSharedMemConfig(ManagedCuda.BasicTypes.CUsharedconfig)"/>.<para/>
            Changing the shared memory bank size will not increase shared memory usage
            or affect occupancy of kernels, but may have major effects on performance. 
            Larger bank sizes will allow for greater potential bandwidth to shared memory,
            but will change what kinds of accesses to shared memory will result in bank 
            conflicts.<para/>
            This function will do nothing on devices with fixed shared memory bank size.<para/>
            The supported bank configurations are<para/> 
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.DefaultBankSize"/>: set bank width to the default initial
              setting (currently, four bytes).
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.FourByteBankSize"/>: set shared memory bank width to
              be natively four bytes.
            - <see cref="F:ManagedCuda.BasicTypes.CUsharedconfig.EightByteBankSize"/>: set shared memory bank width to
              be natively eight bytes.
            </summary>
            <param name="hfunc">kernel to be given a shared memory config</param>
            <param name="config">requested shared memory configuration</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.</returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.ArrayManagement">
            <summary>
            Combines all array management API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ArrayManagement.cuArrayCreate_v2(ManagedCuda.BasicTypes.CUarray@,ManagedCuda.BasicTypes.CUDAArrayDescriptor@)">
            <summary>
            Creates a CUDA array according to the <see cref="T:ManagedCuda.BasicTypes.CUDAArrayDescriptor"/> structure <c>pAllocateArray</c> and returns a
            handle to the new CUDA array in <c>pHandle</c>.
            </summary>
            <param name="pHandle">Returned array</param>
            <param name="pAllocateArray">Array descriptor</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ArrayManagement.cuArrayGetDescriptor_v2(ManagedCuda.BasicTypes.CUDAArrayDescriptor@,ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Returns in <c>pArrayDescriptor</c> a descriptor containing information on the format and dimensions of the CUDA
            array <c>hArray</c>. It is useful for subroutines that have been passed a CUDA array, but need to know the CUDA array
            parameters for validation or other purposes.
            </summary>
            <param name="pArrayDescriptor">Returned array descriptor</param>
            <param name="hArray">Array to get descriptor of</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ArrayManagement.cuArrayDestroy(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Destroys the CUDA array hArray.
            </summary>
            <param name="hArray">Array to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorArrayIsMapped"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ArrayManagement.cuArray3DCreate_v2(ManagedCuda.BasicTypes.CUarray@,ManagedCuda.BasicTypes.CUDAArray3DDescriptor@)">
            <summary>
            Creates a CUDA array according to the <see cref="T:ManagedCuda.BasicTypes.CUDAArray3DDescriptor"/> structure <c>pAllocateArray</c> and returns
            a handle to the new CUDA array in <c>pHandle</c>.
            </summary>
            <param name="pHandle">Returned array</param>
            <param name="pAllocateArray">3D array descriptor</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ArrayManagement.cuArray3DGetDescriptor_v2(ManagedCuda.BasicTypes.CUDAArray3DDescriptor@,ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Returns in <c>pArrayDescriptor</c> a descriptor containing information on the format and dimensions of the CUDA
            array <c>hArray</c>. It is useful for subroutines that have been passed a CUDA array, but need to know the CUDA array
            parameters for validation or other purposes.<para/>
            This function may be called on 1D and 2D arrays, in which case the Height and/or Depth members of the descriptor
            struct will be set to 0.
            </summary>
            <param name="pArrayDescriptor">Returned 3D array descriptor</param>
            <param name="hArray">3D array to get descriptor of</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ArrayManagement.cuMipmappedArrayCreate(ManagedCuda.BasicTypes.CUmipmappedArray@,ManagedCuda.BasicTypes.CUDAArray3DDescriptor@,System.UInt32)">
            <summary>
            Creates a CUDA mipmapped array according to the ::CUDA_ARRAY3D_DESCRIPTOR structure
            <c>pMipmappedArrayDesc</c> and returns a handle to the new CUDA mipmapped array in <c>pHandle</c>.
            <c>numMipmapLevels</c> specifies the number of mipmap levels to be allocated. This value is
            clamped to the range [1, 1 + floor(log2(max(width, height, depth)))]. 
            </summary>
            <param name="pHandle">Returned mipmapped array</param>
            <param name="pMipmappedArrayDesc">mipmapped array descriptor</param>
            <param name="numMipmapLevels">Number of mipmap levels</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>. </returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ArrayManagement.cuMipmappedArrayGetLevel(ManagedCuda.BasicTypes.CUarray@,ManagedCuda.BasicTypes.CUmipmappedArray,System.UInt32)">
            <summary>
            Returns in <c>pLevelArray</c> a CUDA array that represents a single mipmap level
            of the CUDA mipmapped array <c>hMipmappedArray</c>.
            </summary>
            <param name="pLevelArray">Returned mipmap level CUDA array</param>
            <param name="hMipmappedArray">CUDA mipmapped array</param>
            <param name="level">Mipmap level</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ArrayManagement.cuMipmappedArrayDestroy(ManagedCuda.BasicTypes.CUmipmappedArray)">
            <summary>
            Destroys the CUDA mipmapped array <c>hMipmappedArray</c>.
            </summary>
            <param name="hMipmappedArray">Mipmapped array to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>.</returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement">
            <summary>
            Groups all texture reference management API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefCreate(ManagedCuda.BasicTypes.CUtexref@)">
            <summary>
            Creates a texture reference and returns its handle in <c>pTexRef</c>. Once created, the application must call <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetArray(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUTexRefSetArrayFlags)"/>
            or <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetAddress_v2(ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)"/> to associate the reference with allocated memory. Other texture reference functions
            are used to specify the format and interpretation (addressing, filtering, etc.) to be used when the memory is read
            through this texture reference. To associate the texture reference with a texture ordinal for a given function, the
            application should call <see cref="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetTexRef(ManagedCuda.BasicTypes.CUfunction,ManagedCuda.BasicTypes.CUParameterTexRef,ManagedCuda.BasicTypes.CUtexref)"/>.
            </summary>
            <param name="pTexRef">Returned texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefDestroy(ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Destroys the texture reference specified by <c>hTexRef</c>.
            </summary>
            <param name="hTexRef">Texture reference to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetArray(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUTexRefSetArrayFlags)">
            <summary>
            Binds the CUDA array <c>hArray</c> to the texture reference <c>hTexRef</c>. Any previous address or CUDA array state
            associated with the texture reference is superseded by this function. Flags must be set to 
            <see cref="F:ManagedCuda.BasicTypes.CUTexRefSetArrayFlags.OverrideFormat"/>. Any CUDA array previously bound to hTexRef is unbound.
            </summary>
            <param name="hTexRef">Texture reference to bind</param>
            <param name="hArray">Array to bind</param>
            <param name="Flags">Options (must be <see cref="F:ManagedCuda.BasicTypes.CUTexRefSetArrayFlags.OverrideFormat"/>)</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetMipmappedArray(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUmipmappedArray,ManagedCuda.BasicTypes.CUTexRefSetArrayFlags)">
            <summary>
            Binds the CUDA mipmapped array <c>hMipmappedArray</c> to the texture reference <c>hTexRef</c>.
            Any previous address or CUDA array state associated with the texture reference
            is superseded by this function. <c>Flags</c> must be set to <see cref="F:ManagedCuda.BasicTypes.CUTexRefSetArrayFlags.OverrideFormat"/>. 
            Any CUDA array previously bound to <c>hTexRef</c> is unbound.
            </summary>
            <param name="hTexRef">Texture reference to bind</param>
            <param name="hMipmappedArray">Mipmapped array to bind</param>
            <param name="Flags">Options (must be <see cref="F:ManagedCuda.BasicTypes.CUTexRefSetArrayFlags.OverrideFormat"/>)</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetAddress_v2(ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Binds a linear address range to the texture reference <c>hTexRef</c>. Any previous address or CUDA array state associated
            with the texture reference is superseded by this function. Any memory previously bound to <c>hTexRef</c> is unbound.<para/>
            Since the hardware enforces an alignment requirement on texture base addresses, <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetAddress_v2(ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)"/> passes back
            a byte offset in <c>ByteOffset</c> that must be applied to texture fetches in order to read from the desired memory. This
            offset must be divided by the texel size and passed to kernels that read from the texture so they can be applied to the
            <c>tex1Dfetch()</c> function.<para/>
            If the device memory pointer was returned from <see cref="M:ManagedCuda.DriverAPINativeMethods.MemoryManagement.cuMemAlloc_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT)"/>, the offset is guaranteed to be 0 and <c>null</c> may be
            passed as the <c>ByteOffset</c> parameter.
            </summary>
            <param name="ByteOffset">Returned byte offset</param>
            <param name="hTexRef">Texture reference to bind</param>
            <param name="dptr">Device pointer to bind</param>
            <param name="bytes">Size of memory to bind in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetAddress2D_v2(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUDAArrayDescriptor@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Binds a linear address range to the texture reference <c>hTexRef</c>. Any previous address or CUDA array state associated
            with the texture reference is superseded by this function. Any memory previously bound to <c>hTexRef</c> is unbound. <para/>
            Using a <c>tex2D()</c> function inside a kernel requires a call to either <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetArray(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUTexRefSetArrayFlags)"/> to bind the corresponding texture
            reference to an array, or <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetAddress2D_v2(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUDAArrayDescriptor@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)"/> to bind the texture reference to linear memory.<para/>
            Function calls to <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetFormat(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUArrayFormat,System.Int32)"/> cannot follow calls to <see cref="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetAddress2D_v2(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUDAArrayDescriptor@,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)"/> for the same texture reference.<para/>
            It is required that <c>dptr</c> be aligned to the appropriate hardware-specific texture alignment. You can query this value
            using the device attribute <see cref="F:ManagedCuda.BasicTypes.CUDeviceAttribute.TextureAlignment"/>. If an unaligned <c>dptr</c> is supplied,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/> is returned.
            </summary>
            <param name="hTexRef">Texture reference to bind</param>
            <param name="desc">Descriptor of CUDA array</param>
            <param name="dptr">Device pointer to bind</param>
            <param name="Pitch">Line pitch in bytes&gt;</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetFormat(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUArrayFormat,System.Int32)">
            <summary>
            Specifies the format of the data to be read by the texture reference <c>hTexRef</c>. <c>fmt</c> and <c>NumPackedComponents</c>
            are exactly analogous to the Format and NumChannels members of the <see cref="T:ManagedCuda.BasicTypes.CUDAArrayDescriptor"/> structure:
            They specify the format of each component and the number of components per array element.
            </summary>
            <param name="hTexRef">Texture reference</param>
            <param name="fmt">Format to set</param>
            <param name="NumPackedComponents">Number of components per array element</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetAddressMode(ManagedCuda.BasicTypes.CUtexref,System.Int32,ManagedCuda.BasicTypes.CUAddressMode)">
            <summary>
            Specifies the addressing mode <c>am</c> for the given dimension <c>dim</c> of the texture reference <c>hTexRef</c>. If <c>dim</c> is zero,
            the addressing mode is applied to the first parameter of the functions used to fetch from the texture; if <c>dim</c> is 1, the
            second, and so on. See <see cref="T:ManagedCuda.BasicTypes.CUAddressMode"/>.<para/>
            Note that this call has no effect if <c>hTexRef</c> is bound to linear memory.
            </summary>
            <param name="hTexRef">Texture reference</param>
            <param name="dim">Dimension</param>
            <param name="am">Addressing mode to set</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetFilterMode(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUFilterMode)">
            <summary>
            Specifies the filtering mode <c>fm</c> to be used when reading memory through the texture reference <c>hTexRef</c>. See <see cref="T:ManagedCuda.BasicTypes.CUFilterMode"/>.<para/>
            Note that this call has no effect if hTexRef is bound to linear memory.
            </summary>
            <param name="hTexRef">Texture reference</param>
            <param name="fm">Filtering mode to set</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetFlags(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUTexRefSetFlags)">
            <summary>
            Specifies optional flags via <c>Flags</c> to specify the behavior of data returned through the texture reference <c>hTexRef</c>. See <see cref="T:ManagedCuda.BasicTypes.CUTexRefSetFlags"/>.
            </summary>
            <param name="hTexRef">Texture reference</param>
            <param name="Flags">Optional flags to set</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetAddress(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns in <c>pdptr</c> the base address bound to the texture reference <c>hTexRef</c>, or returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            if the texture reference is not bound to any device memory range.
            </summary>
            <param name="pdptr">Returned device address</param>
            <param name="hTexRef">Texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetArray(ManagedCuda.BasicTypes.CUarray@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns in <c>phArray</c> the CUDA array bound to the texture reference <c>hTexRef</c>, or returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            if the texture reference is not bound to any CUDA array.
            </summary>
            <param name="phArray">Returned array</param>
            <param name="hTexRef">Texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetMipmappedArray(ManagedCuda.BasicTypes.CUmipmappedArray@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns in <c>phMipmappedArray</c> the CUDA mipmapped array bound to the texture 
            reference <c>hTexRef</c>, or returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/> if the texture reference
            is not bound to any CUDA mipmapped array.
            </summary>
            <param name="phMipmappedArray">Returned mipmapped array</param>
            <param name="hTexRef">Texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetAddressMode(ManagedCuda.BasicTypes.CUAddressMode@,ManagedCuda.BasicTypes.CUtexref,System.Int32)">
            <summary>
            Returns in <c>pam</c> the addressing mode corresponding to the dimension <c>dim</c> of the texture reference <c>hTexRef</c>. Currently,
            the only valid value for <c>dim</c> are 0 and 1.
            </summary>
            <param name="pam">Returned addressing mode</param>
            <param name="hTexRef">Texture reference</param>
            <param name="dim">Dimension</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetFilterMode(ManagedCuda.BasicTypes.CUFilterMode@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns in <c>pfm</c> the filtering mode of the texture reference <c>hTexRef</c>.
            </summary>
            <param name="pfm">Returned filtering mode</param>
            <param name="hTexRef">Texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetFormat(ManagedCuda.BasicTypes.CUArrayFormat@,System.Int32@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns in <c>pFormat</c> and <c>pNumChannels</c> the format and number of components of the CUDA array bound to
            the texture reference <c>hTexRef</c>. If <c>pFormat</c> or <c>pNumChannels</c> is <c>null</c>, it will be ignored.
            </summary>
            <param name="pFormat">Returned format</param>
            <param name="pNumChannels">Returned number of components</param>
            <param name="hTexRef">Texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetFlags(ManagedCuda.BasicTypes.CUTexRefSetFlags@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns in <c>pFlags</c> the flags of the texture reference <c>hTexRef</c>.
            </summary>
            <param name="pFlags">Returned flags</param>
            <param name="hTexRef">Texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetMipmapFilterMode(ManagedCuda.BasicTypes.CUFilterMode@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns the mipmap filtering mode in <c>pfm</c> that's used when reading memory through
            the texture reference <c>hTexRef</c>.
            </summary>
            <param name="pfm">Returned mipmap filtering mode</param>
            <param name="hTexRef">Texture reference</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetMipmapLevelBias(System.Single@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns the mipmap level bias in <c>pBias</c> that's added to the specified mipmap
            level when reading memory through the texture reference <c>hTexRef</c>.
            </summary>
            <param name="pbias">Returned mipmap level bias</param>
            <param name="hTexRef">Texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetMipmapLevelClamp(System.Single@,System.Single@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns the min/max mipmap level clamps in <c>pminMipmapLevelClamp</c> and <c>pmaxMipmapLevelClamp</c>
            that's used when reading memory through the texture reference <c>hTexRef</c>. 
            </summary>
            <param name="pminMipmapLevelClamp">Returned mipmap min level clamp</param>
            <param name="pmaxMipmapLevelClamp">Returned mipmap max level clamp</param>
            <param name="hTexRef">Texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefGetMaxAnisotropy(System.Int32@,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Returns the maximum aniostropy in <c>pmaxAniso</c> that's used when reading memory through
            the texture reference. 
            </summary>
            <param name="pmaxAniso">Returned maximum anisotropy</param>
            <param name="hTexRef">Texture reference</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetMipmapFilterMode(ManagedCuda.BasicTypes.CUtexref,ManagedCuda.BasicTypes.CUFilterMode)">
            <summary>
            Specifies the mipmap filtering mode <c>fm</c> to be used when reading memory through
            the texture reference <c>hTexRef</c>.<para/>
            Note that this call has no effect if <c>hTexRef</c> is not bound to a mipmapped array.
            </summary>
            <param name="hTexRef">Texture reference</param>
            <param name="fm">Filtering mode to set</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetMipmapLevelBias(ManagedCuda.BasicTypes.CUtexref,System.Single)">
            <summary>
            Specifies the mipmap level bias <c>bias</c> to be added to the specified mipmap level when 
            reading memory through the texture reference <c>hTexRef</c>.<para/>
            Note that this call has no effect if <c>hTexRef</c> is not bound to a mipmapped array.
            </summary>
            <param name="hTexRef">Texture reference</param>
            <param name="bias">Mipmap level bias</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetMipmapLevelClamp(ManagedCuda.BasicTypes.CUtexref,System.Single,System.Single)">
            <summary>
            Specifies the min/max mipmap level clamps, <c>minMipmapLevelClamp</c> and <c>maxMipmapLevelClamp</c>
            respectively, to be used when reading memory through the texture reference 
            <c>hTexRef</c>.<para/>
            Note that this call has no effect if <c>hTexRef</c> is not bound to a mipmapped array.
            </summary>
            <param name="hTexRef">Texture reference</param>
            <param name="minMipmapLevelClamp">Mipmap min level clamp</param>
            <param name="maxMipmapLevelClamp">Mipmap max level clamp</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureReferenceManagement.cuTexRefSetMaxAnisotropy(ManagedCuda.BasicTypes.CUtexref,System.UInt32)">
            <summary>
            Specifies the maximum aniostropy <c>maxAniso</c> to be used when reading memory through
            the texture reference <c>hTexRef</c>. <para/>
            Note that this call has no effect if <c>hTexRef</c> is not bound to a mipmapped array.
            </summary>
            <param name="hTexRef">Texture reference</param>
            <param name="maxAniso">Maximum anisotropy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.SurfaceReferenceManagement">
            <summary>
            Combines all surface management API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SurfaceReferenceManagement.cuSurfRefSetArray(ManagedCuda.BasicTypes.CUsurfref,ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUSurfRefSetFlags)">
            <summary>
            Sets the CUDA array <c>hArray</c> to be read and written by the surface reference <c>hSurfRef</c>. Any previous CUDA array
            state associated with the surface reference is superseded by this function. Flags must be set to <see cref="F:ManagedCuda.BasicTypes.CUSurfRefSetFlags.None"/>. The 
            <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.SurfaceLDST"/> flag must have been set for the CUDA array. Any CUDA array previously bound to
            <c>hSurfRef</c> is unbound.
            </summary>
            <param name="hSurfRef">Surface reference handle</param>
            <param name="hArray">CUDA array handle</param>
            <param name="Flags">set to <see cref="F:ManagedCuda.BasicTypes.CUSurfRefSetFlags.None"/></param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SurfaceReferenceManagement.cuSurfRefGetArray(ManagedCuda.BasicTypes.CUarray@,ManagedCuda.BasicTypes.CUsurfref)">
            <summary>
            Returns in <c>phArray</c> the CUDA array bound to the surface reference <c>hSurfRef</c>, or returns
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/> if the surface reference is not bound to any CUDA array.
            </summary>
            <param name="phArray">Surface reference handle</param>
            <param name="hSurfRef">Surface reference handle</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.ParameterManagement">
            <summary>
            Combines all kernel / function parameter management API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetSize(ManagedCuda.BasicTypes.CUfunction,System.UInt32)">
            <summary>
            Sets through <c>numbytes</c> the total size in bytes needed by the function parameters of the kernel corresponding to
            <c>hfunc</c>.
            </summary>
            <param name="hfunc">Kernel to set parameter size for</param>
            <param name="numbytes">Size of parameter list in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSeti(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.UInt32)">
            <summary>
            Sets an integer parameter that will be specified the next time the kernel corresponding to <c>hfunc</c> will be invoked.
            <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add parameter to</param>
            <param name="offset">Offset to add parameter to argument list</param>
            <param name="value">Value of parameter</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetf(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Single)">
            <summary>
            Sets a floating-point parameter that will be specified the next time the kernel corresponding to <c>hfunc</c> will be invoked.
            <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add parameter to</param>
            <param name="offset">Offset to add parameter to argument list</param>
            <param name="value">Value of parameter</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.IntPtr,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Byte@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.SByte@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.UInt16@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int16@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.UInt32@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int32@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.UInt64@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int64@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Single@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Double@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.dim3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.char1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.char2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.char3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.char4@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uchar1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uchar2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uchar3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uchar4@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.short1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.short2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.short3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.short4@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ushort1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ushort2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ushort3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ushort4@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.int1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.int2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.int3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.int4@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uint1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uint2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uint3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uint4@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.long1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.long2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.long3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.long4@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ulong1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ulong2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ulong3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ulong4@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.float1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.float2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.float3@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.float4@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.double1@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.double2@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.cuDoubleComplex@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.cuDoubleReal@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.cuFloatComplex@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.cuFloatReal@,System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.dim3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.char1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.char2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.char3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.char4[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uchar1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uchar2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uchar3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uchar4[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.short1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.short2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.short3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.short4[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ushort1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ushort2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ushort3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ushort4[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.int1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.int2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.int3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.int4[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uint1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uint2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uint3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.uint4[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.long1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.long2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.long3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.long4[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ulong1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ulong2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ulong3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.ulong4[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.float1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.float2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.float3[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.float4[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.double1[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.double2[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.cuDoubleComplex[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.cuDoubleReal[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.cuFloatComplex[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,ManagedCuda.VectorTypes.cuFloatReal[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Byte[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.SByte[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.UInt16[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int16[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.UInt32[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int32[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.UInt64[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int64[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Single[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetv(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Double[],System.UInt32)">
            <summary>
            Copies an arbitrary amount of data (specified in <c>numbytes</c>) from <c>ptr</c> into the parameter space of the kernel corresponding
            to <c>hfunc</c>. <c>offset</c> is a byte offset.
            </summary>
            <param name="hfunc">Kernel to add data to</param>
            <param name="offset">Offset to add data to argument list</param>
            <param name="ptr">Pointer to arbitrary data</param>
            <param name="numbytes">Size of data to copy in bytes</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ParameterManagement.cuParamSetTexRef(ManagedCuda.BasicTypes.CUfunction,ManagedCuda.BasicTypes.CUParameterTexRef,ManagedCuda.BasicTypes.CUtexref)">
            <summary>
            Makes the CUDA array or linear memory bound to the texture reference <c>hTexRef</c> available to a device program as a
            texture. In this version of CUDA, the texture-reference must be obtained via <see cref="M:ManagedCuda.DriverAPINativeMethods.ModuleManagement.cuModuleGetTexRef(ManagedCuda.BasicTypes.CUtexref@,ManagedCuda.BasicTypes.CUmodule,System.String)"/> and the <c>texunit</c>
            parameter must be set to <see cref="F:ManagedCuda.BasicTypes.CUParameterTexRef.Default"/>.
            </summary>
            <param name="hfunc">Kernel to add texture-reference to</param>
            <param name="texunit">Texture unit (must be <see cref="F:ManagedCuda.BasicTypes.CUParameterTexRef.Default"/>)</param>
            <param name="hTexRef">Texture-reference to add to argument list</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.Launch">
            <summary>
            Groups all kernel launch API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunch(ManagedCuda.BasicTypes.CUfunction)">
            <summary>
            Invokes the kernel <c>f</c> on a 1 x 1 x 1 grid of blocks. The block contains the number of threads specified by a previous
            call to <see cref="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetBlockShape(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="f">Kernel to launch</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchFailed"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchOutOfResources"/>
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchTimeout"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchIncompatibleTexturing"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchGrid(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int32)">
            <summary>
            Invokes the kernel <c>f</c> on a <c>grid_width</c> x <c>grid_height</c> grid of blocks. Each block contains the number of threads
            specified by a previous call to <see cref="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetBlockShape(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="f">Kernel to launch</param>
            <param name="grid_width">Width of grid in blocks</param>
            <param name="grid_height">Height of grid in blocks</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchFailed"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchOutOfResources"/>
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchTimeout"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchIncompatibleTexturing"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchGridAsync(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int32,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Invokes the kernel <c>f</c> on a <c>grid_width</c> x <c>grid_height</c> grid of blocks. Each block contains the number of threads
            specified by a previous call to <see cref="M:ManagedCuda.DriverAPINativeMethods.FunctionManagement.cuFuncSetBlockShape(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int32,System.Int32)"/>.<para/>
            <see cref="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchGridAsync(ManagedCuda.BasicTypes.CUfunction,System.Int32,System.Int32,ManagedCuda.BasicTypes.CUstream)"/> can optionally be associated to a stream by passing a non-zero <c>hStream</c> argument.
            </summary>
            <param name="f">Kernel to launch</param>
            <param name="grid_width">Width of grid in blocks</param>
            <param name="grid_height">Height of grid in blocks</param>
            <param name="hStream">Stream identifier</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchFailed"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchOutOfResources"/>
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchTimeout"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchIncompatibleTexturing"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchKernel(ManagedCuda.BasicTypes.CUfunction,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUstream,System.IntPtr[],System.IntPtr[])">
             <summary>
             Invokes the kernel <c>f</c> on a <c>gridDimX</c> x <c>gridDimY</c> x <c>gridDimZ</c>
             grid of blocks. Each block contains <c>blockDimX</c> x <c>blockDimY</c> x
             blockDimZ threads.
             <para/>
             <c>sharedMemBytes</c> sets the amount of dynamic shared memory that will be
             available to each thread block.
             <para/>
             <see cref="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchKernel(ManagedCuda.BasicTypes.CUfunction,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUstream,System.IntPtr[],System.IntPtr[])"/> can optionally be associated to a stream by passing a
             non-zero <c>hStream</c> argument.
             <para/>
             Kernel parameters to <c>f</c> can be specified in one of two ways:
             <para/>
             1) Kernel parameters can be specified via <c>kernelParams</c>. If <c>f</c>
             has N parameters, then <c>kernelParams</c> needs to be an array of N
             pointers. Each of <c>kernelParams[0]</c> through <c>kernelParams[N-1]</c>
             must point to a region of memory from which the actual kernel
             parameter will be copied.  The number of kernel parameters and their
             offsets and sizes do not need to be specified as that information is
             retrieved directly from the kernel's image.
             <para/>
             2) Kernel parameters can also be packaged by the application into
             a single buffer that is passed in via the <c>extra</c> parameter.
             This places the burden on the application of knowing each kernel
             parameter's size and alignment/padding within the buffer.  
             
             <para/>
             The <c>extra</c> parameter exists to allow <see cref="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchKernel(ManagedCuda.BasicTypes.CUfunction,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUstream,System.IntPtr[],System.IntPtr[])"/> to take
             additional less commonly used arguments. <c>extra</c> specifies a list of
             names of extra settings and their corresponding values.  Each extra
             setting name is immediately followed by the corresponding value.  The
             list must be terminated with either NULL or ::CU_LAUNCH_PARAM_END.
             <para/>
             - ::CU_LAUNCH_PARAM_END, which indicates the end of the <c>extra</c>
               array;
             - ::CU_LAUNCH_PARAM_BUFFER_POINTER, which specifies that the next
               value in <c>extra</c> will be a pointer to a buffer containing all
               the kernel parameters for launching kernel <c>f</c>;
             - ::CU_LAUNCH_PARAM_BUFFER_SIZE, which specifies that the next
               value in <c>extra</c> will be a pointer to a size_t containing the
               size of the buffer specified with ::CU_LAUNCH_PARAM_BUFFER_POINTER;
             <para/>
             The error ::CUDA_ERROR_INVALID_VALUE will be returned if kernel
             parameters are specified with both <c>kernelParams</c> and <c>extra</c>
             (i.e. both <c>kernelParams</c> and <c>extra</c> are non-NULL).
             <para/>
             Calling <see cref="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchKernel(ManagedCuda.BasicTypes.CUfunction,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUstream,System.IntPtr[],System.IntPtr[])"/> sets persistent function state that is
             the same as function state set through the following deprecated APIs:
            
              ::cuFuncSetBlockShape()
              ::cuFuncSetSharedSize()
              ::cuParamSetSize()
              ::cuParamSeti()
              ::cuParamSetf()
              ::cuParamSetv()
             <para/>
             When the kernel <c>f</c> is launched via <see cref="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchKernel(ManagedCuda.BasicTypes.CUfunction,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUstream,System.IntPtr[],System.IntPtr[])"/>, the previous
             block shape, shared size and parameter info associated with <c>f</c>
             is overwritten.
             <para/>
             Note that to use <see cref="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchKernel(ManagedCuda.BasicTypes.CUfunction,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUstream,System.IntPtr[],System.IntPtr[])"/>, the kernel <c>f</c> must either have
             been compiled with toolchain version 3.2 or later so that it will
             contain kernel parameter information, or have no kernel parameters.
             If either of these conditions is not met, then <see cref="M:ManagedCuda.DriverAPINativeMethods.Launch.cuLaunchKernel(ManagedCuda.BasicTypes.CUfunction,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUstream,System.IntPtr[],System.IntPtr[])"/> will
             return <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidImage"/>.
             </summary>
             <param name="f">Kernel to launch</param>
             <param name="gridDimX">Width of grid in blocks</param>
             <param name="gridDimY">Height of grid in blocks</param>
             <param name="gridDimZ">Depth of grid in blocks</param>
             <param name="blockDimX">X dimension of each thread block</param>
             <param name="blockDimY">Y dimension of each thread block</param>
             <param name="blockDimZ">Z dimension of each thread block</param>
             <param name="sharedMemBytes">Dynamic shared-memory size per thread block in bytes</param>
             <param name="hStream">Stream identifier</param>
             <param name="kernelParams">Array of pointers to kernel parameters</param>
             <param name="extra">Extra options</param>
             <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
             <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, 
             <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidImage"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
             <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchFailed"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchOutOfResources"/>
             <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchTimeout"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorLaunchIncompatibleTexturing"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorSharedObjectInitFailed"/>.
             <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.Events">
            <summary>
            Groups all event API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventCreate(ManagedCuda.BasicTypes.CUevent@,ManagedCuda.BasicTypes.CUEventFlags)">
            <summary>
            Creates an event <c>phEvent</c> with the flags specified via <c>Flags</c>. See <see cref="T:ManagedCuda.BasicTypes.CUEventFlags"/>
            </summary>
            <param name="phEvent">Returns newly created event</param>
            <param name="Flags">Event creation flags</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventRecord(ManagedCuda.BasicTypes.CUevent,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Records an event. If <c>stream</c> is non-zero, the event is recorded after all preceding operations in the stream have been
            completed; otherwise, it is recorded after all preceding operations in the CUDA context have been completed. Since
            operation is asynchronous, <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventQuery(ManagedCuda.BasicTypes.CUevent)"/> and/or <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventSynchronize(ManagedCuda.BasicTypes.CUevent)"/> must be used to determine when the event
            has actually been recorded. <para/>
            If <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventRecord(ManagedCuda.BasicTypes.CUevent,ManagedCuda.BasicTypes.CUstream)"/> has previously been called and the event has not been recorded yet, this function returns
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            </summary>
            <param name="hEvent">Event to record</param>
            <param name="hStream">Stream to record event for</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventQuery(ManagedCuda.BasicTypes.CUevent)">
            <summary>
            Returns <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/> if the event has actually been recorded, or <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotReady"/> if not. If
            <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventRecord(ManagedCuda.BasicTypes.CUevent,ManagedCuda.BasicTypes.CUstream)"/> has not been called on this event, the function returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            </summary>
            <param name="hEvent">Event to query</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotReady"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventSynchronize(ManagedCuda.BasicTypes.CUevent)">
            <summary>
            Waits until the event has actually been recorded. If <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventRecord(ManagedCuda.BasicTypes.CUevent,ManagedCuda.BasicTypes.CUstream)"/> has been called on this event, the function returns
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>. Waiting for an event that was created with the <see cref="F:ManagedCuda.BasicTypes.CUEventFlags.BlockingSync"/>
            flag will cause the calling CPU thread to block until the event has actually been recorded. <para/>
            If <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventRecord(ManagedCuda.BasicTypes.CUevent,ManagedCuda.BasicTypes.CUstream)"/> has previously been called and the event has not been recorded yet, this function returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            </summary>
            <param name="hEvent">Event to wait for</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventDestroy(ManagedCuda.BasicTypes.CUevent)">
            <summary>
            Destroys the event specified by <c>event</c>.
            </summary>
            <param name="hEvent">Event to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventDestroy_v2(ManagedCuda.BasicTypes.CUevent)">
            <summary>
            Destroys the event specified by <c>event</c>.<para/>
            In the case that <c>hEvent</c> has been recorded but has not yet been completed
            when <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventDestroy(ManagedCuda.BasicTypes.CUevent)"/> is called, the function will return immediately and 
            the resources associated with <c>hEvent</c> will be released automatically once
            the device has completed <c>hEvent</c>.
            </summary>
            <param name="hEvent">Event to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventElapsedTime(System.Single@,ManagedCuda.BasicTypes.CUevent,ManagedCuda.BasicTypes.CUevent)">
            <summary>
            Computes the elapsed time between two events (in milliseconds with a resolution of around 0.5 microseconds). If
            either event has not been recorded yet, this function returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotReady"/>. If either event has been
            recorded with a non-zero stream, the result is undefined.
            </summary>
            <param name="pMilliseconds">Returned elapsed time in milliseconds</param>
            <param name="hStart">Starting event</param>
            <param name="hEnd">Ending event</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotReady"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.Streams">
            <summary>
            Groups all stream API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Streams.cuStreamCreate(ManagedCuda.BasicTypes.CUstream@,ManagedCuda.BasicTypes.CUStreamFlags)">
            <summary>
            Creates a stream and returns a handle in <c>phStream</c>. The <c>Flags</c> argument
            determines behaviors of the stream. Valid values for <c>Flags</c> are:
            - <see cref="F:ManagedCuda.BasicTypes.CUStreamFlags.Default"/>: Default stream creation flag.
            - <see cref="F:ManagedCuda.BasicTypes.CUStreamFlags.NonBlocking"/>: Specifies that work running in the created 
            stream may run concurrently with work in stream 0 (the NULL stream), and that
            the created stream should perform no implicit synchronization with stream 0.
            </summary>
            <param name="phStream">Returned newly created stream</param>
            <param name="Flags">Parameters for stream creation (must be <see cref="F:ManagedCuda.BasicTypes.CUStreamFlags.None"/>)</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Streams.cuStreamQuery(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Returns <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/> if all operations in the stream specified by <c>hStream</c> have completed, or
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotReady"/> if not.
            </summary>
            <param name="hStream">Stream to query status of</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotReady"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Streams.cuStreamSynchronize(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Waits until the device has completed all operations in the stream specified by <c>hStream</c>. If the context was created
            with the <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.BlockingSync"/> flag, the CPU thread will block until the stream is finished with all of its
            tasks.
            </summary>
            <param name="hStream">Stream to wait for</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Streams.cuStreamDestroy(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Destroys the stream specified by hStream.
            </summary>
            <param name="hStream">Stream to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Streams.cuStreamDestroy_v2(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Destroys the stream specified by hStream.<para/>
            In the case that the device is still doing work in the stream <c>hStream</c>
            when <see cref="M:ManagedCuda.DriverAPINativeMethods.Streams.cuStreamDestroy(ManagedCuda.BasicTypes.CUstream)"/> is called, the function will return immediately 
            and the resources associated with <c>hStream</c> will be released automatically 
            once the device has completed all work in <c>hStream</c>.
            </summary>
            <param name="hStream">Stream to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Streams.cuStreamWaitEvent(ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.CUevent,System.UInt32)">
            <summary>
            Make a compute stream wait on an event<para/>
            Makes all future work submitted to <c>hStream</c>  wait until <c>hEvent</c>
            reports completion before beginning execution. This synchronization
            will be performed efficiently on the device.
            <para/>
            The stream <c>hStream</c> will wait only for the completion of the most recent
            host call to <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventRecord(ManagedCuda.BasicTypes.CUevent,ManagedCuda.BasicTypes.CUstream)"/> on <c>hEvent</c>. Once this call has returned,
            any functions (including <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventRecord(ManagedCuda.BasicTypes.CUevent,ManagedCuda.BasicTypes.CUstream)"/> and <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventDestroy(ManagedCuda.BasicTypes.CUevent)"/> may be
            called on <c>hEvent</c> again, and the subsequent calls will not have any
            effect on <c>hStream</c>.
            <para/>
            If <c>hStream</c> is 0 (the NULL stream) any future work submitted in any stream
            will wait for <c>hEvent</c> to complete before beginning execution. This
            effectively creates a barrier for all future work submitted to the context.
            <para/>
            If <see cref="M:ManagedCuda.DriverAPINativeMethods.Events.cuEventRecord(ManagedCuda.BasicTypes.CUevent,ManagedCuda.BasicTypes.CUstream)"/> has not been called on <c>hEvent</c>, this call acts as if
            the record has already completed, and so is a functional no-op.
            <para/><c>Flags</c> argument must be 0.
            </summary>
            <param name="hStream">Stream to destroy</param>
            <param name="hEvent">Event</param>
            <param name="Flags">Flags argument must be set 0.</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Streams.cuStreamAddCallback(ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.CUstreamCallback,System.IntPtr,ManagedCuda.BasicTypes.CUStreamAddCallbackFlags)">
            <summary>
            Adds a callback to be called on the host after all currently enqueued
            items in the stream have completed.  For each 
            cuStreamAddCallback call, the callback will be executed exactly once.
            The callback will block later work in the stream until it is finished.
            <para/>
            The callback may be passed <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/> or an error code.  In the event
            of a device error, all subsequently executed callbacks will receive an
            appropriate <see cref="T:ManagedCuda.BasicTypes.CUResult"/>.
            <para/>
            Callbacks must not make any CUDA API calls.  Attempting to use a CUDA API
            will result in <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotPermitted"/>.  Callbacks must not perform any
            synchronization that may depend on outstanding device work or other callbacks
            that are not mandated to run earlier.  Callbacks without a mandated order
            (in independent streams) execute in undefined order and may be serialized.
            <para/>
            This API requires compute capability 1.1 or greater.  See
            cuDeviceGetAttribute or ::cuDeviceGetProperties to query compute
            capability.  Attempting to use this API with earlier compute versions will
            return <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotSupported"/>.
            </summary>
            <param name="hStream">Stream to add callback to</param>
            <param name="callback">The function to call once preceding stream operations are complete</param>
            <param name="userData">User specified data to be passed to the callback function</param>
            <param name="flags">Reserved for future use; must be 0.</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>.</returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.GraphicsInterop">
            <summary>
            Combines all graphics interop API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsUnregisterResource(ManagedCuda.BasicTypes.CUgraphicsResource)">
            <summary>
            Unregisters the graphics resource <c>resource</c> so it is not accessible by CUDA unless registered again.
            If resource is invalid then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/> is returned.
            </summary>
            <param name="resource">Resource to unregister</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsSubResourceGetMappedArray(ManagedCuda.BasicTypes.CUarray@,ManagedCuda.BasicTypes.CUgraphicsResource,System.UInt32,System.UInt32)">
            <summary>
            Returns in <c>pArray</c> an array through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The value set in <c>pArray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If <c>resource</c> is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            is returned. If <c>arrayIndex</c> is not a valid array index for <c>resource</c> then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            is returned. If <c>mipLevel</c> is not a valid mipmap level for <c>resource</c> then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            is returned. If <c>resource</c> is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> is returned.
            </summary>
            <param name="pArray">Returned array through which a subresource of <c>resource</c> may be accessed</param>
            <param name="resource">Mapped resource to access</param>
            <param name="arrayIndex">Array index for array textures or cubemap face index as defined by <see cref="T:ManagedCuda.BasicTypes.CUArrayCubemapFace"/> for
            cubemap textures for the subresource to access</param>
            <param name="mipLevel">Mipmap level for the subresource to access</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsResourceGetMappedMipmappedArray(ManagedCuda.BasicTypes.CUmipmappedArray@,ManagedCuda.BasicTypes.CUgraphicsResource)">
            <summary>
            Returns in <c>pMipmappedArray</c> a mipmapped array through which the mapped graphics 
            resource <c>resource</c>. The value set in <c>pMipmappedArray</c> may change every time 
            that <c>resource</c> is mapped.
            <para/>
            If <c>resource</c> is not a texture then it cannot be accessed via a mipmapped array and
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/> is returned.
            If <c>resource</c> is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> is returned.
            </summary>
            <param name="pMipmappedArray">Returned mipmapped array through which <c>resource</c> may be accessed</param>
            <param name="resource">Mapped resource to access</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsResourceGetMappedPointer_v2(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CUgraphicsResource)">
            <summary>
            Returns in <c>pDevPtr</c> a pointer through which the mapped graphics resource <c>resource</c> may be accessed. Returns
            in <c>pSize</c> the size of the memory in bytes which may be accessed from that pointer. The value set in <c>pPointer</c> may
            change every time that <c>resource</c> is mapped.<para/>
            If <c>resource</c> is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            is returned. If resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> is returned.
            </summary>
            <param name="pDevPtr">Returned pointer through which <c>resource</c> may be accessed</param>
            <param name="pSize">Returned size of the buffer accessible starting at <c>pPointer</c></param>
            <param name="resource">Mapped resource to access</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsResourceSetMapFlags(ManagedCuda.BasicTypes.CUgraphicsResource,ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags)">
            <summary>
            Set <c>flags</c> for mapping the graphics resource <c>resource</c>.
            Changes to <c>flags</c> will take effect the next time <c>resource</c> is mapped. See <see cref="T:ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags"/>. <para/>
            If <c>resource</c> is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> is returned. If
            <c>flags</c> is not one of the <see cref="T:ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags"/> values then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/> is returned.
            </summary>
            <param name="resource">Registered resource to set flags for</param>
            <param name="flags">Parameters for resource mapping</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsMapResources(System.UInt32,ManagedCuda.BasicTypes.CUgraphicsResource@,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Maps the <c>count</c> graphics resources in <c>resources</c> for access by CUDA.<para/>
            The resources in <c>resources</c> may be accessed by CUDA until they are unmapped. The graphics API from which
            <c>resources</c> were registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsMapResources(System.UInt32,ManagedCuda.BasicTypes.CUgraphicsResource@,ManagedCuda.BasicTypes.CUstream)"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If <c>resources</c> includes any duplicate entries then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/> is returned. If any of
            <c>resources</c> are presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> is returned.
            </summary>
            <param name="count">Number of resources to map. Here: must be 1</param>
            <param name="resources">Resources to map for CUDA usage</param>
            <param name="hStream">Stream with which to synchronize</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsMapResources(System.UInt32,ManagedCuda.BasicTypes.CUgraphicsResource[],ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Maps the <c>count</c> graphics resources in <c>resources</c> for access by CUDA.<para/>
            The resources in <c>resources</c> may be accessed by CUDA until they are unmapped. The graphics API from which
            <c>resources</c> were registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsMapResources(System.UInt32,ManagedCuda.BasicTypes.CUgraphicsResource[],ManagedCuda.BasicTypes.CUstream)"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If <c>resources</c> includes any duplicate entries then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/> is returned. If any of
            <c>resources</c> are presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> is returned.
            </summary>
            <param name="count">Number of resources to map</param>
            <param name="resources">Resources to map for CUDA usage</param>
            <param name="hStream">Stream with which to synchronize</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsUnmapResources(System.UInt32,ManagedCuda.BasicTypes.CUgraphicsResource@,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Unmaps the <c>count</c> graphics resources in resources.<para/>
            Once unmapped, the resources in <c>resources</c> may not be accessed by CUDA until they are mapped again.<para/>
            This function provides the synchronization guarantee that any CUDA work issued in <c>stream</c> before <see cref="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsUnmapResources(System.UInt32,ManagedCuda.BasicTypes.CUgraphicsResource@,ManagedCuda.BasicTypes.CUstream)"/>
            will complete before any subsequently issued graphics work begins.<para/>
            If <c>resources</c> includes any duplicate entries then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/> is returned. If any of
            resources are not presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> is returned.
            </summary>
            <param name="count">Number of resources to unmap. Here: must be 1</param>
            <param name="resources">Resources to unmap</param>
            <param name="hStream">Stream with which to synchronize</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsUnmapResources(System.UInt32,ManagedCuda.BasicTypes.CUgraphicsResource[],ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Unmaps the <c>count</c> graphics resources in resources.<para/>
            Once unmapped, the resources in <c>resources</c> may not be accessed by CUDA until they are mapped again.<para/>
            This function provides the synchronization guarantee that any CUDA work issued in <c>stream</c> before <see cref="M:ManagedCuda.DriverAPINativeMethods.GraphicsInterop.cuGraphicsUnmapResources(System.UInt32,ManagedCuda.BasicTypes.CUgraphicsResource[],ManagedCuda.BasicTypes.CUstream)"/>
            will complete before any subsequently issued graphics work begins.<para/>
            If <c>resources</c> includes any duplicate entries then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/> is returned. If any of
            resources are not presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> is returned.
            </summary>
            <param name="count">Number of resources to unmap</param>
            <param name="resources">Resources to unmap</param>
            <param name="hStream">Stream with which to synchronize</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>,
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnknown"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.ExportTables">
            <summary>
            cuGetExportTable
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.ExportTables.cuGetExportTable(System.IntPtr@,ManagedCuda.BasicTypes.CUuuid@)">
            <summary>
            No description found in the CUDA reference manual...
            </summary>
            <param name="ppExportTable"></param>
            <param name="pExportTableId"></param>
            <returns>CUDA Error Code<remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.Limits">
            <summary>
            Groups all context limit API calls
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Limits.cuCtxSetLimit(ManagedCuda.BasicTypes.CULimit,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Setting <c>limit</c> to <c>value</c> is a request by the application to update the current limit maintained by the context. The
            driver is free to modify the requested value to meet h/w requirements (this could be clamping to minimum or maximum
            values, rounding up to nearest element size, etc). The application can use <see cref="M:ManagedCuda.DriverAPINativeMethods.Limits.cuCtxGetLimit(ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CULimit)"/> to find out exactly what
            the limit has been set to.<para/>
            Setting each <see cref="T:ManagedCuda.BasicTypes.CULimit"/> has its own specific restrictions, so each is discussed here:
            <list type="table">  
            <listheader><term>Value</term><description>Restriction</description></listheader>  
            <item><term><see cref="F:ManagedCuda.BasicTypes.CULimit.StackSize"/></term><description>
            <see cref="F:ManagedCuda.BasicTypes.CULimit.StackSize"/> controls the stack size of each GPU thread. This limit is only applicable to devices
            of compute capability 2.0 and higher. Attempting to set this limit on devices of compute capability less than 2.0
            will result in the error <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnsupportedLimit"/> being returned.
            </description></item>  
            <item><term><see cref="F:ManagedCuda.BasicTypes.CULimit.PrintfFIFOSize"/></term><description>
            <see cref="F:ManagedCuda.BasicTypes.CULimit.PrintfFIFOSize"/> controls the size of the FIFO used by the <c>printf()</c> device system call. Setting
            <see cref="F:ManagedCuda.BasicTypes.CULimit.PrintfFIFOSize"/> must be performed before loading any module that uses the printf() device
            system call, otherwise <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/> will be returned. This limit is only applicable to
            devices of compute capability 2.0 and higher. Attempting to set this limit on devices of compute capability less
            than 2.0 will result in the error <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnsupportedLimit"/> being returned.
            </description></item> 
            <item><term><see cref="F:ManagedCuda.BasicTypes.CULimit.MallocHeapSize"/></term><description>
            <see cref="F:ManagedCuda.BasicTypes.CULimit.MallocHeapSize"/> controls the size in bytes of the heap used by the ::malloc() and ::free() device system calls. Setting
            <see cref="F:ManagedCuda.BasicTypes.CULimit.MallocHeapSize"/> must be performed before launching any kernel that uses the ::malloc() or ::free() device system calls, otherwise
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/> will be returned. This limit is only applicable to
            devices of compute capability 2.0 and higher. Attempting to set this limit on devices of compute capability less
            than 2.0 will result in the error <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnsupportedLimit"/> being returned.
            </description></item> 
            <item><term><see cref="F:ManagedCuda.BasicTypes.CULimit.DevRuntimeSyncDepth"/></term><description>
            <see cref="F:ManagedCuda.BasicTypes.CULimit.DevRuntimeSyncDepth"/> controls the maximum nesting depth of a grid at which a thread can safely call ::cudaDeviceSynchronize(). Setting
            this limit must be performed before any launch of a kernel that uses the
            device runtime and calls ::cudaDeviceSynchronize() above the default sync
            depth, two levels of grids. Calls to ::cudaDeviceSynchronize() will fail 
            with error code ::cudaErrorSyncDepthExceeded if the limitation is 
            violated. This limit can be set smaller than the default or up the maximum
            launch depth of 24. When setting this limit, keep in mind that additional
            levels of sync depth require the driver to reserve large amounts of device
            memory which can no longer be used for user allocations. If these 
            reservations of device memory fail, ::cuCtxSetLimit will return 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, and the limit can be reset to a lower value.
            This limit is only applicable to devices of compute capability 3.5 and
            higher. Attempting to set this limit on devices of compute capability less
            than 3.5 will result in the error <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnsupportedLimit"/> being 
            returned.
            </description></item> 
            <item><term><see cref="F:ManagedCuda.BasicTypes.CULimit.DevRuntimePendingLaunchCount"/></term><description>
            <see cref="F:ManagedCuda.BasicTypes.CULimit.DevRuntimePendingLaunchCount"/> controls the maximum number of 
            outstanding device runtime launches that can be made from the current
            context. A grid is outstanding from the point of launch up until the grid
            is known to have been completed. Device runtime launches which violate 
            this limitation fail and return ::cudaErrorLaunchPendingCountExceeded when
            ::cudaGetLastError() is called after launch. If more pending launches than
            the default (2048 launches) are needed for a module using the device
            runtime, this limit can be increased. Keep in mind that being able to
            sustain additional pending launches will require the driver to reserve
            larger amounts of device memory upfront which can no longer be used for
            allocations. If these reservations fail, ::cuCtxSetLimit will return
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>, and the limit can be reset to a lower value.
            This limit is only applicable to devices of compute capability 3.5 and
            higher. Attempting to set this limit on devices of compute capability less
            than 3.5 will result in the error <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnsupportedLimit"/> being
            returned. 
            </description></item> 
            </list>   
            </summary>
            <param name="limit">Limit to set</param>
            <param name="value">Size in bytes of limit</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnsupportedLimit"/>, .
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.Limits.cuCtxGetLimit(ManagedCuda.BasicTypes.SizeT@,ManagedCuda.BasicTypes.CULimit)">
            <summary>
            Returns in <c>pvalue</c> the current size of limit. See <see cref="T:ManagedCuda.BasicTypes.CULimit"/>
            </summary>
            <param name="pvalue">Returned size in bytes of limit</param>
            <param name="limit">Limit to query</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorUnsupportedLimit"/>, .
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.CudaPeerAccess">
            <summary>
            Peer Context Memory Access
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.CudaPeerAccess.cuDeviceCanAccessPeer(System.Int32@,ManagedCuda.BasicTypes.CUdevice,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Returns in <c>canAccessPeer</c> a value of 1 if contexts on <c>dev</c> are capable of
            directly accessing memory from contexts on <c>peerDev</c> and 0 otherwise.
            If direct access of <c>peerDev</c> from <c>dev</c> is possible, then access may be
            enabled on two specific contexts by calling <see cref="M:ManagedCuda.DriverAPINativeMethods.CudaPeerAccess.cuCtxEnablePeerAccess(ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.CtxEnablePeerAccessFlags)"/>.
            </summary>
            <param name="canAccessPeer">Returned access capability</param>
            <param name="dev">Device from which allocations on peerDev are to be directly accessed.</param>
            <param name="peerDev">Device on which the allocations to be directly accessed by dev reside.</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.CudaPeerAccess.cuCtxEnablePeerAccess(ManagedCuda.BasicTypes.CUcontext,ManagedCuda.BasicTypes.CtxEnablePeerAccessFlags)">
            <summary>
            If both the current context and <c>peerContext</c> are on devices which support unified 
            addressing (as may be queried using ::CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING), then
            on success all allocations from <c>peerContext</c> will immediately be accessible
            by the current context.  See \ref CUDA_UNIFIED for additional
            details. <para/>
            Note that access granted by this call is unidirectional and that in order to access
            memory from the current context in <c>peerContext</c>, a separate symmetric call 
            to ::cuCtxEnablePeerAccess() is required. <para/>
            Returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/> if <see cref="M:ManagedCuda.DriverAPINativeMethods.CudaPeerAccess.cuDeviceCanAccessPeer(System.Int32@,ManagedCuda.BasicTypes.CUdevice,ManagedCuda.BasicTypes.CUdevice)"/> indicates
            that the CUdevice of the current context cannot directly access memory
            from the CUdevice of <c>peerContext</c>. <para/>
            Returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorPeerAccessAlreadyEnabled"/> if direct access of
            <c>peerContext</c> from the current context has already been enabled. <para/>
            Returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/> if there is no current context, <c>peerContext</c>
            is not a valid context, or if the current context is <c>peerContext</c>. <para/>
            Returns <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/> if <c>Flags</c> is not 0.
            </summary>
            <param name="peerContext">Peer context to enable direct access to from the current context</param>
            <param name="Flags">Reserved for future use and must be set to 0</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidDevice"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorPeerAccessAlreadyEnabled"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.CudaPeerAccess.cuCtxDisablePeerAccess(ManagedCuda.BasicTypes.CUcontext)">
            <summary>
            Disables direct access to memory allocations in a peer context and unregisters any registered allocations.
            </summary>
            <param name="peerContext">Peer context to disable direct access to</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorPeerAccessNotEnabled"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.TextureObjects">
            <summary>
            Texture object management functions.
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureObjects.cuTexObjectCreate(ManagedCuda.BasicTypes.CUtexObject@,ManagedCuda.BasicTypes.CudaResourceDesc@,ManagedCuda.BasicTypes.CudaTextureDescriptor@,ManagedCuda.BasicTypes.CudaResourceViewDesc@)">
            <summary>
            Creates a texture object and returns it in <c>pTexObject</c>. <c>pResDesc</c> describes
            the data to texture from. <c>pTexDesc</c> describes how the data should be sampled.
            <c>pResViewDesc</c> is an optional argument that specifies an alternate format for
            the data described by <c>pResDesc</c>, and also describes the subresource region
            to restrict access to when texturing. <c>pResViewDesc</c> can only be specified if
            the type of resource is a CUDA array or a CUDA mipmapped array.
            </summary>
            <param name="pTexObject">Texture object to create</param>
            <param name="pResDesc">Resource descriptor</param>
            <param name="pTexDesc">Texture descriptor</param>
            <param name="pResViewDesc">Resource view descriptor</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureObjects.cuTexObjectCreate(ManagedCuda.BasicTypes.CUtexObject@,ManagedCuda.BasicTypes.CudaResourceDesc@,ManagedCuda.BasicTypes.CudaTextureDescriptor@,System.IntPtr)">
            <summary>
            Creates a texture object and returns it in <c>pTexObject</c>. <c>pResDesc</c> describes
            the data to texture from. <c>pTexDesc</c> describes how the data should be sampled.
            <c>pResViewDesc</c> is an optional argument that specifies an alternate format for
            the data described by <c>pResDesc</c>, and also describes the subresource region
            to restrict access to when texturing. <c>pResViewDesc</c> can only be specified if
            the type of resource is a CUDA array or a CUDA mipmapped array.
            </summary>
            <param name="pTexObject">Texture object to create</param>
            <param name="pResDesc">Resource descriptor</param>
            <param name="pTexDesc">Texture descriptor</param>
            <param name="pResViewDesc">Resource view descriptor (Null-Pointer)</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureObjects.cuTexObjectDestroy(ManagedCuda.BasicTypes.CUtexObject)">
            <summary>
            Destroys the texture object specified by <c>texObject</c>.
            </summary>
            <param name="texObject">Texture object to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureObjects.cuTexObjectGetResourceDesc(ManagedCuda.BasicTypes.CudaResourceDesc@,ManagedCuda.BasicTypes.CUtexObject)">
            <summary>
            Returns the resource descriptor for the texture object specified by <c>texObject</c>.
            </summary>
            <param name="pResDesc">Resource descriptor</param>
            <param name="texObject">Texture object</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureObjects.cuTexObjectGetTextureDesc(ManagedCuda.BasicTypes.CudaTextureDescriptor@,ManagedCuda.BasicTypes.CUtexObject)">
            <summary>
            Returns the texture descriptor for the texture object specified by <c>texObject</c>.
            </summary>
            <param name="pTexDesc">Texture descriptor</param>
            <param name="texObject">Texture object</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.TextureObjects.cuTexObjectGetResourceViewDesc(ManagedCuda.BasicTypes.CudaResourceViewDesc@,ManagedCuda.BasicTypes.CUtexObject)">
            <summary>
            Returns the resource view descriptor for the texture object specified by <c>texObject</c>.
            If no resource view was set for <c>texObject</c>, the ::CUDA_ERROR_INVALID_VALUE is returned.
            </summary>
            <param name="pResViewDesc">Resource view descriptor</param>
            <param name="texObject">Texture object</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="T:ManagedCuda.DriverAPINativeMethods.SurfaceObjects">
            <summary>
            Surface object management functions.
            </summary>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SurfaceObjects.cuSurfObjectCreate(ManagedCuda.BasicTypes.CUsurfObject@,ManagedCuda.BasicTypes.CudaResourceDesc@)">
            <summary>
            Creates a surface object and returns it in <c>pSurfObject</c>. <c>pResDesc</c> describes
            the data to perform surface load/stores on. ::CUDA_RESOURCE_DESC::resType must be 
            ::CU_RESOURCE_TYPE_ARRAY and  ::CUDA_RESOURCE_DESC::res::array::hArray
            must be set to a valid CUDA array handle. ::CUDA_RESOURCE_DESC::flags must be set to zero.
            </summary>
            <param name="pSurfObject">Surface object to create</param>
            <param name="pResDesc">Resource descriptor</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SurfaceObjects.cuSurfObjectDestroy(ManagedCuda.BasicTypes.CUsurfObject)">
            <summary>
            Destroys the surface object specified by <c>surfObject</c>.
            </summary>
            <param name="surfObject">Surface object to destroy</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="M:ManagedCuda.DriverAPINativeMethods.SurfaceObjects.cuSurfObjectGetResourceDesc(ManagedCuda.BasicTypes.CudaResourceDesc@,ManagedCuda.BasicTypes.CUsurfObject)">
            <summary>
            Returns the resource descriptor for the surface object specified by <c>surfObject</c>.
            </summary>
            <param name="pResDesc">Resource descriptor</param>
            <param name="surfObject">Surface object</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.</returns>
        </member>
        <member name="T:ManagedCuda.CudaStopWatch">
            <summary>
            Measures via CUDA events the timespan between Start() and Stop() calls.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.#ctor(ManagedCuda.BasicTypes.CUEventFlags)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.#ctor(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.#ctor(ManagedCuda.BasicTypes.CUEventFlags,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.Start">
            <summary>
            Start measurement
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.Stop">
            <summary>
            Stop measurement
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.GetElapsedTime">
            <summary>
            Get elapsed time in milliseconds, sync on stop event
            </summary>
            <returns>Elapsed time in ms</returns>
        </member>
        <member name="M:ManagedCuda.CudaStopWatch.GetElapsedTimeNoSync">
            <summary>
            Get elapsed time in milliseconds, no sync on stop event
            </summary>
            <returns>Elapsed time in ms</returns>
        </member>
        <member name="P:ManagedCuda.CudaStopWatch.StartEvent">
            <summary>
            Returns the inner start event
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaStopWatch.StopEvent">
            <summary>
            Returns the inner stop event
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaStopWatch.Stream">
            <summary>
            Returns the inner stream
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaTexObject">
            <summary>
            Cuda Texure Object
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTexObject.#ctor(ManagedCuda.BasicTypes.CudaResourceDesc,ManagedCuda.BasicTypes.CudaTextureDescriptor)">
            <summary>
            Creates a texture object and returns it in pTexObject. pResDesc describes the data to texture from. pTexDesc
            describes how the data should be sampled.
            </summary>
            <param name="resDesc">CudaResourceDesc</param>
            <param name="texDesc">CudaTextureDescriptor</param>
        </member>
        <member name="M:ManagedCuda.CudaTexObject.#ctor(ManagedCuda.BasicTypes.CudaResourceDesc,ManagedCuda.BasicTypes.CudaTextureDescriptor,ManagedCuda.BasicTypes.CudaResourceViewDesc)">
            <summary>
            Creates a texture object. ResDesc describes the data to texture from. TexDesc
            describes how the data should be sampled. resViewDesc is an optional argument that specifies an alternate format
            for the data described by pResDesc, and also describes the subresource region to restrict access to when texturing.
            pResViewDesc can only be specified if the type of resource is a CUDA array or a CUDA mipmapped array.
            </summary>
            <param name="resDesc">Describes the data to texture from.</param>
            <param name="texDesc">Describes how the data should be sampled.</param>
            <param name="resViewDesc">CudaResourceViewDesc. Only valid if type of resource is a CUDA array or a CUDA mipmapped array</param>
        </member>
        <member name="M:ManagedCuda.CudaTexObject.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTexObject.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTexObject.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="P:ManagedCuda.CudaTexObject.TexObject">
            <summary>
            Returns the wrapped CUtexObject
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTexObject.ResourceDesc">
            <summary>
            Returns the CudaResourceDesc used to create the CudaTexObject
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTexObject.TextureDescriptor">
            <summary>
            Returns the CudaTextureDescriptor used to create the CudaTexObject
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTexObject.ResourceViewDesc">
            <summary>
            Returns the CudaResourceViewDesc used to create the CudaTexObject
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ICudaVectorType">
            <summary>
            Define a common interface for all CUDA vector types
            See http://blogs.msdn.com/b/ricom/archive/2006/09/07/745085.aspx why
            these vector types look like they are.
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ICudaVectorType.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ICudaVectorTypeForArray">
            <summary>
            Define a common interface for all CUDA vector types supported by CudaArrays
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ICudaVectorTypeForArray.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type, e.g. 3 for float3
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ICudaVectorTypeForArray.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat. If none is availabe a CudaException is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ManagedCuda.VectorTypes.dim3">
            <summary>
            CUDA dim3. In difference to the CUDA dim3 type, this dim3 initializes to 0 for each element.
            dim3 should be value-types so that we can pack it in an array. But C# value types (structs)
            do not garantee to execute an default constructor, why it doesn't exist.
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.dim3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.dim3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.dim3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Add(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Add(ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Add(System.UInt32,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Subtract(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Subtract(ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Subtract(System.UInt32,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Multiply(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Multiply(ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Multiply(System.UInt32,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Divide(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Divide(ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Divide(System.UInt32,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Addition(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Addition(ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Addition(System.UInt32,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Subtraction(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Subtraction(ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Subtraction(System.UInt32,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Multiply(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Multiply(ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Multiply(System.UInt32,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Division(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Division(ManagedCuda.VectorTypes.dim3,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Division(System.UInt32,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Equality(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Inequality(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Implicit(System.Int32)~ManagedCuda.VectorTypes.dim3">
            <summary>
            implicit cast
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.op_Implicit(System.UInt32)~ManagedCuda.VectorTypes.dim3">
            <summary>
            implicit cast
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Equals(ManagedCuda.VectorTypes.dim3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="xValue">X</param>
            <param name="yValue">Y</param>
            <param name="zValue">Z</param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.#ctor(System.UInt32,System.UInt32)">
            <summary>
            .z = 1
            </summary>
            <param name="xValue">X</param>
            <param name="yValue">Y</param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.#ctor(System.UInt32)">
            <summary>
            In contrast to other vector types the .y and .z values are set to 1 and not to val!
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="xValue">X</param>
            <param name="yValue">Y</param>
            <param name="zValue">Z</param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.#ctor(System.Int32,System.Int32)">
            <summary>
            .z = 1
            </summary>
            <param name="xValue">X</param>
            <param name="yValue">Y</param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.#ctor(System.Int32)">
            <summary>
            In contrast to other vector types the .y and .z values are set to 1 and not to val!
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Min(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.dim3.Max(ManagedCuda.VectorTypes.dim3,ManagedCuda.VectorTypes.dim3)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.dim3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(dim3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.dim3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.cuDoubleComplex">
            <summary>
            cuDoubleComplex
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.cuDoubleComplex.real">
            <summary>
            real component
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.cuDoubleComplex.imag">
            <summary>
            imaginary component
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Add(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Add(ManagedCuda.VectorTypes.cuDoubleComplex,System.Double)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Add(System.Double,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Add(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Add(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Subtract(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Subtract(ManagedCuda.VectorTypes.cuDoubleComplex,System.Double)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Subtract(System.Double,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Subtract(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Subtract(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Multiply(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            Complex Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Multiply(ManagedCuda.VectorTypes.cuDoubleComplex,System.Double)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Multiply(System.Double,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Multiply(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Multiply(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Divide(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            Complex Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Divide(ManagedCuda.VectorTypes.cuDoubleComplex,System.Double)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Divide(System.Double,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Divide(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Divide(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Addition(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Addition(ManagedCuda.VectorTypes.cuDoubleComplex,System.Double)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Addition(System.Double,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Addition(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Addition(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Subtraction(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Subtraction(ManagedCuda.VectorTypes.cuDoubleComplex,System.Double)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Subtraction(System.Double,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Subtraction(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Subtraction(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Multiply(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Multiply(ManagedCuda.VectorTypes.cuDoubleComplex,System.Double)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Multiply(System.Double,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Multiply(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Multiply(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Division(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Division(ManagedCuda.VectorTypes.cuDoubleComplex,System.Double)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Division(System.Double,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Division(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Division(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Equality(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Inequality(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Equality(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Inequality(ManagedCuda.VectorTypes.cuDoubleComplex,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Equality(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.op_Inequality(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Equals(ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.Equals(ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="realValue"></param>
            <param name="imagValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleComplex.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="realValue"></param>
        </member>
        <member name="P:ManagedCuda.VectorTypes.cuDoubleComplex.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(cuDoubleComplex);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.cuDoubleComplex.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.cuDoubleReal">
            <summary>
            cuDoubleReal
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.cuDoubleReal.real">
            <summary>
            real component
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Add(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Add(ManagedCuda.VectorTypes.cuDoubleReal,System.Double)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Add(System.Double,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Subtract(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Subtract(ManagedCuda.VectorTypes.cuDoubleReal,System.Double)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Subtract(System.Double,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Multiply(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            Complex Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Multiply(ManagedCuda.VectorTypes.cuDoubleReal,System.Double)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Multiply(System.Double,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Divide(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            Complex Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Divide(ManagedCuda.VectorTypes.cuDoubleReal,System.Double)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Divide(System.Double,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.ToDouble(ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.FromDouble(System.Double)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Addition(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Addition(ManagedCuda.VectorTypes.cuDoubleReal,System.Double)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Addition(System.Double,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Subtraction(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Subtraction(ManagedCuda.VectorTypes.cuDoubleReal,System.Double)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Subtraction(System.Double,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Multiply(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Multiply(ManagedCuda.VectorTypes.cuDoubleReal,System.Double)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Multiply(System.Double,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Division(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Division(ManagedCuda.VectorTypes.cuDoubleReal,System.Double)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Division(System.Double,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Equality(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Inequality(ManagedCuda.VectorTypes.cuDoubleReal,ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Implicit(ManagedCuda.VectorTypes.cuDoubleReal)~System.Double">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.op_Implicit(System.Double)~ManagedCuda.VectorTypes.cuDoubleReal">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Equals(ManagedCuda.VectorTypes.cuDoubleComplex)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.Equals(ManagedCuda.VectorTypes.cuDoubleReal)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuDoubleReal.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="realValue"></param>
        </member>
        <member name="P:ManagedCuda.VectorTypes.cuDoubleReal.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(cuDoubleReal);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.cuDoubleReal.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.cuFloatComplex">
            <summary>
            cuFloatComplex
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.cuFloatComplex.real">
            <summary>
            real component
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.cuFloatComplex.imag">
            <summary>
            imaginary component
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Add(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Add(ManagedCuda.VectorTypes.cuFloatComplex,System.Single)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Add(System.Single,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Add(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Add(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Subtract(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Subtract(ManagedCuda.VectorTypes.cuFloatComplex,System.Single)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Subtract(System.Single,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Subtract(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Subtract(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Multiply(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            Complex Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Multiply(ManagedCuda.VectorTypes.cuFloatComplex,System.Single)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Multiply(System.Single,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Multiply(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Multiply(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Divide(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            Complex Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Divide(ManagedCuda.VectorTypes.cuFloatComplex,System.Single)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Divide(System.Single,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Divide(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Divide(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Addition(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Addition(ManagedCuda.VectorTypes.cuFloatComplex,System.Single)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Addition(System.Single,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Addition(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Addition(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Subtraction(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Subtraction(ManagedCuda.VectorTypes.cuFloatComplex,System.Single)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Subtraction(System.Single,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Subtraction(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Subtraction(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Multiply(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Multiply(ManagedCuda.VectorTypes.cuFloatComplex,System.Single)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Multiply(System.Single,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Multiply(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Multiply(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Division(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Division(ManagedCuda.VectorTypes.cuFloatComplex,System.Single)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Division(System.Single,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Division(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Division(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Equality(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Inequality(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Equality(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Inequality(ManagedCuda.VectorTypes.cuFloatComplex,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Equality(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.op_Inequality(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Equals(ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.Equals(ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="realValue"></param>
            <param name="imagValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="realValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatComplex.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.cuFloatComplex.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(cuFloatComplex);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.cuFloatComplex.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.cuFloatReal">
            <summary>
            cuFloatReal
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.cuFloatReal.real">
            <summary>
            real component
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Add(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Add(ManagedCuda.VectorTypes.cuFloatReal,System.Single)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Add(System.Single,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            Add only real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Subtract(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Subtract(ManagedCuda.VectorTypes.cuFloatReal,System.Single)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Subtract(System.Single,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            Substract real part
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Multiply(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            Complex Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Multiply(ManagedCuda.VectorTypes.cuFloatReal,System.Single)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Multiply(System.Single,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Divide(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            Complex Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Divide(ManagedCuda.VectorTypes.cuFloatReal,System.Single)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Divide(System.Single,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.ToSingle(ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.FromSingle(System.Single)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Addition(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Addition(ManagedCuda.VectorTypes.cuFloatReal,System.Single)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Addition(System.Single,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Subtraction(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Subtraction(ManagedCuda.VectorTypes.cuFloatReal,System.Single)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Subtraction(System.Single,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Multiply(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Multiply(ManagedCuda.VectorTypes.cuFloatReal,System.Single)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Multiply(System.Single,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Division(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Division(ManagedCuda.VectorTypes.cuFloatReal,System.Single)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Division(System.Single,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Equality(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Inequality(ManagedCuda.VectorTypes.cuFloatReal,ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            component wise
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Implicit(ManagedCuda.VectorTypes.cuFloatReal)~System.Single">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.op_Implicit(System.Single)~ManagedCuda.VectorTypes.cuFloatReal">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Equals(ManagedCuda.VectorTypes.cuFloatComplex)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.Equals(ManagedCuda.VectorTypes.cuFloatReal)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="realValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.cuFloatReal.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.cuFloatReal.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(cuFloatReal);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.cuFloatReal.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.char1">
            <summary>
            char1
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Add(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Add(ManagedCuda.VectorTypes.char1,System.SByte)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Add(System.SByte,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Subtract(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Subtract(ManagedCuda.VectorTypes.char1,System.SByte)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Subtract(System.SByte,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Multiply(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Multiply(ManagedCuda.VectorTypes.char1,System.SByte)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Multiply(System.SByte,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Divide(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Divide(ManagedCuda.VectorTypes.char1,System.SByte)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Divide(System.SByte,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.ToSByte(ManagedCuda.VectorTypes.char1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.FromSByte(System.SByte)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Addition(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Addition(ManagedCuda.VectorTypes.char1,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Addition(System.SByte,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Subtraction(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Subtraction(ManagedCuda.VectorTypes.char1,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Subtraction(System.SByte,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Multiply(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Multiply(ManagedCuda.VectorTypes.char1,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Multiply(System.SByte,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Division(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Division(ManagedCuda.VectorTypes.char1,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Division(System.SByte,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Equality(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Inequality(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Implicit(ManagedCuda.VectorTypes.char1)~System.SByte">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.op_Implicit(System.SByte)~ManagedCuda.VectorTypes.char1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Equals(ManagedCuda.VectorTypes.char1)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.#ctor(System.SByte)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Min(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.Max(ManagedCuda.VectorTypes.char1,ManagedCuda.VectorTypes.char1)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char1.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.char1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(char1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.char1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.char2">
            <summary>
            char2
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Add(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Add(ManagedCuda.VectorTypes.char2,System.SByte)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Add(System.SByte,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Subtract(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Subtract(ManagedCuda.VectorTypes.char2,System.SByte)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Subtract(System.SByte,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Multiply(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Multiply(ManagedCuda.VectorTypes.char2,System.SByte)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Multiply(System.SByte,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Divide(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Divide(ManagedCuda.VectorTypes.char2,System.SByte)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Divide(System.SByte,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Addition(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Addition(ManagedCuda.VectorTypes.char2,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Addition(System.SByte,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Subtraction(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Subtraction(ManagedCuda.VectorTypes.char2,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Subtraction(System.SByte,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Multiply(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Multiply(ManagedCuda.VectorTypes.char2,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Multiply(System.SByte,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Division(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Division(ManagedCuda.VectorTypes.char2,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Division(System.SByte,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Equality(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.op_Inequality(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Equals(ManagedCuda.VectorTypes.char2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.#ctor(System.SByte,System.SByte)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.#ctor(System.SByte)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Min(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.Max(ManagedCuda.VectorTypes.char2,ManagedCuda.VectorTypes.char2)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char2.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.char2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(char2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.char2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.char3">
            <summary>
            char3
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Add(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Add(ManagedCuda.VectorTypes.char3,System.SByte)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Add(System.SByte,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Subtract(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Subtract(ManagedCuda.VectorTypes.char3,System.SByte)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Subtract(System.SByte,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Multiply(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Multiply(ManagedCuda.VectorTypes.char3,System.SByte)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Multiply(System.SByte,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Divide(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Divide(ManagedCuda.VectorTypes.char3,System.SByte)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Divide(System.SByte,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Addition(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Addition(ManagedCuda.VectorTypes.char3,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Addition(System.SByte,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Subtraction(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Subtraction(ManagedCuda.VectorTypes.char3,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Subtraction(System.SByte,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Multiply(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Multiply(ManagedCuda.VectorTypes.char3,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Multiply(System.SByte,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Division(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Division(ManagedCuda.VectorTypes.char3,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Division(System.SByte,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Equality(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.op_Inequality(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Equals(ManagedCuda.VectorTypes.char3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.#ctor(System.SByte,System.SByte,System.SByte)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.#ctor(System.SByte)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Min(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char3.Max(ManagedCuda.VectorTypes.char3,ManagedCuda.VectorTypes.char3)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.char3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(char3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.char3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.char4">
            <summary>
            char4
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char4.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char4.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char4.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.char4.w">
            <summary>
            W
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Add(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Add(ManagedCuda.VectorTypes.char4,System.SByte)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Add(System.SByte,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Subtract(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Subtract(ManagedCuda.VectorTypes.char4,System.SByte)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Subtract(System.SByte,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Multiply(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Multiply(ManagedCuda.VectorTypes.char4,System.SByte)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Multiply(System.SByte,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Divide(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Divide(ManagedCuda.VectorTypes.char4,System.SByte)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Divide(System.SByte,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Addition(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Addition(ManagedCuda.VectorTypes.char4,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Addition(System.SByte,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Subtraction(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Subtraction(ManagedCuda.VectorTypes.char4,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Subtraction(System.SByte,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Multiply(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Multiply(ManagedCuda.VectorTypes.char4,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Multiply(System.SByte,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Division(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Division(ManagedCuda.VectorTypes.char4,System.SByte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Division(System.SByte,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Equality(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.op_Inequality(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Equals(ManagedCuda.VectorTypes.char4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
            <param name="wValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.#ctor(System.SByte)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Min(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.Max(ManagedCuda.VectorTypes.char4,ManagedCuda.VectorTypes.char4)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>4</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.char4.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.char4.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(char4);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.char4.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.uchar1">
            <summary>
            uchar1
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Add(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Add(ManagedCuda.VectorTypes.uchar1,System.Byte)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Add(System.Byte,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Subtract(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Subtract(ManagedCuda.VectorTypes.uchar1,System.Byte)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Subtract(System.Byte,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Multiply(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Multiply(ManagedCuda.VectorTypes.uchar1,System.Byte)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Multiply(System.Byte,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Divide(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Divide(ManagedCuda.VectorTypes.uchar1,System.Byte)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Divide(System.Byte,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.ToByte(ManagedCuda.VectorTypes.uchar1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.FromByte(System.Byte)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Addition(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Addition(ManagedCuda.VectorTypes.uchar1,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Addition(System.Byte,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Subtraction(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Subtraction(ManagedCuda.VectorTypes.uchar1,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Subtraction(System.Byte,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Multiply(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Multiply(ManagedCuda.VectorTypes.uchar1,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Multiply(System.Byte,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Division(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Division(ManagedCuda.VectorTypes.uchar1,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Division(System.Byte,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Equality(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Inequality(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Implicit(ManagedCuda.VectorTypes.uchar1)~System.Byte">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.op_Implicit(System.Byte)~ManagedCuda.VectorTypes.uchar1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Equals(ManagedCuda.VectorTypes.uchar1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.#ctor(System.Byte)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Min(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.Max(ManagedCuda.VectorTypes.uchar1,ManagedCuda.VectorTypes.uchar1)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar1.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uchar1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(uchar1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uchar1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.uchar2">
            <summary>
            uchar2
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Add(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Add(ManagedCuda.VectorTypes.uchar2,System.Byte)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Add(System.Byte,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Subtract(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Subtract(ManagedCuda.VectorTypes.uchar2,System.Byte)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Subtract(System.Byte,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Multiply(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Multiply(ManagedCuda.VectorTypes.uchar2,System.Byte)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Multiply(System.Byte,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Divide(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Divide(ManagedCuda.VectorTypes.uchar2,System.Byte)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Divide(System.Byte,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Addition(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Addition(ManagedCuda.VectorTypes.uchar2,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Addition(System.Byte,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Subtraction(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Subtraction(ManagedCuda.VectorTypes.uchar2,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Subtraction(System.Byte,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Multiply(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Multiply(ManagedCuda.VectorTypes.uchar2,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Multiply(System.Byte,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Division(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Division(ManagedCuda.VectorTypes.uchar2,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Division(System.Byte,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Equality(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.op_Inequality(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Equals(ManagedCuda.VectorTypes.uchar2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.#ctor(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.#ctor(System.Byte)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Min(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.Max(ManagedCuda.VectorTypes.uchar2,ManagedCuda.VectorTypes.uchar2)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar2.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uchar2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(uchar2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uchar2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.uchar3">
            <summary>
            uchar3
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Add(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Add(ManagedCuda.VectorTypes.uchar3,System.Byte)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Add(System.Byte,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Subtract(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Subtract(ManagedCuda.VectorTypes.uchar3,System.Byte)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Subtract(System.Byte,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Multiply(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Multiply(ManagedCuda.VectorTypes.uchar3,System.Byte)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Multiply(System.Byte,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Divide(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Divide(ManagedCuda.VectorTypes.uchar3,System.Byte)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Divide(System.Byte,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Addition(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Addition(ManagedCuda.VectorTypes.uchar3,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Addition(System.Byte,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Subtraction(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Subtraction(ManagedCuda.VectorTypes.uchar3,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Subtraction(System.Byte,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Multiply(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Multiply(ManagedCuda.VectorTypes.uchar3,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Multiply(System.Byte,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Division(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Division(ManagedCuda.VectorTypes.uchar3,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Division(System.Byte,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Equality(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.op_Inequality(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Equals(ManagedCuda.VectorTypes.uchar3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.#ctor(System.Byte)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Min(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar3.Max(ManagedCuda.VectorTypes.uchar3,ManagedCuda.VectorTypes.uchar3)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uchar3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(uchar3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uchar3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.uchar4">
            <summary>
            uchar4
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar4.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar4.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar4.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uchar4.w">
            <summary>
            W
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Add(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Add(ManagedCuda.VectorTypes.uchar4,System.Byte)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Add(System.Byte,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Subtract(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Subtract(ManagedCuda.VectorTypes.uchar4,System.Byte)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Subtract(System.Byte,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Multiply(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Multiply(ManagedCuda.VectorTypes.uchar4,System.Byte)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Multiply(System.Byte,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Divide(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Divide(ManagedCuda.VectorTypes.uchar4,System.Byte)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Divide(System.Byte,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Addition(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Addition(ManagedCuda.VectorTypes.uchar4,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Addition(System.Byte,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Subtraction(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Subtraction(ManagedCuda.VectorTypes.uchar4,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Subtraction(System.Byte,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Multiply(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Multiply(ManagedCuda.VectorTypes.uchar4,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Multiply(System.Byte,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Division(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Division(ManagedCuda.VectorTypes.uchar4,System.Byte)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Division(System.Byte,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Equality(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.op_Inequality(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Equals(ManagedCuda.VectorTypes.uchar4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
            <param name="wValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.#ctor(System.Byte)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Min(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.Max(ManagedCuda.VectorTypes.uchar4,ManagedCuda.VectorTypes.uchar4)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>4</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uchar4.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uchar4.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(uchar4);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uchar4.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.short1">
            <summary>
            short1
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Add(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Add(ManagedCuda.VectorTypes.short1,System.Int16)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Add(System.Int16,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Subtract(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Subtract(ManagedCuda.VectorTypes.short1,System.Int16)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Subtract(System.Int16,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Multiply(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Multiply(ManagedCuda.VectorTypes.short1,System.Int16)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Multiply(System.Int16,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Divide(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Divide(ManagedCuda.VectorTypes.short1,System.Int16)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Divide(System.Int16,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.ToInt16(ManagedCuda.VectorTypes.short1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.FromInt16(System.Int16)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Addition(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Addition(ManagedCuda.VectorTypes.short1,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Addition(System.Int16,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Subtraction(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Subtraction(ManagedCuda.VectorTypes.short1,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Subtraction(System.Int16,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Multiply(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Multiply(ManagedCuda.VectorTypes.short1,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Multiply(System.Int16,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Division(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Division(ManagedCuda.VectorTypes.short1,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Division(System.Int16,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Equality(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Inequality(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Implicit(ManagedCuda.VectorTypes.short1)~System.Int16">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.op_Implicit(System.Int16)~ManagedCuda.VectorTypes.short1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Equals(ManagedCuda.VectorTypes.short1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.#ctor(System.Int16)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Min(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.Max(ManagedCuda.VectorTypes.short1,ManagedCuda.VectorTypes.short1)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short1.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.short1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(short1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.short1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.short2">
            <summary>
            short2
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Add(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Add(ManagedCuda.VectorTypes.short2,System.Int16)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Add(System.Int16,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Subtract(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Subtract(ManagedCuda.VectorTypes.short2,System.Int16)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Subtract(System.Int16,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Multiply(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Multiply(ManagedCuda.VectorTypes.short2,System.Int16)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Multiply(System.Int16,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Divide(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Divide(ManagedCuda.VectorTypes.short2,System.Int16)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Divide(System.Int16,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Addition(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Addition(ManagedCuda.VectorTypes.short2,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Addition(System.Int16,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Subtraction(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Subtraction(ManagedCuda.VectorTypes.short2,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Subtraction(System.Int16,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Multiply(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Multiply(ManagedCuda.VectorTypes.short2,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Multiply(System.Int16,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Division(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Division(ManagedCuda.VectorTypes.short2,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Division(System.Int16,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Equality(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.op_Inequality(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Equals(ManagedCuda.VectorTypes.short2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.#ctor(System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.#ctor(System.Int16)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Min(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.Max(ManagedCuda.VectorTypes.short2,ManagedCuda.VectorTypes.short2)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short2.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.short2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(short2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.short2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.short3">
            <summary>
            short3
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Add(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Add(ManagedCuda.VectorTypes.short3,System.Int16)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Add(System.Int16,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Subtract(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Subtract(ManagedCuda.VectorTypes.short3,System.Int16)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Subtract(System.Int16,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Multiply(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Multiply(ManagedCuda.VectorTypes.short3,System.Int16)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Multiply(System.Int16,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Divide(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Divide(ManagedCuda.VectorTypes.short3,System.Int16)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Divide(System.Int16,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Addition(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Addition(ManagedCuda.VectorTypes.short3,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Addition(System.Int16,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Subtraction(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Subtraction(ManagedCuda.VectorTypes.short3,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Subtraction(System.Int16,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Multiply(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Multiply(ManagedCuda.VectorTypes.short3,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Multiply(System.Int16,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Division(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Division(ManagedCuda.VectorTypes.short3,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Division(System.Int16,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Equality(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.op_Inequality(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Equals(ManagedCuda.VectorTypes.short3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.#ctor(System.Int16)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Min(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short3.Max(ManagedCuda.VectorTypes.short3,ManagedCuda.VectorTypes.short3)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.short3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(short3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.short3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.short4">
            <summary>
            short4
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short4.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short4.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short4.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.short4.w">
            <summary>
            W
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Add(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Add(ManagedCuda.VectorTypes.short4,System.Int16)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Add(System.Int16,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Subtract(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Subtract(ManagedCuda.VectorTypes.short4,System.Int16)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Subtract(System.Int16,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Multiply(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Multiply(ManagedCuda.VectorTypes.short4,System.Int16)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Multiply(System.Int16,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Divide(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Divide(ManagedCuda.VectorTypes.short4,System.Int16)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Divide(System.Int16,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Addition(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Addition(ManagedCuda.VectorTypes.short4,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Addition(System.Int16,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Subtraction(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Subtraction(ManagedCuda.VectorTypes.short4,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Subtraction(System.Int16,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Multiply(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Multiply(ManagedCuda.VectorTypes.short4,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Multiply(System.Int16,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Division(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Division(ManagedCuda.VectorTypes.short4,System.Int16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Division(System.Int16,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Equality(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.op_Inequality(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Equals(ManagedCuda.VectorTypes.short4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
            <param name="wValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.#ctor(System.Int16)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Min(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.Max(ManagedCuda.VectorTypes.short4,ManagedCuda.VectorTypes.short4)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>4</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.short4.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.short4.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(short4);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.short4.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ushort1">
            <summary>
            ushort1
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Add(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Add(ManagedCuda.VectorTypes.ushort1,System.UInt16)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Add(System.UInt16,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Subtract(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Subtract(ManagedCuda.VectorTypes.ushort1,System.UInt16)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Subtract(System.UInt16,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Multiply(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Multiply(ManagedCuda.VectorTypes.ushort1,System.UInt16)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Multiply(System.UInt16,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Divide(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Divide(ManagedCuda.VectorTypes.ushort1,System.UInt16)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Divide(System.UInt16,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.ToUInt16(ManagedCuda.VectorTypes.ushort1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.FromUInt16(System.UInt16)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Addition(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Addition(ManagedCuda.VectorTypes.ushort1,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Addition(System.UInt16,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Subtraction(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Subtraction(ManagedCuda.VectorTypes.ushort1,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Subtraction(System.UInt16,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Multiply(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Multiply(ManagedCuda.VectorTypes.ushort1,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Multiply(System.UInt16,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Division(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Division(ManagedCuda.VectorTypes.ushort1,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Division(System.UInt16,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Equality(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Inequality(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Implicit(ManagedCuda.VectorTypes.ushort1)~System.UInt16">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.op_Implicit(System.UInt16)~ManagedCuda.VectorTypes.ushort1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Equals(ManagedCuda.VectorTypes.ushort1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Min(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.Max(ManagedCuda.VectorTypes.ushort1,ManagedCuda.VectorTypes.ushort1)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort1.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ushort1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(ushort1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ushort1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ushort2">
            <summary>
            ushort2
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Add(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Add(ManagedCuda.VectorTypes.ushort2,System.UInt16)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Add(System.UInt16,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Subtract(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Subtract(ManagedCuda.VectorTypes.ushort2,System.UInt16)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Subtract(System.UInt16,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Multiply(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Multiply(ManagedCuda.VectorTypes.ushort2,System.UInt16)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Multiply(System.UInt16,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Divide(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Divide(ManagedCuda.VectorTypes.ushort2,System.UInt16)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Divide(System.UInt16,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Addition(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Addition(ManagedCuda.VectorTypes.ushort2,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Addition(System.UInt16,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Subtraction(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Subtraction(ManagedCuda.VectorTypes.ushort2,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Subtraction(System.UInt16,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Multiply(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Multiply(ManagedCuda.VectorTypes.ushort2,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Multiply(System.UInt16,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Division(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Division(ManagedCuda.VectorTypes.ushort2,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Division(System.UInt16,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Equality(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.op_Inequality(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Equals(ManagedCuda.VectorTypes.ushort2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.#ctor(System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Min(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.Max(ManagedCuda.VectorTypes.ushort2,ManagedCuda.VectorTypes.ushort2)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort2.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ushort2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(ushort2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ushort2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ushort3">
            <summary>
            ushort3
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Add(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Add(ManagedCuda.VectorTypes.ushort3,System.UInt16)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Add(System.UInt16,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Subtract(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Subtract(ManagedCuda.VectorTypes.ushort3,System.UInt16)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Subtract(System.UInt16,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Multiply(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Multiply(ManagedCuda.VectorTypes.ushort3,System.UInt16)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Multiply(System.UInt16,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Divide(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Divide(ManagedCuda.VectorTypes.ushort3,System.UInt16)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Divide(System.UInt16,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Addition(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Addition(ManagedCuda.VectorTypes.ushort3,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Addition(System.UInt16,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Subtraction(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Subtraction(ManagedCuda.VectorTypes.ushort3,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Subtraction(System.UInt16,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Multiply(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Multiply(ManagedCuda.VectorTypes.ushort3,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Multiply(System.UInt16,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Division(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Division(ManagedCuda.VectorTypes.ushort3,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Division(System.UInt16,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Equality(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.op_Inequality(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Equals(ManagedCuda.VectorTypes.ushort3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Min(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort3.Max(ManagedCuda.VectorTypes.ushort3,ManagedCuda.VectorTypes.ushort3)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ushort3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(ushort3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ushort3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ushort4">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort4.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort4.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort4.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ushort4.w">
            <summary>
            W
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Add(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Add(ManagedCuda.VectorTypes.ushort4,System.UInt16)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Add(System.UInt16,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Subtract(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Subtract(ManagedCuda.VectorTypes.ushort4,System.UInt16)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Subtract(System.UInt16,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Multiply(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Multiply(ManagedCuda.VectorTypes.ushort4,System.UInt16)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Multiply(System.UInt16,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Divide(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Divide(ManagedCuda.VectorTypes.ushort4,System.UInt16)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Divide(System.UInt16,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Addition(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Addition(ManagedCuda.VectorTypes.ushort4,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Addition(System.UInt16,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Subtraction(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Subtraction(ManagedCuda.VectorTypes.ushort4,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Subtraction(System.UInt16,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Multiply(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Multiply(ManagedCuda.VectorTypes.ushort4,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Multiply(System.UInt16,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Division(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Division(ManagedCuda.VectorTypes.ushort4,System.UInt16)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Division(System.UInt16,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Equality(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.op_Inequality(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Equals(ManagedCuda.VectorTypes.ushort4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
            <param name="wValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Min(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.Max(ManagedCuda.VectorTypes.ushort4,ManagedCuda.VectorTypes.ushort4)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>4</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ushort4.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ushort4.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(ushort4);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ushort4.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.int1">
            <summary>
            int1
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Add(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Add(ManagedCuda.VectorTypes.int1,System.Int32)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Add(System.Int32,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Subtract(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Subtract(ManagedCuda.VectorTypes.int1,System.Int32)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Subtract(System.Int32,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Multiply(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Multiply(ManagedCuda.VectorTypes.int1,System.Int32)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Multiply(System.Int32,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Divide(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Divide(ManagedCuda.VectorTypes.int1,System.Int32)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Divide(System.Int32,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.ToInt32(ManagedCuda.VectorTypes.int1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.FromInt32(System.Int32)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Addition(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Addition(ManagedCuda.VectorTypes.int1,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Addition(System.Int32,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Subtraction(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Subtraction(ManagedCuda.VectorTypes.int1,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Subtraction(System.Int32,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Multiply(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Multiply(ManagedCuda.VectorTypes.int1,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Multiply(System.Int32,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Division(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Division(ManagedCuda.VectorTypes.int1,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Division(System.Int32,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Equality(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Inequality(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Implicit(ManagedCuda.VectorTypes.int1)~System.Int32">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.op_Implicit(System.Int32)~ManagedCuda.VectorTypes.int1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Equals(ManagedCuda.VectorTypes.int1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Min(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.Max(ManagedCuda.VectorTypes.int1,ManagedCuda.VectorTypes.int1)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int1.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.int1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(int1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.int1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.int2">
            <summary>
            int2
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Add(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Add(ManagedCuda.VectorTypes.int2,System.Int32)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Add(System.Int32,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Subtract(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Subtract(ManagedCuda.VectorTypes.int2,System.Int32)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Subtract(System.Int32,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Multiply(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Multiply(ManagedCuda.VectorTypes.int2,System.Int32)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Multiply(System.Int32,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Divide(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Divide(ManagedCuda.VectorTypes.int2,System.Int32)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Divide(System.Int32,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Addition(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Addition(ManagedCuda.VectorTypes.int2,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Addition(System.Int32,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Subtraction(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Subtraction(ManagedCuda.VectorTypes.int2,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Subtraction(System.Int32,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Multiply(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Multiply(ManagedCuda.VectorTypes.int2,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Multiply(System.Int32,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Division(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Division(ManagedCuda.VectorTypes.int2,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Division(System.Int32,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Equality(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.op_Inequality(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Equals(ManagedCuda.VectorTypes.int2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Min(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.Max(ManagedCuda.VectorTypes.int2,ManagedCuda.VectorTypes.int2)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int2.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.int2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(int2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.int2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.int3">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Add(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Add(ManagedCuda.VectorTypes.int3,System.Int32)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Add(System.Int32,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Subtract(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Subtract(ManagedCuda.VectorTypes.int3,System.Int32)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Subtract(System.Int32,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Multiply(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Multiply(ManagedCuda.VectorTypes.int3,System.Int32)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Multiply(System.Int32,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Divide(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Divide(ManagedCuda.VectorTypes.int3,System.Int32)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Divide(System.Int32,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Addition(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Addition(ManagedCuda.VectorTypes.int3,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Addition(System.Int32,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Subtraction(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Subtraction(ManagedCuda.VectorTypes.int3,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Subtraction(System.Int32,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Multiply(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Multiply(ManagedCuda.VectorTypes.int3,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Multiply(System.Int32,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Division(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Division(ManagedCuda.VectorTypes.int3,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Division(System.Int32,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Equality(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.op_Inequality(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Equals(ManagedCuda.VectorTypes.int3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Min(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int3.Max(ManagedCuda.VectorTypes.int3,ManagedCuda.VectorTypes.int3)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.int3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(int3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.int3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.int4">
            <summary>
            int4
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int4.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int4.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int4.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.int4.w">
            <summary>
            W
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Add(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Add(ManagedCuda.VectorTypes.int4,System.Int32)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Add(System.Int32,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Subtract(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Subtract(ManagedCuda.VectorTypes.int4,System.Int32)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Subtract(System.Int32,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Multiply(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Multiply(ManagedCuda.VectorTypes.int4,System.Int32)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Multiply(System.Int32,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Divide(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Divide(ManagedCuda.VectorTypes.int4,System.Int32)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Divide(System.Int32,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Addition(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Addition(ManagedCuda.VectorTypes.int4,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Addition(System.Int32,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Subtraction(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Subtraction(ManagedCuda.VectorTypes.int4,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Subtraction(System.Int32,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Multiply(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Multiply(ManagedCuda.VectorTypes.int4,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Multiply(System.Int32,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Division(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Division(ManagedCuda.VectorTypes.int4,System.Int32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Division(System.Int32,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Equality(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.op_Inequality(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Equals(ManagedCuda.VectorTypes.int4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
            <param name="wValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Min(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.Max(ManagedCuda.VectorTypes.int4,ManagedCuda.VectorTypes.int4)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>4</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.int4.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.int4.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(int4);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.int4.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.uint1">
            <summary>
            uint1
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Add(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Add(ManagedCuda.VectorTypes.uint1,System.UInt32)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Add(System.UInt32,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Subtract(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Subtract(ManagedCuda.VectorTypes.uint1,System.UInt32)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Subtract(System.UInt32,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Multiply(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Multiply(ManagedCuda.VectorTypes.uint1,System.UInt32)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Multiply(System.UInt32,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Divide(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Divide(ManagedCuda.VectorTypes.uint1,System.UInt32)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Divide(System.UInt32,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.ToUInt32(ManagedCuda.VectorTypes.uint1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.FromUInt32(System.UInt32)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Addition(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Addition(ManagedCuda.VectorTypes.uint1,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Addition(System.UInt32,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Subtraction(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Subtraction(ManagedCuda.VectorTypes.uint1,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Subtraction(System.UInt32,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Multiply(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Multiply(ManagedCuda.VectorTypes.uint1,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Multiply(System.UInt32,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Division(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Division(ManagedCuda.VectorTypes.uint1,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Division(System.UInt32,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Equality(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Inequality(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Implicit(ManagedCuda.VectorTypes.uint1)~System.UInt32">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.op_Implicit(System.UInt32)~ManagedCuda.VectorTypes.uint1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Equals(ManagedCuda.VectorTypes.uint1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Min(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.Max(ManagedCuda.VectorTypes.uint1,ManagedCuda.VectorTypes.uint1)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint1.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uint1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(uint1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uint1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.uint2">
            <summary>
            uint2
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Add(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Add(ManagedCuda.VectorTypes.uint2,System.UInt32)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Add(System.UInt32,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Subtract(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Subtract(ManagedCuda.VectorTypes.uint2,System.UInt32)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Subtract(System.UInt32,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Multiply(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Multiply(ManagedCuda.VectorTypes.uint2,System.UInt32)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Multiply(System.UInt32,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Divide(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Divide(ManagedCuda.VectorTypes.uint2,System.UInt32)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Divide(System.UInt32,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Addition(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Addition(ManagedCuda.VectorTypes.uint2,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Addition(System.UInt32,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Subtraction(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Subtraction(ManagedCuda.VectorTypes.uint2,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Subtraction(System.UInt32,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Multiply(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Multiply(ManagedCuda.VectorTypes.uint2,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Multiply(System.UInt32,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Division(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Division(ManagedCuda.VectorTypes.uint2,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Division(System.UInt32,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Equality(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.op_Inequality(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Equals(ManagedCuda.VectorTypes.uint2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.#ctor(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Min(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.Max(ManagedCuda.VectorTypes.uint2,ManagedCuda.VectorTypes.uint2)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint2.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uint2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(uint2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uint2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.uint3">
            <summary>
            uint3
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Add(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Add(ManagedCuda.VectorTypes.uint3,System.UInt32)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Add(System.UInt32,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Subtract(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Subtract(ManagedCuda.VectorTypes.uint3,System.UInt32)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Subtract(System.UInt32,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Multiply(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Multiply(ManagedCuda.VectorTypes.uint3,System.UInt32)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Multiply(System.UInt32,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Divide(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Divide(ManagedCuda.VectorTypes.uint3,System.UInt32)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Divide(System.UInt32,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Addition(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Addition(ManagedCuda.VectorTypes.uint3,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Addition(System.UInt32,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Subtraction(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Subtraction(ManagedCuda.VectorTypes.uint3,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Subtraction(System.UInt32,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Multiply(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Multiply(ManagedCuda.VectorTypes.uint3,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Multiply(System.UInt32,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Division(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Division(ManagedCuda.VectorTypes.uint3,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Division(System.UInt32,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Equality(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.op_Inequality(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Equals(ManagedCuda.VectorTypes.uint3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Min(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint3.Max(ManagedCuda.VectorTypes.uint3,ManagedCuda.VectorTypes.uint3)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uint3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(uint3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uint3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.uint4">
            <summary>
            uint4
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint4.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint4.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint4.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.uint4.w">
            <summary>
            W
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Add(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Add(ManagedCuda.VectorTypes.uint4,System.UInt32)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Add(System.UInt32,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Subtract(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Subtract(ManagedCuda.VectorTypes.uint4,System.UInt32)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Subtract(System.UInt32,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Multiply(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Multiply(ManagedCuda.VectorTypes.uint4,System.UInt32)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Multiply(System.UInt32,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Divide(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Divide(ManagedCuda.VectorTypes.uint4,System.UInt32)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Divide(System.UInt32,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Addition(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Addition(ManagedCuda.VectorTypes.uint4,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Addition(System.UInt32,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Subtraction(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Subtraction(ManagedCuda.VectorTypes.uint4,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Subtraction(System.UInt32,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Multiply(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Multiply(ManagedCuda.VectorTypes.uint4,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Multiply(System.UInt32,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Division(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Division(ManagedCuda.VectorTypes.uint4,System.UInt32)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Division(System.UInt32,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Equality(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.op_Inequality(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Equals(ManagedCuda.VectorTypes.uint4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
            <param name="wValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Min(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.Max(ManagedCuda.VectorTypes.uint4,ManagedCuda.VectorTypes.uint4)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>4</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.uint4.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uint4.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(uint4);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.uint4.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.long1">
            <summary>
            long1. long stands here for the long .NET type, i.e. long long or a 64bit long in C++/CUDA
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Add(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Add(ManagedCuda.VectorTypes.long1,System.Int64)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Add(System.Int64,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Subtract(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Subtract(ManagedCuda.VectorTypes.long1,System.Int64)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Subtract(System.Int64,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Multiply(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Multiply(ManagedCuda.VectorTypes.long1,System.Int64)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Multiply(System.Int64,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Divide(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Divide(ManagedCuda.VectorTypes.long1,System.Int64)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Divide(System.Int64,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.ToInt64(ManagedCuda.VectorTypes.long1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.FromInt64(System.Int64)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Addition(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Addition(ManagedCuda.VectorTypes.long1,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Addition(System.Int64,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Subtraction(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Subtraction(ManagedCuda.VectorTypes.long1,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Subtraction(System.Int64,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Multiply(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Multiply(ManagedCuda.VectorTypes.long1,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Multiply(System.Int64,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Division(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Division(ManagedCuda.VectorTypes.long1,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Division(System.Int64,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Equality(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Inequality(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Implicit(ManagedCuda.VectorTypes.long1)~System.Int64">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.op_Implicit(System.Int64)~ManagedCuda.VectorTypes.long1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Equals(ManagedCuda.VectorTypes.long1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Min(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long1.Max(ManagedCuda.VectorTypes.long1,ManagedCuda.VectorTypes.long1)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.long1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(long1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.long1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.long2">
            <summary>
            long2. long stands here for the long .NET type, i.e. long long or a 64bit long in C++/CUDA
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Add(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Add(ManagedCuda.VectorTypes.long2,System.Int64)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Add(System.Int64,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Subtract(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Subtract(ManagedCuda.VectorTypes.long2,System.Int64)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Subtract(System.Int64,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Multiply(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Multiply(ManagedCuda.VectorTypes.long2,System.Int64)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Multiply(System.Int64,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Divide(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Divide(ManagedCuda.VectorTypes.long2,System.Int64)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Divide(System.Int64,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Addition(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Addition(ManagedCuda.VectorTypes.long2,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Addition(System.Int64,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Subtraction(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Subtraction(ManagedCuda.VectorTypes.long2,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Subtraction(System.Int64,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Multiply(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Multiply(ManagedCuda.VectorTypes.long2,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Multiply(System.Int64,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Division(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Division(ManagedCuda.VectorTypes.long2,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Division(System.Int64,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Equality(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.op_Inequality(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Equals(ManagedCuda.VectorTypes.long2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.#ctor(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Min(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long2.Max(ManagedCuda.VectorTypes.long2,ManagedCuda.VectorTypes.long2)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.long2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(long2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.long2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.long3">
            <summary>
            long3. long stands here for the long .NET type, i.e. long long or a 64bit long in C++/CUDA
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Add(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Add(ManagedCuda.VectorTypes.long3,System.Int64)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Add(System.Int64,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Subtract(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Subtract(ManagedCuda.VectorTypes.long3,System.Int64)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Subtract(System.Int64,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Multiply(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Multiply(ManagedCuda.VectorTypes.long3,System.Int64)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Multiply(System.Int64,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Divide(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Divide(ManagedCuda.VectorTypes.long3,System.Int64)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Divide(System.Int64,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Addition(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Addition(ManagedCuda.VectorTypes.long3,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Addition(System.Int64,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Subtraction(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Subtraction(ManagedCuda.VectorTypes.long3,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Subtraction(System.Int64,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Multiply(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Multiply(ManagedCuda.VectorTypes.long3,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Multiply(System.Int64,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Division(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Division(ManagedCuda.VectorTypes.long3,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Division(System.Int64,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Equality(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.op_Inequality(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Equals(ManagedCuda.VectorTypes.long3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Min(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long3.Max(ManagedCuda.VectorTypes.long3,ManagedCuda.VectorTypes.long3)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.long3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(long3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.long3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.long4">
            <summary>
            long4. long stands here for the long .NET type, i.e. long long or a 64bit long in C++/CUDA
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long4.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long4.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long4.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.long4.w">
            <summary>
            W
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Add(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Add(ManagedCuda.VectorTypes.long4,System.Int64)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Add(System.Int64,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Subtract(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Subtract(ManagedCuda.VectorTypes.long4,System.Int64)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Subtract(System.Int64,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Multiply(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Multiply(ManagedCuda.VectorTypes.long4,System.Int64)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Multiply(System.Int64,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Divide(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Divide(ManagedCuda.VectorTypes.long4,System.Int64)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Divide(System.Int64,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Addition(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Addition(ManagedCuda.VectorTypes.long4,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Addition(System.Int64,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Subtraction(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Subtraction(ManagedCuda.VectorTypes.long4,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Subtraction(System.Int64,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Multiply(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Multiply(ManagedCuda.VectorTypes.long4,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Multiply(System.Int64,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Division(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Division(ManagedCuda.VectorTypes.long4,System.Int64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Division(System.Int64,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Equality(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.op_Inequality(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Equals(ManagedCuda.VectorTypes.long4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
            <param name="wValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Min(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.long4.Max(ManagedCuda.VectorTypes.long4,ManagedCuda.VectorTypes.long4)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.long4.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(long4);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.long4.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ulong1">
            <summary>
            ulong1. ulong stands here for the ulong .NET type, i.e. unsigned long long or a 64bit unsigned long in C++/CUDA
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Add(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Add(ManagedCuda.VectorTypes.ulong1,System.UInt64)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Add(System.UInt64,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Subtract(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Subtract(ManagedCuda.VectorTypes.ulong1,System.UInt64)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Subtract(System.UInt64,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Multiply(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Multiply(ManagedCuda.VectorTypes.ulong1,System.UInt64)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Multiply(System.UInt64,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Divide(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Divide(ManagedCuda.VectorTypes.ulong1,System.UInt64)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Divide(System.UInt64,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.ToUInt64(ManagedCuda.VectorTypes.ulong1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.FromUInt64(System.UInt64)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Addition(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Addition(ManagedCuda.VectorTypes.ulong1,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Addition(System.UInt64,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Subtraction(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Subtraction(ManagedCuda.VectorTypes.ulong1,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Subtraction(System.UInt64,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Multiply(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Multiply(ManagedCuda.VectorTypes.ulong1,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Multiply(System.UInt64,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Division(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Division(ManagedCuda.VectorTypes.ulong1,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Division(System.UInt64,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Equality(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Inequality(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Implicit(ManagedCuda.VectorTypes.ulong1)~System.UInt64">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.op_Implicit(System.UInt64)~ManagedCuda.VectorTypes.ulong1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Equals(ManagedCuda.VectorTypes.ulong1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.#ctor(System.UInt64)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Min(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong1.Max(ManagedCuda.VectorTypes.ulong1,ManagedCuda.VectorTypes.ulong1)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ulong1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(ulong1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ulong1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ulong2">
            <summary>
            ulong2. ulong stands here for the ulong .NET type, i.e. unsigned long long or a 64bit unsigned long in C++/CUDA
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Add(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Add(ManagedCuda.VectorTypes.ulong2,System.UInt64)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Add(System.UInt64,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Subtract(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Subtract(ManagedCuda.VectorTypes.ulong2,System.UInt64)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Subtract(System.UInt64,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Multiply(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Multiply(ManagedCuda.VectorTypes.ulong2,System.UInt64)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Multiply(System.UInt64,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Divide(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Divide(ManagedCuda.VectorTypes.ulong2,System.UInt64)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Divide(System.UInt64,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Addition(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Addition(ManagedCuda.VectorTypes.ulong2,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Addition(System.UInt64,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Subtraction(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Subtraction(ManagedCuda.VectorTypes.ulong2,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Subtraction(System.UInt64,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Multiply(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Multiply(ManagedCuda.VectorTypes.ulong2,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Multiply(System.UInt64,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Division(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Division(ManagedCuda.VectorTypes.ulong2,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Division(System.UInt64,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Equality(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.op_Inequality(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Equals(ManagedCuda.VectorTypes.ulong2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.#ctor(System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.#ctor(System.UInt64)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Min(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong2.Max(ManagedCuda.VectorTypes.ulong2,ManagedCuda.VectorTypes.ulong2)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ulong2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(ulong2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ulong2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ulong3">
            <summary>
            ulong3. ulong stands here for the ulong .NET type, i.e. unsigned long long or a 64bit unsigned long in C++/CUDA
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Add(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Add(ManagedCuda.VectorTypes.ulong3,System.UInt64)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Add(System.UInt64,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Subtract(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Subtract(ManagedCuda.VectorTypes.ulong3,System.UInt64)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Subtract(System.UInt64,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Multiply(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Multiply(ManagedCuda.VectorTypes.ulong3,System.UInt64)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Multiply(System.UInt64,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Divide(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Divide(ManagedCuda.VectorTypes.ulong3,System.UInt64)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Divide(System.UInt64,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Addition(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Addition(ManagedCuda.VectorTypes.ulong3,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Addition(System.UInt64,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Subtraction(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Subtraction(ManagedCuda.VectorTypes.ulong3,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Subtraction(System.UInt64,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Multiply(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Multiply(ManagedCuda.VectorTypes.ulong3,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Multiply(System.UInt64,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Division(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Division(ManagedCuda.VectorTypes.ulong3,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Division(System.UInt64,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Equality(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.op_Inequality(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Equals(ManagedCuda.VectorTypes.ulong3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.#ctor(System.UInt64)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Min(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong3.Max(ManagedCuda.VectorTypes.ulong3,ManagedCuda.VectorTypes.ulong3)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ulong3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(ulong3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ulong3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.ulong4">
            <summary>
            ulong4. ulong stands here for the ulong .NET type, i.e. unsigned long long or a 64bit unsigned long in C++/CUDA
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong4.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong4.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong4.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.ulong4.w">
            <summary>
            W
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Add(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Add(ManagedCuda.VectorTypes.ulong4,System.UInt64)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Add(System.UInt64,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Subtract(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Subtract(ManagedCuda.VectorTypes.ulong4,System.UInt64)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Subtract(System.UInt64,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Multiply(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Multiply(ManagedCuda.VectorTypes.ulong4,System.UInt64)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Multiply(System.UInt64,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Divide(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Divide(ManagedCuda.VectorTypes.ulong4,System.UInt64)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Divide(System.UInt64,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Addition(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Addition(ManagedCuda.VectorTypes.ulong4,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Addition(System.UInt64,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Subtraction(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Subtraction(ManagedCuda.VectorTypes.ulong4,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Subtraction(System.UInt64,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Multiply(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Multiply(ManagedCuda.VectorTypes.ulong4,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Multiply(System.UInt64,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Division(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Division(ManagedCuda.VectorTypes.ulong4,System.UInt64)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Division(System.UInt64,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Equality(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.op_Inequality(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Equals(ManagedCuda.VectorTypes.ulong4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
            <param name="wValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.#ctor(System.UInt64)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Min(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            Component wise minimum as the CUDA function imini
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.ulong4.Max(ManagedCuda.VectorTypes.ulong4,ManagedCuda.VectorTypes.ulong4)">
            <summary>
            Component wise maximum as the CUDA function imaxi
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ulong4.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(ulong4);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.ulong4.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.float1">
            <summary>
            float1
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Add(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Add(ManagedCuda.VectorTypes.float1,System.Single)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Add(System.Single,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Subtract(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Subtract(ManagedCuda.VectorTypes.float1,System.Single)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Subtract(System.Single,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Multiply(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Multiply(ManagedCuda.VectorTypes.float1,System.Single)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Multiply(System.Single,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Divide(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Divide(ManagedCuda.VectorTypes.float1,System.Single)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Divide(System.Single,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.ToSingle(ManagedCuda.VectorTypes.float1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.FromSingle(System.Single)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Addition(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Addition(ManagedCuda.VectorTypes.float1,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Addition(System.Single,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Subtraction(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Subtraction(ManagedCuda.VectorTypes.float1,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Subtraction(System.Single,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Multiply(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Multiply(ManagedCuda.VectorTypes.float1,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Multiply(System.Single,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Division(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Division(ManagedCuda.VectorTypes.float1,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Division(System.Single,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Equality(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Inequality(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Implicit(ManagedCuda.VectorTypes.float1)~System.Single">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.op_Implicit(System.Single)~ManagedCuda.VectorTypes.float1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Equals(ManagedCuda.VectorTypes.float1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Min(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            Component wise minimum as the CUDA function fminf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.Max(ManagedCuda.VectorTypes.float1,ManagedCuda.VectorTypes.float1)">
            <summary>
            Component wise maximum as the CUDA function fmaxf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float1.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.float1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(float1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.float1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.float2">
            <summary>
            float2
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Add(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Add(ManagedCuda.VectorTypes.float2,System.Single)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Add(System.Single,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Subtract(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Subtract(ManagedCuda.VectorTypes.float2,System.Single)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Subtract(System.Single,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Multiply(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Multiply(ManagedCuda.VectorTypes.float2,System.Single)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Multiply(System.Single,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Divide(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Divide(ManagedCuda.VectorTypes.float2,System.Single)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Divide(System.Single,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Addition(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Addition(ManagedCuda.VectorTypes.float2,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Addition(System.Single,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Subtraction(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Subtraction(ManagedCuda.VectorTypes.float2,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Subtraction(System.Single,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Multiply(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Multiply(ManagedCuda.VectorTypes.float2,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Multiply(System.Single,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Division(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Division(ManagedCuda.VectorTypes.float2,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Division(System.Single,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Equality(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.op_Inequality(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Equals(ManagedCuda.VectorTypes.float2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Min(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            Component wise minimum as the CUDA function fminf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.Max(ManagedCuda.VectorTypes.float2,ManagedCuda.VectorTypes.float2)">
            <summary>
            Component wise maximum as the CUDA function fmaxf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float2.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.float2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(float2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.float2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.float3">
            <summary>
            float3
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float3.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float3.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float3.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Add(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Add(ManagedCuda.VectorTypes.float3,System.Single)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Add(System.Single,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Subtract(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Subtract(ManagedCuda.VectorTypes.float3,System.Single)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Subtract(System.Single,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Multiply(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Multiply(ManagedCuda.VectorTypes.float3,System.Single)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Multiply(System.Single,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Divide(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Divide(ManagedCuda.VectorTypes.float3,System.Single)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Divide(System.Single,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Addition(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Addition(ManagedCuda.VectorTypes.float3,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Addition(System.Single,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Subtraction(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Subtraction(ManagedCuda.VectorTypes.float3,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Subtraction(System.Single,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Multiply(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Multiply(ManagedCuda.VectorTypes.float3,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Multiply(System.Single,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Division(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Division(ManagedCuda.VectorTypes.float3,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Division(System.Single,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Equality(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.op_Inequality(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Equals(ManagedCuda.VectorTypes.float3)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Dot(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            Dot product
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Dot(ManagedCuda.VectorTypes.float3)">
            <summary>
            Dot product
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Cross(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            Cross product
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Cross(ManagedCuda.VectorTypes.float3)">
            <summary>
            Cross product (this x b)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.GetLength(ManagedCuda.VectorTypes.float3)">
            <summary>
            Vector length
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Normalize">
            <summary>
            Normalize vector
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Normalize(ManagedCuda.VectorTypes.float3)">
            <summary>
            Normalize vector
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Min(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            Component wise minimum as the CUDA function fminf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.Max(ManagedCuda.VectorTypes.float3,ManagedCuda.VectorTypes.float3)">
            <summary>
            Component wise maximum as the CUDA function fmaxf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.RotateX(System.Double)">
            <summary>
            
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.RotateY(System.Double)">
            <summary>
            
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float3.RotateZ(System.Double)">
            <summary>
            
            </summary>
            <param name="angle"></param>
        </member>
        <member name="P:ManagedCuda.VectorTypes.float3.Length">
            <summary>
            Vector length
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.float3.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(float3);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.float3.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.float4">
            <summary>
            float4
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float4.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float4.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float4.z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.float4.w">
            <summary>
            W
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Add(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Add(ManagedCuda.VectorTypes.float4,System.Single)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Add(System.Single,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Subtract(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Subtract(ManagedCuda.VectorTypes.float4,System.Single)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Subtract(System.Single,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Multiply(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Multiply(ManagedCuda.VectorTypes.float4,System.Single)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Multiply(System.Single,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Divide(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Divide(ManagedCuda.VectorTypes.float4,System.Single)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Divide(System.Single,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Addition(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Addition(ManagedCuda.VectorTypes.float4,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Addition(System.Single,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Subtraction(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Subtraction(ManagedCuda.VectorTypes.float4,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Subtraction(System.Single,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Multiply(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Multiply(ManagedCuda.VectorTypes.float4,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Multiply(System.Single,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Division(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Division(ManagedCuda.VectorTypes.float4,System.Single)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Division(System.Single,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Equality(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.op_Inequality(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Equals(ManagedCuda.VectorTypes.float4)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
            <param name="zValue"></param>
            <param name="wValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Min(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            Component wise minimum as the CUDA function fminf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.Max(ManagedCuda.VectorTypes.float4,ManagedCuda.VectorTypes.float4)">
            <summary>
            Component wise maximum as the CUDA function fmaxf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.GetChannelNumber">
            <summary>
            Returns the Channel number from vector type.
            </summary>
            <returns>4</returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.float4.GetCUArrayFormat">
            <summary>
            Returns a matching CUArrayFormat.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.float4.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(float4);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.float4.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.double1">
            <summary>
            double1
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.double1.x">
            <summary>
            X
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Add(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Add(ManagedCuda.VectorTypes.double1,System.Double)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Add(System.Double,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Subtract(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Subtract(ManagedCuda.VectorTypes.double1,System.Double)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Subtract(System.Double,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Multiply(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Multiply(ManagedCuda.VectorTypes.double1,System.Double)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Multiply(System.Double,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Divide(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Divide(ManagedCuda.VectorTypes.double1,System.Double)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Divide(System.Double,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.ToDouble(ManagedCuda.VectorTypes.double1)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.FromDouble(System.Double)">
            <summary>
            Cast Method
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Addition(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Addition(ManagedCuda.VectorTypes.double1,System.Double)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Addition(System.Double,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Subtraction(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Subtraction(ManagedCuda.VectorTypes.double1,System.Double)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Subtraction(System.Double,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Multiply(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Multiply(ManagedCuda.VectorTypes.double1,System.Double)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Multiply(System.Double,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Division(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Division(ManagedCuda.VectorTypes.double1,System.Double)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Division(System.Double,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Equality(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Inequality(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Implicit(ManagedCuda.VectorTypes.double1)~System.Double">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.op_Implicit(System.Double)~ManagedCuda.VectorTypes.double1">
            <summary>
            Implicit cast
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Equals(ManagedCuda.VectorTypes.double1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Min(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            Component wise minimum as the CUDA function fminf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double1.Max(ManagedCuda.VectorTypes.double1,ManagedCuda.VectorTypes.double1)">
            <summary>
            Component wise maximum as the CUDA function fmaxf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.double1.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(double1);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.double1.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.VectorTypes.double2">
            <summary>
            double2
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.double2.x">
            <summary>
            X
            </summary>
        </member>
        <member name="F:ManagedCuda.VectorTypes.double2.y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Add(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Add(ManagedCuda.VectorTypes.double2,System.Double)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Add(System.Double,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element Add
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Subtract(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Subtract(ManagedCuda.VectorTypes.double2,System.Double)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Subtract(System.Double,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element Substract
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Multiply(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Multiply(ManagedCuda.VectorTypes.double2,System.Double)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Multiply(System.Double,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element Multiply
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Divide(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Divide(ManagedCuda.VectorTypes.double2,System.Double)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Divide(System.Double,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element Divide
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Addition(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Addition(ManagedCuda.VectorTypes.double2,System.Double)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Addition(System.Double,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Subtraction(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Subtraction(ManagedCuda.VectorTypes.double2,System.Double)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Subtraction(System.Double,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Multiply(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Multiply(ManagedCuda.VectorTypes.double2,System.Double)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Multiply(System.Double,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Division(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Division(ManagedCuda.VectorTypes.double2,System.Double)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Division(System.Double,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Equality(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.op_Inequality(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            per element
            </summary>
            <param name="src"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Equals(ManagedCuda.VectorTypes.double2)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="xValue"></param>
            <param name="yValue"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Min(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            Component wise minimum as the CUDA function fminf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.VectorTypes.double2.Max(ManagedCuda.VectorTypes.double2,ManagedCuda.VectorTypes.double2)">
            <summary>
            Component wise maximum as the CUDA function fmaxf
            </summary>
            <param name="aValue"></param>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.VectorTypes.double2.SizeOf">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(double2);</c>
            </summary>
        </member>
        <member name="P:ManagedCuda.VectorTypes.double2.Size">
            <summary>
            Gives the size of this type in bytes. <para/>
            Is equal to <c>Marshal.SizeOf(this);</c>
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaOpenGLBufferInteropResource">
            <summary>
            Wrapper for a CUgraphicsResource (OpenGL Buffer)
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.#ctor(System.UInt32,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags)">
            <summary>
            Registers a new graphics interop resource for interop with OpenGL buffer
            </summary>
            <param name="resource">OpenGL resource to register</param>
            <param name="flags">register Flags</param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.#ctor(System.UInt32,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags,ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags)">
            <summary>
            Registers a new graphics interop resource for interop with OpenGL buffer
            </summary>
            <param name="resource">OpenGL resource to register</param>
            <param name="flags">register Flags</param>
            <param name="mapFlags">resource mapping flags</param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.Map(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Maps the graphics resource for access by CUDA.<para/>
            The resource may be accessed by CUDA until it is unmapped. The graphics API from which the resource
            was registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.CudaOpenGLBufferInteropResource.Map"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If the resource is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.Map">
            <summary>
            Maps the graphics resource for access by CUDA.<para/>
            The resource may be accessed by CUDA until it is unmapped. The graphics API from which the resource
            was registered should not access any resources while they are mapped by CUDA. If an application does
            so, the results are undefined.<para/>
            This function provides the synchronization guarantee that any graphics calls issued before <see cref="M:ManagedCuda.CudaOpenGLBufferInteropResource.Map"/>
            will complete before any subsequent CUDA work issued in <c>stream</c> begins.<para/>
            If the resource is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.UnMap(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Unmaps the graphics resource.<para/>
            Once unmapped, the resource may not be accessed by CUDA until they are mapped again.<para/>
            This function provides the synchronization guarantee that any CUDA work issued in <c>stream</c> before <see cref="M:ManagedCuda.CudaOpenGLBufferInteropResource.UnMap"/>
            will complete before any subsequently issued graphics work begins.<para/>
            If the resource is not presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.UnMap">
            <summary>
            Unmaps the graphics resource.<para/>
            Once unmapped, the resources in <c>resources</c> may not be accessed by CUDA until they are mapped again.<para/>
            This function provides the synchronization guarantee that any CUDA work issued in <c>stream</c> before <see cref="M:ManagedCuda.CudaOpenGLBufferInteropResource.UnMap"/>
            will complete before any subsequently issued graphics work begins.<para/>
            If the resource is not presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.SetMapFlags(ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags)">
            <summary>
            Set <c>flags</c> for mapping the graphics resource. <para/>
            Changes to <c>flags</c> will take effect the next time <c>resource</c> is mapped. See <see cref="T:ManagedCuda.BasicTypes.CUGraphicsMapResourceFlags"/>. <para/>
            If <c>resource</c> is presently mapped for access by CUDA then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/> exception is thrown. 
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.Unregister">
            <summary>
            Unregisters the wrapped resource. Better use Dispose(), as the wrapper of the unregistered resource is of no use after unregistering.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetMappedPointer``1">
            <summary>
            Returns device variable through which the mapped graphics resource may be accessed. <para/>
            The pointer value in the device variable may change every time that the resource is mapped.<para/>
            If the resource is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            exception is thrown. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetMappedPointer(ManagedCuda.BasicTypes.CUdeviceptr@,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Returns in <c>devicePtr</c> a pointer through which the mapped graphics resource may be accessed. Returns
            in <c>size</c> the size of the memory in bytes which may be accessed from that pointer. The value set in <c>devicePtr</c> may
            change every time that the resource is mapped.<para/>
            If the resource is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            exception is thrown. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetMappedPointer">
            <summary>
            Returns a <c>CUdeviceptr</c>, a device pointer through which the mapped graphics resource may be accessed. 
            The value set in <c>devicePtr</c> may
            change every time that the resource is mapped.<para/>
            If the resource is not a buffer then it cannot be accessed via a pointer and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsPointer"/>
            exception is thrown. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetMappedArray1D(System.UInt32,System.UInt32)">
            <summary>
            Returns a CudaArray1D through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaArray1D</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetMappedArray2D(System.UInt32,System.UInt32)">
            <summary>
            Returns a CudaArray2D through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaArray2D</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetMappedArray3D(System.UInt32,System.UInt32)">
            <summary>
            Returns a CudaArray3D through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaArray3D</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetMappedMipmappedArray(ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaMipmappedArrayNumChannels)">
            <summary>
            Returns a CudaMipmappedArray through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CudaMipmappedArray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetMappedCUArray(System.UInt32,System.UInt32)">
            <summary>
            Returns a CUarray handle through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CUarray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <param name="arrayIndex"></param>
            <param name="mipLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetMappedCUMipmappedArray">
            <summary>
            Returns a CUmipmappedArray handle through which the subresource of the mapped graphics resource resource which
            corresponds to array index <c>arrayIndex</c> and mipmap level <c>mipLevel</c> may be accessed. The pointer value in <c>CUmipmappedArray</c>
            may change every time that <c>resource</c> is mapped.<para/>
            If the resource is not a texture then it cannot be accessed via an array and <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMappedAsArray"/>
            exception is thrwon. If <c>arrayIndex</c> is not a valid array index for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If <c>mipLevel</c> is not a valid mipmap level for the resource then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>
            exception is thrwon. If the resource is not mapped then <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotMapped"/> exception is thrwon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.GetCUgraphicsResource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaOpenGLBufferInteropResource.SetIsMapped">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaOpenGLBufferInteropResource.IsMapped">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaOpenGLBufferInteropResource.IsRegistered">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaOpenGLBufferInteropResource.CUgraphicsResource">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaDeviceProperties">
            <summary>
            CUDA device properties
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.ClockRate">
            <summary>
            Peak clock frequency in kilohertz
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaxBlockDim">
            <summary>
            Maximum block dimensions
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaxGridDim">
            <summary>
            Maximum grid dimensions
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MemoryPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.RegistersPerBlock">
            <summary>
            Maximum number of 32-bit registers available per block
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.SharedMemoryPerBlock">
            <summary>
            Maximum shared memory available per block in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.TextureAlign">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.TotalConstantMemory">
            <summary>
            Memory available on device for __constant__ variables in a CUDA C kernel in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.DeviceName">
            <summary>
            Name of the device
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.DriverVersion">
            <summary>
            Driver version
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.TotalGlobalMemory">
            <summary>
            Total amount of global memory on the device
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MultiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.WarpSize">
            <summary>
            Warp size in threads (also called SIMDWith)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.GpuOverlap">
            <summary>
            Device can possibly copy memory and execute a kernel concurrently
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.KernelExecTimeoutEnabled">
            <summary>
            Specifies whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.Integrated">
            <summary>
            Device is integrated with host memory
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.CanMapHostMemory">
            <summary>
            Device can map host memory into CUDA address space
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.ComputeMode">
            <summary>
            Compute mode (See CUComputeMode for details)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture1DWidth">
            <summary>
            Maximum 1D texture width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DWidth">
            <summary>
            Maximum 2D texture width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DHeight">
            <summary>
            Maximum 2D texture height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture3DWidth">
            <summary>
            Maximum 3D texture width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture3DHeight">
            <summary>
            Maximum 3D texture height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture3DDepth">
            <summary>
            Maximum 3D texture depth
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DArrayWidth">
            <summary>
            Maximum texture array width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DArrayHeight">
            <summary>
            Maximum texture array height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DArrayNumSlices">
            <summary>
            Maximum slices in a texture array
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.SurfaceAllignment">
            <summary>
            Alignment requirement for surfaces
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.ConcurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.EccEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.PciBusId">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.PciDeviceId">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.TccDrivelModel">
            <summary>
            Device is using TCC driver model
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MemoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.GlobalMemoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.L2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.AsyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.UnifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture1DLayeredWidth">
            <summary>
            Maximum 1D layered texture width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture1DLayeredLayers">
            <summary>
            Maximum layers in a 1D layered texture
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.PCIDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.TexturePitchAlignment">
            <summary>
            Pitch alignment requirement for textures
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTextureCubeMapWidth">
            <summary>
            Maximum cubemap texture width/height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTextureCubeMapLayeredWidth">
            <summary>
            Maximum cubemap layered texture width/height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTextureCubeMapLayeredLayers">
            <summary>
            Maximum layers in a cubemap layered texture
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface1DWidth">
            <summary>
            Maximum 1D surface width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface2DWidth">
            <summary>
            Maximum 2D surface width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface2DHeight">
            <summary>
            Maximum 2D surface height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface3DWidth">
            <summary>
            Maximum 3D surface width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface3DHeight">
            <summary>
            Maximum 3D surface height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface3DDepth">
            <summary>
            Maximum 3D surface depth
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface1DLayeredWidth">
            <summary>
            Maximum 1D layered surface width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface1DLayeredLayers">
            <summary>
            Maximum layers in a 1D layered surface
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface2DLayeredWidth">
            <summary>
            Maximum 2D layered surface width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface2DLayeredHeight">
            <summary>
            Maximum 2D layered surface height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurface2DLayeredLayers">
            <summary>
            Maximum layers in a 2D layered surface
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurfaceCubemapWidth">
            <summary>
            Maximum cubemap surface width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurfaceCubemapLayeredWidth">
            <summary>
            Maximum cubemap layered surface width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumSurfaceCubemapLayeredLayers">
            <summary>
            Maximum layers in a cubemap layered surface
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture1DLinearWidth">
            <summary>
            Maximum 1D linear texture width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DLinearWidth">
            <summary>
            Maximum 2D linear texture width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DLinearHeight">
            <summary>
            Maximum 2D linear texture height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DLinearPitch">
            <summary>
            Maximum 2D linear texture pitch in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DMipmappedWidth">
            <summary>
            Maximum mipmapped 2D texture width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture2DMipmappedHeight">
            <summary>
            Maximum mipmapped 2D texture height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.ComputeCapabilityMajor">
            <summary>
            Major compute capability version number
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.ComputeCapabilityMinor">
            <summary>
            Minor compute capability version number
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.ComputeCapability">
            <summary>
            Compute capability version number
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaDeviceProperties.MaximumTexture1DMipmappedWidth">
            <summary>
            Maximum mipmapped 1D texture width
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaTextureLinearPitched2D`1">
            <summary>
            CudaLinearTexture2D
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinearPitched2D`1.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new 2D texture from linear memory. Allocates a new device variable
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinearPitched2D`1.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new 2D texture from linear memory. Allocates a new device variable
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinearPitched2D`1.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaPitchedDeviceVariable{`0})">
            <summary>
            Creates a new 2D texture from linear memory.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="deviceVar"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinearPitched2D`1.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaPitchedDeviceVariable{`0})">
            <summary>
            Creates a new 2D texture from linear memory.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="format"></param>
            <param name="deviceVar"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinearPitched2D`1.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinearPitched2D`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinearPitched2D`1.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureLinearPitched2D`1.Reset(ManagedCuda.CudaPitchedDeviceVariable{`0})">
            <summary>
            Binds a linear address range to the texture reference. <para/>
            Any previous address or CUDA array state associated with the texture reference is superseded by this function. <para/>
            Any memory previously bound to the texture reference is unbound.<para/>
            Size my differ to the previous bound variable, but type must be the same.
            </summary>
            <param name="deviceVar">New device variable to bind this texture reference to.</param>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.TextureReference">
            <summary>
            TextureReference
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.AddressMode0">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.AddressMode1">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.Filtermode">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.ChannelSize">
            <summary>
            ChannelSize
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.TotalSizeInBytes">
            <summary>
            TotalSizeInBytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.NumChannels">
            <summary>
            NumChannels
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.CUFuntion">
            <summary>
            CUFunction
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureLinearPitched2D`1.DeviceVar">
            <summary>
            Device variable in linear Memory
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaTextureMipmappedArray">
            <summary>
            CudaArrayTexture3D
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureMipmappedArray.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUDAArray3DDescriptor,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new mipmapped texture from array memory. Allocates a new mipmapped array. 
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressModeForAllDimensions"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="descriptor"></param>
            <param name="numMipmapLevels"></param>
            <param name="maxAniso"></param>
            <param name="mipmapFilterMode"></param>
            <param name="mipmapLevelBias"></param>
            <param name="minMipmapLevelClamp"></param>
            <param name="maxMipmapLevelClamp"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureMipmappedArray.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.BasicTypes.CUDAArray3DDescriptor,System.UInt32,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new mipmapped texture from array memory. Allocates a new mipmapped array.
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="addressMode2"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="descriptor"></param>
            <param name="numMipmapLevels"></param>
            <param name="maxAniso"></param>
            <param name="mipmapFilterMode"></param>
            <param name="mipmapLevelBias"></param>
            <param name="minMipmapLevelClamp"></param>
            <param name="maxMipmapLevelClamp"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureMipmappedArray.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaMipmappedArray,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new mipmapped texture from array memory
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressModeForAllDimensions"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
            <param name="maxAniso"></param>
            <param name="mipmapFilterMode"></param>
            <param name="mipmapLevelBias"></param>
            <param name="minMipmapLevelClamp"></param>
            <param name="maxMipmapLevelClamp"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureMipmappedArray.#ctor(ManagedCuda.CudaKernel,System.String,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUAddressMode,ManagedCuda.BasicTypes.CUFilterMode,ManagedCuda.BasicTypes.CUTexRefSetFlags,ManagedCuda.CudaMipmappedArray,System.UInt32,ManagedCuda.BasicTypes.CUFilterMode,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new mipmapped texture from array memory
            </summary>
            <param name="kernel"></param>
            <param name="texName"></param>
            <param name="addressMode0"></param>
            <param name="addressMode1"></param>
            <param name="addressMode2"></param>
            <param name="filterMode"></param>
            <param name="flags"></param>
            <param name="array"></param>
            <param name="maxAniso"></param>
            <param name="mipmapFilterMode"></param>
            <param name="mipmapLevelBias"></param>
            <param name="minMipmapLevelClamp"></param>
            <param name="maxMipmapLevelClamp"></param>
        </member>
        <member name="M:ManagedCuda.CudaTextureMipmappedArray.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureMipmappedArray.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaTextureMipmappedArray.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.TextureReference">
            <summary>
            TextureReference
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.AddressMode0">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.AddressMode1">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.AddressMode2">
            <summary>
            AddressMode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.Filtermode">
            <summary>
            Filtermode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.CUFuntion">
            <summary>
            CUFuntion
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.MaxAniso">
            <summary>
            MaxAniso
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.MipmapFiltermode">
            <summary>
            Mipmap Filtermode
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.MipmapLevelBias">
            <summary>
            MipmapLevelBias
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.MinMipmapLevelClamp">
            <summary>
            MinMipmapLevelClamp
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaTextureMipmappedArray.MaxMipmapLevelClamp">
            <summary>
            MaxMipmapLevelClamp
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaPageLockedHostMemory`1">
            <summary>
            A variable located in page locked (pinned) host memory. Use this type of variabe for asynchronous memcpy.
            </summary>
            <typeparam name="T">variable base type</typeparam>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUMemHostAllocFlags)">
            <summary>
            Creates a new CudaPageLockedHostMemory and allocates the memory on host. Using cuMemHostAlloc
            </summary>
            <param name="size">In elements</param>
            <param name="allocFlags"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.#ctor(ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaPageLockedHostMemory and allocates the memory on host. Using cuMemAllocHost
            </summary>
            <param name="size">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.#ctor(System.IntPtr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaPageLockedHostMemory from an existing IntPtr. IntPtr must point to page locked memory!
            hostPointer won't be freed while disposing.
            </summary>
            <param name="hostPointer"></param>
            <param name="size">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy host to 1D Array
            </summary>
            <param name="deviceArray"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToArray1D(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Synchron copy host to 1D Array
            </summary>
            <param name="deviceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToArray1D(ManagedCuda.CudaArray1D)">
            <summary>
            Synchron copy host to 1D Array
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy host to 1D Array
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyFromArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy 1D Array to host
            </summary>
            <param name="deviceArray"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyFromArray1D(ManagedCuda.BasicTypes.CUarray)">
            <summary>
            Synchron copy 1D Array to host
            </summary>
            <param name="deviceArray"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyFromArray1D(ManagedCuda.CudaArray1D)">
            <summary>
            Synchron copy 1D Array to host
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyFromArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy 1D Array to host
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToDevice(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToHost(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToHost(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr">Pointer to device memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="aSizeInBytes">Bytes to copy</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy host to device
            </summary>
            <param name="devicePtr">Pointer to device memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="aSizeInBytes">Bytes to copy</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToHost(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr">Pointer to device memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="aSizeInBytes">Bytes to copy</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.SynchronCopyToHost(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Synchron copy device to host
            </summary>
            <param name="devicePtr">Pointer to device memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="aSizeInBytes">Bytes to copy</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyToArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Asynchron copy host to 1D Array
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
            <param name="offset">in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyToArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy host to 1D Array
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyToArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy host to 1D Array
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyToArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Asynchron copy host to 1D Array
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
            <param name="offset">in bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyFromArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Asynchron copy 1D Array to host
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
            <param name="offset">bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyFromArray1D(ManagedCuda.BasicTypes.CUarray,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy 1D Array to host
            </summary>
            <param name="deviceArray"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyFromArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy 1D Array to host
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyFromArray1D(ManagedCuda.CudaArray1D,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Asynchron copy 1D Array to host
            </summary>
            <param name="array"></param>
            <param name="stream"></param>
            <param name="offset">bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="deviceVar"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyFromDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="devicePtr"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyFromDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="deviceVar"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="devicePtr">Pointer to device memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="aSizeInBytes">Bytes to copy</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron Copy host to device
            </summary>
            <param name="deviceVar"></param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="aSizeInBytes">Bytes to copy</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyFromDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="devicePtr">Pointer to device memory</param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="aSizeInBytes">Bytes to copy</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.AsyncCopyFromDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Asynchron copy device to host
            </summary>
            <param name="deviceVar"></param>
            <param name="offsetSrc">Offset to source pointer in bytes</param>
            <param name="offsetDest">Offset to destination pointer in bytes</param>
            <param name="aSizeInBytes">Bytes to copy</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.GetDevicePointer">
            <summary>
            Returns the CUdeviceptr for pinned host memory mapped to device memory space. Only valid if context is created with flag <see cref="F:ManagedCuda.BasicTypes.CUCtxFlags.MapHost"/>
            </summary>
            <returns>Device Pointer</returns>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemory`1.GetAllocFlags">
            <summary>
            Passes back the flags that were specified when allocating the pinned host buffer
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory`1.PinnedHostPointer">
            <summary>
            Pointer to pinned host memory.
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory`1.SizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory`1.Size">
            <summary>
            Size in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory`1.Item(ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Access array per element.<para/>
            Each single access hast to trespass the managed/unmanged memory barrier. Access is therefor rather slow.
            </summary>
            <param name="index">index in elements</param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemory`1.IsOwner">
            <summary>
            If the wrapper class instance is the owner of a CUDA handle, it will be destroyed while disposing.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaPageLockedHostMemoryEnumerator`1">
            <summary>
            Enumerator class for CudaPageLockedHostMemory
            </summary>
            <typeparam name="T_"></typeparam>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemoryEnumerator`1.#ctor(ManagedCuda.CudaPageLockedHostMemory{`0})">
            <summary>
            
            </summary>
            <param name="memory"></param>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemoryEnumerator`1.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPageLockedHostMemoryEnumerator`1.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemoryEnumerator`1.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPageLockedHostMemoryEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaMipmappedArrayNumChannels">
            <summary>
            Number of channels in array
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaMipmappedArrayNumChannels.One">
            <summary>
            One channel, e.g. float1, int1, float, int
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaMipmappedArrayNumChannels.Two">
            <summary>
            Two channels, e.g. float2, int2
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaMipmappedArrayNumChannels.Four">
            <summary>
            Four channels, e.g. float4, int4
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaMipmappedArray">
            <summary>
            A mipmapped Cuda array
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaMipmappedArray.#ctor(ManagedCuda.BasicTypes.CUDAArray3DDescriptor,System.UInt32)">
            <summary>
            Creates a CUDA mipmapped array according to <c>descriptor</c>. <para/>
            Width, Height, and Depth are the width, height, and depth of the CUDA array (in elements); the following
            types of CUDA arrays can be allocated:<para/>
            – A 1D mipmapped array is allocated if Height and Depth extents are both zero.<para/>
            – A 2D mipmapped array is allocated if only Depth extent is zero.<para/>
            – A 3D mipmapped array is allocated if all three extents are non-zero.<para/>
            – A 1D layered CUDA mipmapped array is allocated if only Height is zero and the <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Layered"/> 
              flag is set. Each layer is a 1D array. The number of layers is determined by the depth extent.<para/>
            – A 2D layered CUDA mipmapped array is allocated if all three extents are non-zero and the <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Layered"/> 
              flag is set. Each layer is a 2D array. The number of layers is determined by the depth extent.<para/>
            – A cubemap CUDA mipmapped array is allocated if all three extents are non-zero and the <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Cubemap"/>
              flag is set. Width must be equal to Height, and Depth must be six. A
              cubemap is a special type of 2D layered CUDA array, where the six layers represent the six faces of a
              cube. The order of the six layers in memory is the same as that listed in CUarray_cubemap_face.<para/>
            – A cubemap layered CUDA mipmapped array is allocated if all three extents are non-zero, and both,
              <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Cubemap"/> and <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Layered"/> flags are set. Width must be equal
              to Height, and Depth must be a multiple of six. A cubemap layered CUDA array is a special type of
              2D layered CUDA array that consists of a collection of cubemaps. The first six layers represent the first
              cubemap, the next six layers form the second cubemap, and so on.<para/>
            Flags may be set to:<para/>
            – <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Layered"/> to enable creation of layered CUDA mipmapped arrays. If this flag is set,
              Depth specifies the number of layers, not the depth of a 3D array.<para/>
            – <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Cubemap"/> to enable creation of mipmapped cubemaps. If this flag is set, Width
              must be equal to Height, and Depth must be six. If the CUDA_ARRAY3D_LAYERED flag is also set,
              then Depth must be a multiple of six.<para/>
            – <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.TextureGather"/> to indicate that the CUDA mipmapped array will be used for
              texture gather. Texture gather can only be performed on 2D CUDA mipmapped arrays.
            </summary>
            <param name="descriptor">mipmapped array descriptor</param>
            <param name="numMipmapLevels">Number of mipmap levels. This value is clamped to the range [1, 1 + floor(log2(max(width, height, depth)))]</param>
        </member>
        <member name="M:ManagedCuda.CudaMipmappedArray.#ctor(ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.CudaMipmappedArrayNumChannels,ManagedCuda.BasicTypes.CUDAArray3DFlags,System.UInt32)">
            <summary>
            Creates a CUDA mipmapped array according to <c>descriptor</c>. <para/>
            Width, Height, and Depth are the width, height, and depth of the CUDA array (in elements); the following
            types of CUDA arrays can be allocated:<para/>
            – A 1D mipmapped array is allocated if Height and Depth extents are both zero.<para/>
            – A 2D mipmapped array is allocated if only Depth extent is zero.<para/>
            – A 3D mipmapped array is allocated if all three extents are non-zero.<para/>
            – A 1D layered CUDA mipmapped array is allocated if only Height is zero and the <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Layered"/> 
              flag is set. Each layer is a 1D array. The number of layers is determined by the depth extent.
            – A 2D layered CUDA mipmapped array is allocated if all three extents are non-zero and the <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Layered"/> 
              flag is set. Each layer is a 2D array. The number of layers is determined by the depth extent.
            – A cubemap CUDA mipmapped array is allocated if all three extents are non-zero and the <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Cubemap"/>
              flag is set. Width must be equal to Height, and Depth must be six. A
              cubemap is a special type of 2D layered CUDA array, where the six layers represent the six faces of a
              cube. The order of the six layers in memory is the same as that listed in CUarray_cubemap_face.
            – A cubemap layered CUDA mipmapped array is allocated if all three extents are non-zero, and both,
              <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Cubemap"/> and <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Layered"/> flags are set. Width must be equal
              to Height, and Depth must be a multiple of six. A cubemap layered CUDA array is a special type of
              2D layered CUDA array that consists of a collection of cubemaps. The first six layers represent the first
              cubemap, the next six layers form the second cubemap, and so on.
            </summary>
            <param name="format">Array format</param>
            <param name="width">Array width. See general description.</param>
            <param name="height">Array height. See general description.</param>
            <param name="depth">Array depth or layer count. See general description.</param>
            <param name="numChannels">number of channels</param>
            <param name="flags">Flags may be set to:<para/>
            – <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Layered"/> to enable creation of layered CUDA mipmapped arrays. If this flag is set,
              Depth specifies the number of layers, not the depth of a 3D array.<para/>
            – <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.Cubemap"/> to enable creation of mipmapped cubemaps. If this flag is set, Width
              must be equal to Height, and Depth must be six. If the CUDA_ARRAY3D_LAYERED flag is also set,
              then Depth must be a multiple of six.<para/>
            – <see cref="F:ManagedCuda.BasicTypes.CUDAArray3DFlags.TextureGather"/> to indicate that the CUDA mipmapped array will be used for
              texture gather. Texture gather can only be performed on 2D CUDA mipmapped arrays.</param>
            <param name="numMipmapLevels">Number of mipmap levels. This value is clamped to the range [1, 1 + floor(log2(max(width, height, depth)))]</param>
        </member>
        <member name="M:ManagedCuda.CudaMipmappedArray.#ctor(ManagedCuda.BasicTypes.CUmipmappedArray,ManagedCuda.BasicTypes.CUArrayFormat,ManagedCuda.CudaMipmappedArrayNumChannels)">
            <summary>
            Creates a CUDA mipmapped array from an existing mipmap array handle.
            </summary>
            <param name="handle">handle to wrap</param>
            <param name="format">Array format of the wrapped array. Cannot be gathered through CUDA API.</param>
            <param name="numChannels">Number of channels of wrapped array.</param>
        </member>
        <member name="M:ManagedCuda.CudaMipmappedArray.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaMipmappedArray.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaMipmappedArray.GetLevelAsArray1D(System.UInt32)">
            <summary>
            Returns a CUDA array that represents a single mipmap level
            of the CUDA mipmapped array.
            </summary>
            <param name="level">Mipmap level</param>
        </member>
        <member name="M:ManagedCuda.CudaMipmappedArray.GetLevelAsArray2D(System.UInt32)">
            <summary>
            Returns a CUDA array that represents a single mipmap level
            of the CUDA mipmapped array.
            </summary>
            <param name="level">Mipmap level</param>
        </member>
        <member name="M:ManagedCuda.CudaMipmappedArray.GetLevelAsArray3D(System.UInt32)">
            <summary>
            Returns a CUDA array that represents a single mipmap level
            of the CUDA mipmapped array.
            </summary>
            <param name="level">Mipmap level</param>
        </member>
        <member name="M:ManagedCuda.CudaMipmappedArray.GetLevelAsCUArray(System.UInt32)">
            <summary>
            Returns a CUDA array that represents a single mipmap level
            of the CUDA mipmapped array.
            </summary>
            <param name="level">Mipmap level</param>
        </member>
        <member name="P:ManagedCuda.CudaMipmappedArray.CUMipmappedArray">
            <summary>
            Returns the wrapped CUmipmappedArray
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaMipmappedArray.Array3DDescriptor">
            <summary>
            Returns the wrapped CUDAArray3DDescriptor
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaMipmappedArray.Depth">
            <summary>
            Returns the Depth of the array
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaMipmappedArray.Height">
            <summary>
            Returns the Height of the array
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaMipmappedArray.Width">
            <summary>
            Returns the array width in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaMipmappedArray.Flags">
            <summary>
            Returns the array creation flags
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaMipmappedArray.Format">
            <summary>
            Returns the array format
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaMipmappedArray.NumChannels">
            <summary>
            Returns number of channels
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaMipmappedArray.IsOwner">
            <summary>
            If the wrapper class instance is the owner of a CUDA handle, it will be destroyed while disposing.
            </summary>
        </member>
        <member name="T:ManagedCuda.OpenGLNativeMethods">
            <summary>
            OpenGL Interoperability
            </summary>
        </member>
        <member name="T:ManagedCuda.OpenGLNativeMethods.CUDA3">
            <summary>
            OpenGL Interoperability for CUDA >3.x
            </summary>
        </member>
        <member name="M:ManagedCuda.OpenGLNativeMethods.CUDA3.cuGLCtxCreate(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)">
            <summary>
            Creates a new CUDA context, initializes OpenGL interoperability, and associates the CUDA context with the calling
            thread. It must be called before performing any other OpenGL interoperability operations. It may fail if the needed
            OpenGL driver facilities are not available. For usage of the Flags parameter, see <see cref="M:ManagedCuda.DriverAPINativeMethods.ContextManagement.cuCtxCreate_v2(ManagedCuda.BasicTypes.CUcontext@,ManagedCuda.BasicTypes.CUCtxFlags,ManagedCuda.BasicTypes.CUdevice)"/>.
            </summary>
            <param name="pCtx">Returned CUDA context</param>
            <param name="Flags">Options for CUDA context creation</param>
            <param name="device">Device on which to create the context</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorOutOfMemory"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.OpenGLNativeMethods.CUDA3.cuGraphicsGLRegisterBuffer(ManagedCuda.BasicTypes.CUgraphicsResource@,System.UInt32,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags)">
            <summary>
            Registers the buffer object specified by buffer for access by CUDA. A handle to the registered object is returned as
            <c>pCudaResource</c>. The map flags <c>Flags</c> specify the intended usage.
            </summary>
            <param name="pCudaResource">Pointer to the returned object handle</param>
            <param name="buffer">name of buffer object to be registered</param>
            <param name="Flags">Map flags</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.OpenGLNativeMethods.CUDA3.cuGraphicsGLRegisterImage(ManagedCuda.BasicTypes.CUgraphicsResource@,System.UInt32,ManagedCuda.CudaOpenGLImageInteropResource.OpenGLImageTarget,ManagedCuda.BasicTypes.CUGraphicsRegisterFlags)">
            <summary>
            Registers the texture or renderbuffer object specified by <c>image</c> for access by CUDA. <c>target</c> must match the type
            of the object. A handle to the registered object is returned as <c>pCudaResource</c>. The map flags Flags specify the
            intended usage. <para/>
            The following image classes are currently disallowed: <para/>
            • Textures with borders <para/>
            • Multisampled renderbuffers
            </summary>
            <param name="pCudaResource">Pointer to the returned object handle</param>
            <param name="image">name of texture or renderbuffer object to be registered</param>
            <param name="target">Identifies the type of object specified by <c>image</c>, and must be one of <c>GL_TEXTURE_2D</c>,
            <c>GL_TEXTURE_RECTANGLE</c>, <c>GL_TEXTURE_CUBE_MAP</c>, 
            <c>GL_TEXTURE_3D</c>, <c>GL_TEXTURE_2D_ARRAY</c>, or <c>GL_RENDERBUFFER</c>.</param>
            <param name="Flags">Map flags</param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidHandle"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorAlreadyMapped"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.OpenGLNativeMethods.CUDA3.cuWGLGetDevice(ManagedCuda.BasicTypes.CUdevice@,System.IntPtr)">
            <summary>
            Returns in <c>pDevice</c> the CUDA device associated with a <c>hGpu</c>, if applicable.
            </summary>
            <param name="pDevice">Device associated with hGpu</param>
            <param name="hGpu">Handle to a GPU, as queried via <c>WGL_NV_gpu_affinity()</c></param>
            <returns>CUDA Error Codes: <see cref="F:ManagedCuda.BasicTypes.CUResult.Success"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorDeinitialized"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorNotInitialized"/>, 
            <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidContext"/>, <see cref="F:ManagedCuda.BasicTypes.CUResult.ErrorInvalidValue"/>.
            <remarks>Note that this function may also return error codes from previous, asynchronous launches.</remarks></returns>
        </member>
        <member name="M:ManagedCuda.OpenGLNativeMethods.CUDA3.cuGLGetDevices(System.UInt32@,ManagedCuda.BasicTypes.CUdevice[],System.UInt32,ManagedCuda.BasicTypes.CUGLDeviceList)">
            <summary>
            Gets the CUDA devices associated with the current OpenGL context.<para/>
            Returns in pCudaDeviceCount the number of CUDA-compatible devices 
            corresponding to the current OpenGL context. Also returns in pCudaDevices 
            at most cudaDeviceCount of the CUDA-compatible devices corresponding to 
            the current OpenGL context. If any of the GPUs being used by the current OpenGL
            context are not CUDA capable then the call will return CUDA_ERROR_NO_DEVICE.
            </summary>
            <param name="pCudaDeviceCount">Returned number of CUDA devices.</param>
            <param name="pCudaDevices">Returned CUDA devices.</param>
            <param name="cudaDeviceCount">The size of the output device array pCudaDevices.</param>
            <param name="deviceList">The set of devices to return.</param>
        </member>
        <member name="T:ManagedCuda.CudaPitchedDeviceVariable`1">
            <summary>
            A variable located in CUDA device memory. The data is aligned following <see cref="P:ManagedCuda.CudaPitchedDeviceVariable`1.Pitch"/>
            </summary>
            <typeparam name="T">variable base type</typeparam>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaPitchedDeviceVariable and allocates the memory on the device
            </summary>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.#ctor(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaPitchedDeviceVariable and allocates the memory on the device
            </summary>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="pack">Group <c>pack</c> elements as one type. E.g. 4 floats in host code to one float4 in device code</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.#ctor(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Creates a new CudaPitchedDeviceVariable from an existing CUdeviceptr
            The CUdeviceptr won't be freed when disposing.
            </summary>
            <param name="devPtr"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="pitch">In bytes</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.#ctor(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,System.Boolean)">
            <summary>
            Creates a new CudaPitchedDeviceVariable from an existing CUdeviceptr
            </summary>
            <param name="devPtr"></param>
            <param name="width">In elements</param>
            <param name="height">In elements</param>
            <param name="pitch">In bytes</param>
            <param name="isOwner">The CUdeviceptr will be freed while disposing if the CudaPitchedDeviceVariable is the owner</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0})">
            <summary>
            Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="SrcXInBytes">Source X in bytes</param>
            <param name="SrcY">Source Y</param>
            <param name="DestXInBytes">Destination X in bytes</param>
            <param name="DestY">Destination Y</param>
            <param name="widthInBytes">Width in bytes</param>
            <param name="height">Height in elements</param>
            <param name="SrcPitch">Source pitch</param>
            <param name="DestPitch">Destination pitch</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(ManagedCuda.CudaDeviceVariable{`0})">
            <summary>
            Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="SrcXInBytes">Source X in bytes</param>
            <param name="SrcY">Source Y</param>
            <param name="DestXInBytes">Destination X in bytes</param>
            <param name="DestY">Destination Y</param>
            <param name="widthInBytes">Width in bytes</param>
            <param name="height">Height in elements</param>
            <param name="SrcPitch">Source pitch</param>
            <param name="DestPitch">Destination pitch</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="pitchSrc">Source pitch</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="SrcXInBytes">Source X in bytes</param>
            <param name="SrcY">Source Y</param>
            <param name="DestXInBytes">Destination X in bytes</param>
            <param name="DestY">Destination Y</param>
            <param name="widthInBytes">Width in bytes</param>
            <param name="height">Height in elements</param>
            <param name="SrcPitch">Source pitch</param>
            <param name="DestPitch">Destination pitch</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(System.IntPtr)">
            <summary>
            Copy from Host to device memory
            </summary>
            <param name="hostSrc">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from Host to device memory
            </summary>
            <param name="hostSrc">Source</param>
            <param name="width">Width in bytes</param>
            <param name="height">Height in elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from host to device memory
            </summary>
            <param name="hostSrc">Source</param>
            <param name="SrcXInBytes">Source X in bytes</param>
            <param name="SrcY">Source Y</param>
            <param name="DestXInBytes">Destination X in bytes</param>
            <param name="DestY">Destination Y</param>
            <param name="widthInBytes">Width in bytes</param>
            <param name="height">Height in elements</param>
            <param name="SrcPitch">Source pitch</param>
            <param name="DestPitch">Destination pitch</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(`0[])">
            <summary>
            Copy from Host to device memory
            </summary>
            <param name="hostSrc">Source</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(`0[],ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from Host to device memory
            </summary>
            <param name="hostSrc">Source</param>
            <param name="width">Width in elements</param>
            <param name="height">Height in elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToDevice(`0[],ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy from host to device memory
            </summary>
            <param name="hostSrc">Source</param>
            <param name="SrcXInBytes">Source X in bytes</param>
            <param name="SrcY">Source Y</param>
            <param name="DestXInBytes">Destination X in bytes</param>
            <param name="DestY">Destination Y</param>
            <param name="widthInBytes">Width in bytes</param>
            <param name="height">Height in elements</param>
            <param name="SrcPitch">Source pitch</param>
            <param name="DestPitch">Destination pitch</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToHost(System.IntPtr)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="hostDest">IntPtr to destination in host memory</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToHost(System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="hostDest">IntPtr to destination in host memory</param>
            <param name="width">Width in bytes</param>
            <param name="height">Height in elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToHost(System.IntPtr,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="hostDest">Destination</param>
            <param name="SrcXInBytes">Source X in bytes</param>
            <param name="SrcY">Source Y</param>
            <param name="DestXInBytes">Destination X in bytes</param>
            <param name="DestY">Destination Y</param>
            <param name="widthInBytes">Width in bytes</param>
            <param name="height">Height in elements</param>
            <param name="SrcPitch">Source pitch</param>
            <param name="DestPitch">Destination pitch</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToHost(`0[])">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="aHostDest">Destination</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToHost(`0[],ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from this device to host memory
            </summary>
            <param name="hostDest">Destination</param>
            <param name="width">Width in elements</param>
            <param name="height">Height in elements</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.CopyToHost(`0[],ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Copy data from device to host memory
            </summary>
            <param name="hostDest">Destination</param>
            <param name="SrcXInBytes">Source X in bytes</param>
            <param name="SrcY">Source Y</param>
            <param name="DestXInBytes">Destination X in bytes</param>
            <param name="DestY">Destination Y</param>
            <param name="widthInBytes">Width in bytes</param>
            <param name="height">Height in elements</param>
            <param name="SrcPitch">Source pitch</param>
            <param name="DestPitch">Destination pitch</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source pointer to device memory</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async Copy data from device to device memory
            </summary>
            <param name="source">Source</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaStream)">
            <summary>
            Async Copy data from device to device memory (1D Copy, copies destination pitch * height bytes data)
            </summary>
            <param name="source">Source pointer to device memory</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.CudaStream)">
            <summary>
            Async Copy data from device to device memory (1D Copy, copies destination pitch * height bytes data)
            </summary>
            <param name="source">Source</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.AsyncCopyToDevice(ManagedCuda.CudaPitchedDeviceVariable{`0},ManagedCuda.CudaStream)">
            <summary>
            Async Copy from device to device memory
            </summary>
            <param name="deviceSrc">Source</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.Memset(System.Byte)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.Memset(System.UInt16)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.Memset(System.UInt32)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.MemsetAsync(System.Byte,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.MemsetAsync(System.UInt16,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.MemsetAsync(System.UInt32,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Memset
            </summary>
            <param name="aValue"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.PeerCopyToDevice(ManagedCuda.CudaContext,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaContext)">
            <summary>
            Copies from device memory in one context to device memory in another context
            </summary>
            <param name="destCtx">Destination context</param>
            <param name="source">Source pointer to device memory</param>
            <param name="sourceCtx">Source context</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.PeerCopyToDevice(ManagedCuda.CudaContext,ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.CudaContext)">
            <summary>
            Copies from device memory in one context to device memory in another context
            </summary>
            <param name="destCtx">Destination context</param>
            <param name="source">Source pointer to device memory</param>
            <param name="sourceCtx">Source context</param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.PeerCopyToDevice(ManagedCuda.CudaContext,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaContext,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async-Copies from device memory in one context to device memory in another context
            </summary>
            <param name="destCtx">Destination context</param>
            <param name="source">Source pointer to device memory</param>
            <param name="sourceCtx">Source context</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.PeerCopyToDevice(ManagedCuda.CudaContext,ManagedCuda.CudaDeviceVariable{`0},ManagedCuda.CudaContext,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Async-Copies from device memory in one context to device memory in another context
            </summary>
            <param name="destCtx">Destination context</param>
            <param name="source">Source pointer to device memory</param>
            <param name="sourceCtx">Source context</param>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaPitchedDeviceVariable`1.op_Implicit(ManagedCuda.CudaPitchedDeviceVariable{`0})~`0[]">
            <summary>
            Converts a device variable to a host array
            </summary>
            <param name="d">device variable</param>
            <returns>newly allocated host array with values from device memory</returns>
        </member>
        <member name="P:ManagedCuda.CudaPitchedDeviceVariable`1.Item(ManagedCuda.BasicTypes.SizeT,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Access array elements directly from host.<para/>
            Each single access invokes a device to host or host to device copy. Access is therefor rather slow.
            </summary>
            <param name="x">X-index in elements</param>
            <param name="y">Y-index in elements</param>
            <returns></returns>
        </member>
        <member name="P:ManagedCuda.CudaPitchedDeviceVariable`1.DevicePointer">
            <summary>
            Device pointer
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPitchedDeviceVariable`1.Width">
            <summary>
            Width in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPitchedDeviceVariable`1.WidthInBytes">
            <summary>
            Width in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPitchedDeviceVariable`1.Height">
            <summary>
            Height in elements
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPitchedDeviceVariable`1.Pitch">
            <summary>
            Pitch in bytes
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaPitchedDeviceVariable`1.TotalSizeInBytes">
            <summary>
            Total size in bytes (Pitch * Height)
            </summary>
        </member>
    </members>
</doc>
